package net.i2cat.nexus.protocols.sessionmanager;

import java.util.Set;

/**
 * Manages all the sessions with a single device, identified by device_id
 * 
 * @author eduardgrasa
 * 
 */
public interface IProtocolSessionManager {

	/**
	 * DeviceID uniquely identifies a device from another within an IaaS
	 * container. It is a string generated by the administrator
	 * 
	 * @return
	 */
	public String getDeviceID();

	/**
	 * Creates a new protocol session to the device, and is configured using the
	 * data of the session context
	 * 
	 * @param protocolSessionContext
	 * @throws protocolException
	 * @return the session id of the session that has been created
	 */
	public String createProtocolSession(ProtocolSessionContext protocolSessionContext) throws ProtocolException;

	/**
	 * Get the protocol session identified by session ID. If lock is set to
	 * true, no one else will be able to get the protocol session until it is
	 * returned
	 * 
	 * @param sessionID
	 *            the string that uniquely identifies this protocol session
	 *            within the protocol session manager
	 * @return the protocol session. If it is null, the session manager will
	 *         return any available protocol session to the device
	 * @throws protocol
	 *             exception if the requested session is locked
	 */
	public IProtocolSession getProtocolSession(String sessionID, boolean lock) throws ProtocolException;

	/**
	 * Releases the lock of the protocol session identified by session id. So
	 * that other clients of this library are able to use the session id
	 * protocol session.
	 * 
	 * @param sessionID
	 * @throws ProtocolException
	 *             If session id does not exist
	 */
	public void returnProtocolSession(String sessionID) throws ProtocolException;

	/**
	 * Destroys the protocol session
	 * 
	 * @param sessionID
	 * @throws ProtocolException
	 *             If there's no existing protocol session identified by
	 *             sessionID
	 */
	public void destroyProtocolSession(String sessionID) throws ProtocolException;

	/**
	 * Returns all the ids of the protocol sessions that are not currently
	 * locked
	 * 
	 * @return
	 */
	public Set<String> getAllProtocolSessions();

	/* Operations for pool pattern */

	public String checkOut(ProtocolSessionContext protocolSessionContext) throws ProtocolException;

	public void checkIn(String sessionID) throws ProtocolException;

}
