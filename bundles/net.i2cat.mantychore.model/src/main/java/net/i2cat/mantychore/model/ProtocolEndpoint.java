/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 10:54:51 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.io.Serializable;
import java.util.Date;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class ProtocolEndpoint as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the ProtocolEndpointBean Interface. The CIM class ProtocolEndpoint is described as
 * follows:
 * 
 * A communication point from which data can be sent or received. ProtocolEndpoints link system or computer interfaces to LogicalNetworks.
 */
public class ProtocolEndpoint extends ServiceAccessPoint implements
		Serializable {

	/**
	 * This constructor creates a ProtocolEndpointBeanImpl Class which implements the ProtocolEndpointBean Interface, and encapsulates the CIM class
	 * ProtocolEndpoint in a Java Bean. The CIM class ProtocolEndpoint is described as follows:
	 * 
	 * A communication point from which data can be sent or received. ProtocolEndpoints link system or computer interfaces to LogicalNetworks.
	 */
	public ProtocolEndpoint() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property Description.
	 */
	private String	description;

	/**
	 * This method returns the ProtocolEndpoint.Description property value. This property is described as follows:
	 * 
	 * The Description property provides a textual description of the object.
	 * 
	 * @return String current Description property value
	 * @exception Exception
	 */
	public String getDescription() {

		return (String) description;
	} // getDescription

	/**
	 * This method sets the ProtocolEndpoint.Description property value. This property is described as follows:
	 * 
	 * The Description property provides a textual description of the object.
	 * 
	 * @param String
	 *            new Description property value
	 * @exception Exception
	 */
	public void setDescription(String description) {

		this.description = description;
	} // setDescription

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property OperationalStatus.
	 */

	public enum OperationalStatus {
		UNKNOWN,
		OTHER,
		OK,
		DEGRADED,
		STRESSED,
		PREDICTIVE_FAILURE,
		ERROR,
		NON_RECOVERABLE_ERROR,
		STARTING,
		STOPPING,
		STOPPED,
		IN_SERVICE,
		NO_CONTACT,
		LOST_COMMUNICATION,
		ABORTED,
		DORMANT,
		SUPPORTING_ENTITY_IN_ERROR,
		COMPLETED,
		POWER_MODE,
		DMTF_RESERVED,
		VENDOR_RESERVED
	}

	OperationalStatus	operationalStatus;

	/**
	 * This method returns the ProtocolEndpoint.OperationalStatus property value. This property is described as follows:
	 * 
	 * Indicates the current statuses of the element. Various operational statuses are defined. Many of the enumeration's values are self-explanatory.
	 * However, a few are not and are described here in more detail. "Stressed" indicates that the element is functioning, but needs attention.
	 * Examples of "Stressed" states are overload, overheated, and so on. "Predictive Failure" indicates that an element is functioning nominally but
	 * predicting a failure in the near future. "In Service" describes an element being configured, maintained, cleaned, or otherwise administered.
	 * "No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it.
	 * "Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is
	 * currently unreachable. "Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an
	 * abrupt stop where the state and configuration of the element might need to be updated. "Dormant" indicates that the element is inactive or
	 * quiesced. "Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in
	 * error. An example is a network service or endpoint that cannot function due to lower-layer networking problems. "Completed" indicates that the
	 * element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can tell if the complete
	 * operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not
	 * complete OK or did not report an error). "Power Mode" indicates that the element has additional power model information contained in the
	 * Associated PowerManagementService association. OperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent
	 * approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today's environment to
	 * the future. This change was not made earlier because it required the deprecated qualifier. Due to the widespread use of the existing Status
	 * property in management applications, it is strongly recommended that providers or instrumentation provide both the Status and OperationalStatus
	 * properties. Further, the first value of OperationalStatus should contain the primary status for the element. When instrumented, Status (because
	 * it is single-valued) should also provide the primary status of the element.
	 * 
	 * @return short current OperationalStatus property value
	 * @exception Exception
	 */
	public OperationalStatus getOperationalStatus() {

		return this.operationalStatus;
	} // getOperationalStatus

	/**
	 * This method sets the ProtocolEndpoint.OperationalStatus property value. This property is described as follows:
	 * 
	 * Indicates the current statuses of the element. Various operational statuses are defined. Many of the enumeration's values are self-explanatory.
	 * However, a few are not and are described here in more detail. "Stressed" indicates that the element is functioning, but needs attention.
	 * Examples of "Stressed" states are overload, overheated, and so on. "Predictive Failure" indicates that an element is functioning nominally but
	 * predicting a failure in the near future. "In Service" describes an element being configured, maintained, cleaned, or otherwise administered.
	 * "No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it.
	 * "Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is
	 * currently unreachable. "Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an
	 * abrupt stop where the state and configuration of the element might need to be updated. "Dormant" indicates that the element is inactive or
	 * quiesced. "Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in
	 * error. An example is a network service or endpoint that cannot function due to lower-layer networking problems. "Completed" indicates that the
	 * element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can tell if the complete
	 * operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not
	 * complete OK or did not report an error). "Power Mode" indicates that the element has additional power model information contained in the
	 * Associated PowerManagementService association. OperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent
	 * approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today's environment to
	 * the future. This change was not made earlier because it required the deprecated qualifier. Due to the widespread use of the existing Status
	 * property in management applications, it is strongly recommended that providers or instrumentation provide both the Status and OperationalStatus
	 * properties. Further, the first value of OperationalStatus should contain the primary status for the element. When instrumented, Status (because
	 * it is single-valued) should also provide the primary status of the element.
	 * 
	 * @param short new OperationalStatus property value
	 * @exception Exception
	 */
	public void setOperationalStatus(OperationalStatus operationalStatus) {

		this.operationalStatus = operationalStatus;
	} // setOperationalStatus

	// /**
	// * The following constants are defined for use with the ValueMap/Values qualified property EnabledState.
	// */
	//
	// public enum EnabledState {
	// UNKNOWN,
	// OTHER,
	// ENABLED,
	// DISABLED,
	// SHUTTING_DOWN,
	// NOT_APPLICABLE,
	// ENABLED_BUT_OFFLINE,
	// IN_TEST,
	// DEFERRED,
	// QUIESCE,
	// STARTING,
	// DMTF_RESERVED,
	// VENDOR_RESERVED
	// }
	//
	// EnabledState enabledState;
	//
	// /**
	// * This method returns the ProtocolEndpoint.EnabledState property value. This property is described as follows:
	// *
	// * EnabledState is an integer enumeration that indicates the enabled and disabled states of an element. It can also indicate the transitions
	// * between these requested states. For example, shutting down (value=4) and starting (value=10) are transient states between enabled and
	// disabled.
	// * The following text briefly summarizes the various enabled and disabled states: Enabled (2) indicates that the element is or could be
	// executing
	// * commands, will process any queued commands, and queues new requests. Disabled (3) indicates that the element will not execute commands and
	// will
	// * drop any new requests. Shutting Down (4) indicates that the element is in the process of going to a Disabled state. Not Applicable (5)
	// * indicates the element does not support being enabled or disabled. Enabled but Offline (6) indicates that the element might be completing
	// * commands, and will drop any new requests. Test (7) indicates that the element is in a test state. Deferred (8) indicates that the element
	// might
	// * be completing commands, but will queue any new requests. Quiesce (9) indicates that the element is enabled but in a restricted mode. Starting
	// * (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
	// *
	// * @return short current EnabledState property value
	// * @exception Exception
	// */
	// public EnabledState getEnabledState() {
	//
	// return this.enabledState;
	// } // getEnabledState
	//
	// /**
	// * This method sets the ProtocolEndpoint.EnabledState property value. This property is described as follows:
	// *
	// * EnabledState is an integer enumeration that indicates the enabled and disabled states of an element. It can also indicate the transitions
	// * between these requested states. For example, shutting down (value=4) and starting (value=10) are transient states between enabled and
	// disabled.
	// * The following text briefly summarizes the various enabled and disabled states: Enabled (2) indicates that the element is or could be
	// executing
	// * commands, will process any queued commands, and queues new requests. Disabled (3) indicates that the element will not execute commands and
	// will
	// * drop any new requests. Shutting Down (4) indicates that the element is in the process of going to a Disabled state. Not Applicable (5)
	// * indicates the element does not support being enabled or disabled. Enabled but Offline (6) indicates that the element might be completing
	// * commands, and will drop any new requests. Test (7) indicates that the element is in a test state. Deferred (8) indicates that the element
	// might
	// * be completing commands, but will queue any new requests. Quiesce (9) indicates that the element is enabled but in a restricted mode. Starting
	// * (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
	// *
	// * @param short new EnabledState property value
	// * @exception Exception
	// */
	// public void setEnabledState(EnabledState enabledState) {
	//
	// this.enabledState = enabledState;
	// } // setEnabledState

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property TimeOfLastStateChange.
	 */
	private Date	timeOfLastStateChange;

	/**
	 * This method returns the ProtocolEndpoint.TimeOfLastStateChange property value. This property is described as follows:
	 * 
	 * The date or time when the EnabledState of the element last changed. If the state of the element has not changed and this property is populated,
	 * then it must be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property must not be
	 * updated.
	 * 
	 * @return CIMDateTime current TimeOfLastStateChange property value
	 * @exception Exception
	 */
	public Date getTimeOfLastStateChange() {

		return (Date) timeOfLastStateChange;
	} // getTimeOfLastStateChange

	/**
	 * This method sets the ProtocolEndpoint.TimeOfLastStateChange property value. This property is described as follows:
	 * 
	 * The date or time when the EnabledState of the element last changed. If the state of the element has not changed and this property is populated,
	 * then it must be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property must not be
	 * updated.
	 * 
	 * @param CIMDateTime
	 *            new TimeOfLastStateChange property value
	 * @exception Exception
	 */
	public void setTimeOfLastStateChange(Date timeOfLastStateChange) {

		this.timeOfLastStateChange = timeOfLastStateChange;
	} // setTimeOfLastStateChange

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property Name.
	 */
	private String	name;

	/**
	 * This method returns the ProtocolEndpoint.Name property value. This property is described as follows:
	 * 
	 * A string that identifies this ProtocolEndpoint with either a port or an interface on a device. To ensure uniqueness, the Name property should
	 * be prepended or appended with information from the Type or OtherTypeDescription properties. The method selected is described in the NameFormat
	 * property of this class.
	 * 
	 * @return String current Name property value
	 * @exception Exception
	 */
	public String getName() {

		return (String) name;
	} // getName

	/**
	 * This method sets the ProtocolEndpoint.Name property value. This property is described as follows:
	 * 
	 * A string that identifies this ProtocolEndpoint with either a port or an interface on a device. To ensure uniqueness, the Name property should
	 * be prepended or appended with information from the Type or OtherTypeDescription properties. The method selected is described in the NameFormat
	 * property of this class.
	 * 
	 * @param String
	 *            new Name property value
	 * @exception Exception
	 */
	public void setName(String name) {

		this.name = name;
	} // setName

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property NameFormat.
	 */
	private String	nameFormat;

	/**
	 * This method returns the ProtocolEndpoint.NameFormat property value. This property is described as follows:
	 * 
	 * NameFormat contains the naming heuristic that is selected to ensure that the value of the Name property is unique. For example, you might
	 * choose to prepend the name of the port or interface with the Type of ProtocolEndpoint (for example, IPv4) of this instance followed by an
	 * underscore.
	 * 
	 * @return String current NameFormat property value
	 * @exception Exception
	 */
	public String getNameFormat() {

		return this.nameFormat;
	} // getNameFormat

	/**
	 * This method sets the ProtocolEndpoint.NameFormat property value. This property is described as follows:
	 * 
	 * NameFormat contains the naming heuristic that is selected to ensure that the value of the Name property is unique. For example, you might
	 * choose to prepend the name of the port or interface with the Type of ProtocolEndpoint (for example, IPv4) of this instance followed by an
	 * underscore.
	 * 
	 * @param String
	 *            new NameFormat property value
	 * @exception Exception
	 */
	public void setNameFormat(String nameFormat) {

		this.nameFormat = nameFormat;
	} // setNameFormat

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property ProtocolType.
	 */
	@Deprecated
	public enum ProtocolType {
		UNKNOWN,
		OTHER,
		IPV4,
		IPV6,
		IPX,
		APPLETALK,
		DECNET,
		SNA,
		CONP,
		CLNP,
		VINES,
		XNS,
		ATM,
		FRAME_RELAY,
		ETHERNET,
		TOKENRING,
		FDDI,
		INFINIBAND,
		FIBRE_CHANNEL,
		ISDN_BRI_ENDPOINT,
		ISDN_B_CHANNEL_ENDPOINT,
		ISDN_D_CHANNEL_ENDPOINT,
		IPV4_V6,
		BGP,
		OSPF,
		MPLS,
		UDP,
		TCP
	}

	ProtocolType	protocolType;

	/**
	 * This method returns the ProtocolEndpoint.ProtocolType property value. This property is described as follows:
	 * 
	 * Note: This property is deprecated in lieu of the ProtocolIFType enumeration. This deprecation was done to have better alignment between the
	 * IF-MIB of the IETF and this CIM class. Deprecated description: ProtocolType is an enumeration that provides information to categorize and
	 * classify different instances of this class. For most instances, information in this enumeration and the definition of the subclass overlap.
	 * However, there are several cases where a specific subclass of ProtocolEndpoint is not required (for example, there is no Fibre Channel subclass
	 * of ProtocolEndpoint). Therefore, this property is needed to define the type of Endpoint.
	 * 
	 * @return short current ProtocolType property value
	 * @exception Exception
	 */
	@Deprecated
	public ProtocolType getProtocolType() {

		return this.protocolType;
	} // getProtocolType

	/**
	 * This method sets the ProtocolEndpoint.ProtocolType property value. This property is described as follows:
	 * 
	 * Note: This property is deprecated in lieu of the ProtocolIFType enumeration. This deprecation was done to have better alignment between the
	 * IF-MIB of the IETF and this CIM class. Deprecated description: ProtocolType is an enumeration that provides information to categorize and
	 * classify different instances of this class. For most instances, information in this enumeration and the definition of the subclass overlap.
	 * However, there are several cases where a specific subclass of ProtocolEndpoint is not required (for example, there is no Fibre Channel subclass
	 * of ProtocolEndpoint). Therefore, this property is needed to define the type of Endpoint.
	 * 
	 * @param short new ProtocolType property value
	 * @exception Exception
	 */
	@Deprecated
	public void setProtocolType(ProtocolType protocolType) {

		this.protocolType = protocolType;
	} // setProtocolType

	// /**
	// * The following constants are defined for use with the ValueMap/Values
	// * qualified property ProtocolIFType.
	// */
	//
	// public enum ProtocolIFType{
	// UNKNOWN,
	// OTHER,
	// REGULAR_1822,
	// HDH_1822,
	// DDN_X_25,
	// RFC877_X_25,
	// ETHERNET_CSMA_CD,
	// ISO_802_3_CSMA_CD,
	// ISO_802_4_TOKEN_BUS,
	// ISO_802_5_TOKEN_RING,
	// ISO_802_6_MAN,
	// STARLAN,
	// PROTEON_10MBIT,
	// PROTEON_80MBIT,
	// HYPERCHANNEL,
	// FDDI,
	// LAP_B,
	// SDLC,
	// DS1,
	// E1,
	// BASIC_ISDN,
	// PRIMARY_ISDN,
	// PROPRIETARY_POINT_TO_POINT_SERIAL,
	// PPP,
	// SOFTWARE_LOOPBACK,
	// EON,
	// ETHERNET_3MBIT,
	// NSIP,
	// SLIP,
	// ULTRA,
	// DS3,
	// SIP,
	// FRAME_RELAY,
	// RS_232,
	// PARALLEL,
	// ARCNET,
	// ARCNET_PLUS,
	// ATM,
	// MIO_X_25,
	// SONET,
	// X_25_PLE,
	// ISO_802_211C,
	// LOCALTALK,
	// SMDS_DXI,
	// FRAME_RELAY_SERVICE,
	// V_35,
	// HSSI,
	// HIPPI,
	// MODEM,
	// AAL5,
	// SONET_PATH,
	// SONET_VT,
	// SMDS_ICIP,
	// PROPRIETARY_VIRTUAL_INTERNAL,
	// PROPRIETARY_MULTIPLEXOR,
	// IEEE_802_12,
	// FIBRE_CHANNEL,
	// HIPPI_INTERFACE,
	// FRAME_RELAY_INTERCONNECT,
	// ATM_EMULATED_LAN_FOR_802_3,
	// ATM_EMULATED_LAN_FOR_802_5,
	// ATM_EMULATED_CIRCUIT,
	// FAST_ETHERNET_100BASET,
	// ISDN,
	// V_11,
	// V_36,
	// G703_AT_64K,
	// G703_AT_2MB,
	// QLLC,
	// FAST_ETHERNET_100BASEFX,
	// CHANNEL,
	// IEEE_802_11,
	// IBM_260_370_OEMI_CHANNEL,
	// ESCON,
	// DATA_LINK_SWITCHING,
	// ISDN_S_T_INTERFACE,
	// ISDN_U_INTERFACE,
	// LAP_D,
	// IP_SWITCH,
	// REMOTE_SOURCE_ROUTE_BRIDGING,
	// ATM_LOGICAL,
	// DS0,
	// DS0_BUNDLE,
	// BSC,
	// ASYNC,
	// COMBAT_NET_RADIO,
	// ISO_802_5R_DTR,
	// EXT_POS_LOC_REPORT_SYSTEM,
	// APPLETALK_REMOTE_ACCESS_PROTOCOL,
	// PROPRIETARY_CONNECTIONLESS,
	// ITU_X_29_HOST_PAD,
	// ITU_X_3_TERMINAL_PAD,
	// FRAME_RELAY_MPI,
	// ITU_X_213,
	// ADSL,
	// RADSL,
	// SDSL,
	// VDSL,
	// ISO_802_5_CRFP,
	// MYRINET,
	// VOICE_RECEIVE_AND_TRANSMIT,
	// VOICE_FOREIGN_EXCHANGE_OFFICE,
	// VOICE_FOREIGN_EXCHANGE_SERVICE,
	// VOICE_ENCAPSULATION,
	// VOICE_OVER_IP,
	// ATM_DXI,
	// ATM_FUNI,
	// ATM_IMA,
	// PPP_MULTILINK_BUNDLE,
	// IP_OVER_CDLC,
	// IP_OVER_CLAW,
	// STACK_TO_STACK,
	// VIRTUAL_IP_ADDRESS,
	// MPC,
	// IP_OVER_ATM,
	// ISO_802_5J_FIBRE_TOKEN_RING,
	// TDLC,
	// GIGABIT_ETHERNET,
	// HDLC,
	// LAP_F,
	// V_37,
	// X_25_MLP,
	// X_25_HUNT_GROUP,
	// TRANSP_HDLC,
	// INTERLEAVE_CHANNEL,
	// FAST_CHANNEL,
	// IP_FOR_APPN_HPR_IN_IP_NETWORKS,
	// CATV_MAC_LAYER,
	// CATV_DOWNSTREAM,
	// CATV_UPSTREAM,
	// AVALON_12MPP_SWITCH,
	// TUNNEL,
	// COFFEE,
	// CIRCUIT_EMULATION_SERVICE,
	// ATM_SUBINTERFACE,
	// LAYER_2_VLAN_USING_802_1Q,
	// LAYER_3_VLAN_USING_IP,
	// LAYER_3_VLAN_USING_IPX,
	// DIGITAL_POWER_LINE,
	// MULTIMEDIA_MAIL_OVER_IP,
	// DTM,
	// DCN,
	// IP_FORWARDING,
	// MSDSL,
	// IEEE_1394,
	// IF_GSN_HIPPI_6400,
	// DVB_RCC_MAC_LAYER,
	// DVB_RCC_DOWNSTREAM,
	// DVB_RCC_UPSTREAM,
	// ATM_VIRTUAL,
	// MPLS_TUNNEL,
	// SRP,
	// VOICE_OVER_ATM,
	// VOICE_OVER_FRAME_RELAY,
	// ISDL,
	// COMPOSITE_LINK,
	// SS7_SIGNALING_LINK,
	// PROPRIETARY_P2P_WIRELESS,
	// FRAME_FORWARD,
	// RFC1483_MULTIPROTOCOL_OVER_ATM,
	// USB,
	// IEEE_802_3AD_LINK_AGGREGATE,
	// BGP_POLICY_ACCOUNTING,
	// FRF_16_MULTILINK_FR,
	// H_323_GATEKEEPER,
	// H_323_PROXY,
	// MPLS,
	// MULTI_FREQUENCY_SIGNALING_LINK,
	// HDSL_2,
	// S_HDSL,
	// DS1_FACILITY_DATA_LINK,
	// PACKET_OVER_SONET_SDH,
	// DVB_ASI_INPUT,
	// DVB_ASI_OUTPUT,
	// POWER_LINE,
	// NON_FACILITY_ASSOCIATED_SIGNALING,
	// TR008,
	// GR303_RDT,
	// GR303_IDT,
	// ISUP,
	// PROPRIETARY_WIRELESS_MAC_LAYER,
	// PROPRIETARY_WIRELESS_DOWNSTREAM,
	// PROPRIETARY_WIRELESS_UPSTREAM,
	// HIPERLAN_TYPE_2,
	// PROPRIETARY_BROADBAND_WIRELESS_ACCESS_POINT_TO_MULIPOINT,
	// SONET_OVERHEAD_CHANNEL,
	// DIGITAL_WRAPPER_OVERHEAD_CHANNEL,
	// ATM_ADAPTATION_LAYER_2,
	// RADIO_MAC,
	// ATM_RADIO,
	// INTER_MACHINE_TRUNK,
	// MVL_DSL,
	// LONG_READ_DSL,
	// FRAME_RELAY_DLCI_ENDPOINT,
	// ATM_VCI_ENDPOINT,
	// OPTICAL_CHANNEL,
	// OPTICAL_TRANSPORT,
	// PROPRIETARY_ATM,
	// VOICE_OVER_CABLE,
	// INFINIBAND,
	// TE_LINK,
	// Q_2931,
	// VIRTUAL_TRUNK_GROUP,
	// SIP_TRUNK_GROUP,
	// SIP_SIGNALING,
	// CATV_UPSTREAM_CHANNEL,
	// ECONET,
	// FSAN_155MB_PON,
	// FSAN_622MB_PON,
	// TRANSPARENT_BRIDGE,
	// LINE_GROUP,
	// VOICE_E_M_FEATURE_GROUP,
	// VOICE_FGD_EANA,
	// VOICE_DID,
	// MPEG_TRANSPORT,
	// _6TO4,
	// GTP,
	// PARADYNE_ETHERLOOP_1,
	// PARADYNE_ETHERLOOP_2,
	// OPTICAL_CHANNEL_GROUP,
	// HOMEPNA,
	// GFP,
	// CISCOISLVLAN,
	// ACTELISMETALOOP,
	// FCIP,
	// IANA_RESERVED,
	// IPV4,
	// IPV6,
	// IPV4_V6,
	// IPX,
	// DECNET,
	// SNA,
	// CONP,
	// CLNP,
	// VINES,
	// XNS,
	// ISDN_B_CHANNEL_ENDPOINT,
	// ISDN_D_CHANNEL_ENDPOINT,
	// BGP,
	// OSPF,
	// UDP,
	// TCP,
	// _802_11A,
	// _802_11B,
	// _802_11G,
	// _802_11H,
	// NFS,
	// CIFS,
	// DAFS,
	// WEBDAV,
	// HTTP,
	// FTP,
	// NDMP,
	// TELNET,
	// SSH,
	// SM_CLP,
	// SMTP,
	// LDAP,
	// RDP,
	// HTTPS,
	// DMTF_RESERVED,
	// VENDOR_RESERVED
	// }ProtocolIFType protocolIFType;
	// /**
	// * This method returns the ProtocolEndpoint.ProtocolIFType property value.
	// * This property is described as follows:
	// *
	// * ProtocolIFType is an enumeration that is synchronized with the IANA
	// * ifType MIB. The ifType MIB is maintained at the URL,
	// * http://www.iana.org/assignments/ianaiftype-mib. Also, additional
	// * values defined by the DMTF are included. The property is used to
	// * categorize and classify instances of the ProtocolEndpoint class. Note
	// * that if the ProtocolIFType is set to 1 (Other), then the type
	// * information should be provided in the OtherTypeDescription string
	// * property.
	// *
	// * @return short current ProtocolIFType property value
	// * @exception Exception
	// */
	// public ProtocolIFType getProtocolIFType(){
	//
	// return this.protocolIFType;
	// } // getProtocolIFType
	//
	// /**
	// * This method sets the ProtocolEndpoint.ProtocolIFType property value. This property is described as follows:
	// *
	// * ProtocolIFType is an enumeration that is synchronized with the IANA ifType MIB. The ifType MIB is maintained at the URL,
	// * http://www.iana.org/assignments/ianaiftype-mib. Also, additional values defined by the DMTF are included. The property is used to categorize
	// * and classify instances of the ProtocolEndpoint class. Note that if the ProtocolIFType is set to 1 (Other), then the type information should
	// be
	// * provided in the OtherTypeDescription string property.
	// *
	// * @param short new ProtocolIFType property value
	// * @exception Exception
	// */
	// public void setProtocolIFType(ProtocolIFType protocolIFType) {
	//
	// this.protocolIFType = protocolIFType;
	// } // setProtocolIFType

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property OtherTypeDescription.
	 */
	private String	otherTypeDescription;

	/**
	 * This method returns the ProtocolEndpoint.OtherTypeDescription property value. This property is described as follows:
	 * 
	 * A string that describes the type of ProtocolEndpoint when the Type property of this class (or any of its subclasses) is set to 1 (Other). This
	 * property should be set to null when the Type property is any value other than 1.
	 * 
	 * @return String current OtherTypeDescription property value
	 * @exception Exception
	 */
	public String getOtherTypeDescription() {

		return this.otherTypeDescription;
	} // getOtherTypeDescription

	/**
	 * This method sets the ProtocolEndpoint.OtherTypeDescription property value. This property is described as follows:
	 * 
	 * A string that describes the type of ProtocolEndpoint when the Type property of this class (or any of its subclasses) is set to 1 (Other). This
	 * property should be set to null when the Type property is any value other than 1.
	 * 
	 * @param String
	 *            new OtherTypeDescription property value
	 * @exception Exception
	 */
	public void setOtherTypeDescription(String otherTypeDescription) {

		this.otherTypeDescription = otherTypeDescription;
	} // setOtherTypeDescription

} // Class ProtocolEndpoint
