/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 15:29:20 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class FibrePort as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * FibrePortBean Interface. The CIM class FibrePort is described as follows: 
 * 
 * Note: The use of the FibrePort class is deprecated because FibreChannel 
 * Adapter has been deprecated in lieu of FCPort and this class overlaps with 
 * FCPort. The new FCPort class should be used in lieu of both 
 * FibreChannelAdapter and FibrePort. Deprecated description: FibrePort 
 * describes the capabilities and management aspects of a Fibre Channel Port 
 * Device. 
 */
public class FibrePort extends LogicalPort implements Serializable {

    /**
     * This constructor creates a FibrePortBeanImpl Class which implements the 
     * FibrePortBean Interface, and encapsulates the CIM class FibrePort in a 
     * Java Bean. The CIM class FibrePort is described as follows: 
     * 
     * Note: The use of the FibrePort class is deprecated because FibreChannel 
     * Adapter has been deprecated in lieu of FCPort and this class overlaps 
     * with FCPort. The new FCPort class should be used in lieu of both 
     * FibreChannelAdapter and FibrePort. Deprecated description: FibrePort 
     * describes the capabilities and management aspects of a Fibre Channel 
     * Port Device. 
     */
    public FibrePort(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AddressIdentifier. 
     */
    @Deprecated    private int addressIdentifier;
    /**
     * This method returns the FibrePort.AddressIdentifier property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: An address value that is used to identify the source 
     * (S_ID) or destination (D_ID) of a frame. The FC-SW standard includes a 
     * table of special address identifier values and their meanings. Consult 
     * the FC-SW documentation for additional information. 
     * 
     * @return	int	current AddressIdentifier property value
     * @exception	Exception	
     */
    @Deprecated
    public int getAddressIdentifier(){

    return this.addressIdentifier;
    } // getAddressIdentifier

    /**
     * This method sets the FibrePort.AddressIdentifier property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: An address value that is used to identify the source 
     * (S_ID) or destination (D_ID) of a frame. The FC-SW standard includes a 
     * table of special address identifier values and their meanings. Consult 
     * the FC-SW documentation for additional information. 
     * 
     * @param	int	new AddressIdentifier property value
     * @exception	Exception	
     */
    @Deprecated
    public void setAddressIdentifier(int addressIdentifier) {

    this.addressIdentifier = addressIdentifier;
    } // setAddressIdentifier


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SupportedPortTypes. 
     */
    @Deprecated
    public enum SupportedPortTypes{
    UNKNOWN,
    N,
    NL_PRIVATE,
    NL_PUBLIC,
    E,
    F,
    FL,
    B
    }
 public SupportedPortTypes supportedPortTypes;
    /**
     * This method returns the FibrePort.SupportedPortTypes property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: An array that indicates the modes in which the Port can 
     * operate. PortType values describe the role and behavior of the Fibre 
     * Channel entity: "N" = Node Port, "NL" = Node Port supporting FC 
     * arbitrated loop, "E" = Expansion Port connecting fabric elements (for 
     * example, FC switches), "F"=Fabric (element) Port, "FL"=Fabric 
     * (element) Port supporting FC arbitrated loop, and "B"=Bridge Port. 
     * PortTypes are defined in the ANSI X3 standards. A particular mode can 
     * be listed multiple times in the SupportedPortTypes array in order to 
     * define that multiple, unique version levels are supported. Version 
     * information is defined in the PortTypeVersions property. Note, each 
     * entry of the SupportedPortTypes array is related to the entry in 
     * PortTypeVersions that is located at the same index. 
     * 
     * @return	short	current SupportedPortTypes property value
     * @exception	Exception	
     */
    @Deprecated
    public SupportedPortTypes getSupportedPortTypes(){

    return this.supportedPortTypes;
    } // getSupportedPortTypes

    /**
     * This method sets the FibrePort.SupportedPortTypes property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: An array that indicates the modes in which the Port can 
     * operate. PortType values describe the role and behavior of the Fibre 
     * Channel entity: "N" = Node Port, "NL" = Node Port supporting FC 
     * arbitrated loop, "E" = Expansion Port connecting fabric elements (for 
     * example, FC switches), "F"=Fabric (element) Port, "FL"=Fabric 
     * (element) Port supporting FC arbitrated loop, and "B"=Bridge Port. 
     * PortTypes are defined in the ANSI X3 standards. A particular mode can 
     * be listed multiple times in the SupportedPortTypes array in order to 
     * define that multiple, unique version levels are supported. Version 
     * information is defined in the PortTypeVersions property. Note, each 
     * entry of the SupportedPortTypes array is related to the entry in 
     * PortTypeVersions that is located at the same index. 
     * 
     * @param	short	new SupportedPortTypes property value
     * @exception	Exception	
     */
    @Deprecated
    public void setSupportedPortTypes(SupportedPortTypes 
	supportedPortTypes){

    this.supportedPortTypes = supportedPortTypes;
    } // setSupportedPortTypes


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PortTypeVersions. 
     */
    @Deprecated    private String[] portTypeVersions;
    /**
     * This method returns the FibrePort.PortTypeVersions property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Version information for each of the SupportedPortTypes. A 
     * particular PortType (mode) can be listed multiple times in the 
     * SupportedPortTypes array in order to define multiple, unique version 
     * levels. Note, each entry of this array is related to the entry in 
     * SupportedPortTypes that is located at the same index. 
     * 
     * @return	String[]	current PortTypeVersions property value
     * @exception	Exception	
     */
    @Deprecated
    public String[] getPortTypeVersions(){

    return this.portTypeVersions;
    } // getPortTypeVersions

    /**
     * This method sets the FibrePort.PortTypeVersions property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Version information for each of the SupportedPortTypes. A 
     * particular PortType (mode) can be listed multiple times in the 
     * SupportedPortTypes array in order to define multiple, unique version 
     * levels. Note, each entry of this array is related to the entry in 
     * SupportedPortTypes that is located at the same index. 
     * 
     * @param	String[]	new PortTypeVersions property value
     * @exception	Exception	
     */
    @Deprecated
    public void setPortTypeVersions(String[] portTypeVersions) {

    this.portTypeVersions = portTypeVersions;
    } // setPortTypeVersions


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property EnabledPortTypes. 
     */
    @Deprecated
    public enum EnabledPortTypes{
    UNKNOWN,
    N,
    NL_PRIVATE,
    NL_PUBLIC,
    E,
    F,
    FL,
    B
    }
 public EnabledPortTypes enabledPortTypes;
    /**
     * This method returns the FibrePort.EnabledPortTypes property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The specific modes currently enabled for the Port. The 
     * values are equal to, or a subset of the values in the Supported 
     * PortTypes array. 
     * 
     * @return	short	current EnabledPortTypes property value
     * @exception	Exception	
     */
    @Deprecated
    public EnabledPortTypes getEnabledPortTypes(){

    return this.enabledPortTypes;
    } // getEnabledPortTypes

    /**
     * This method sets the FibrePort.EnabledPortTypes property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The specific modes currently enabled for the Port. The 
     * values are equal to, or a subset of the values in the Supported 
     * PortTypes array. 
     * 
     * @param	short	new EnabledPortTypes property value
     * @exception	Exception	
     */
    @Deprecated
    public void setEnabledPortTypes(EnabledPortTypes enabledPortTypes){

    this.enabledPortTypes = enabledPortTypes;
    } // setEnabledPortTypes


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property EnabledVersions. 
     */
    @Deprecated    private String[] enabledVersions;
    /**
     * This method returns the FibrePort.EnabledVersions property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Version information for each of the EnabledPortTypes. A 
     * particular PortType (mode) might be listed multiple times in the 
     * EnabledPortTypes array in order to define multiple, unique version 
     * levels. Note, each entry of this array is related to the entry in 
     * EnabledPortTypes that is located at the same index. 
     * 
     * @return	String[]	current EnabledVersions property value
     * @exception	Exception	
     */
    @Deprecated
    public String[] getEnabledVersions(){

    return this.enabledVersions;
    } // getEnabledVersions

    /**
     * This method sets the FibrePort.EnabledVersions property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Version information for each of the EnabledPortTypes. A 
     * particular PortType (mode) might be listed multiple times in the 
     * EnabledPortTypes array in order to define multiple, unique version 
     * levels. Note, each entry of this array is related to the entry in 
     * EnabledPortTypes that is located at the same index. 
     * 
     * @param	String[]	new EnabledVersions property value
     * @exception	Exception	
     */
    @Deprecated
    public void setEnabledVersions(String[] enabledVersions) {

    this.enabledVersions = enabledVersions;
    } // setEnabledVersions


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CurrentPortType. 
     */
    @Deprecated
    public enum CurrentPortType{
    UNKNOWN,
    N,
    NL_PRIVATE,
    NL_PUBLIC,
    E,
    F,
    FL,
    B
    }
 public CurrentPortType currentPortType;
    /**
     * This method returns the FibrePort.CurrentPortType property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The specific mode in which the Port is currently running. 
     * The value is one of the entries in the EnabledPortTypes array. The 
     * current port type or mode is dependent on the fibre technology. For 
     * example, in a public loop network, you might indicate a port type of 
     * "FL" (value=6) or "NL" (value=2). 
     * 
     * @return	short	current CurrentPortType property value
     * @exception	Exception	
     */
    @Deprecated
    public CurrentPortType getCurrentPortType(){

    return this.currentPortType;
    } // getCurrentPortType

    /**
     * This method sets the FibrePort.CurrentPortType property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The specific mode in which the Port is currently running. 
     * The value is one of the entries in the EnabledPortTypes array. The 
     * current port type or mode is dependent on the fibre technology. For 
     * example, in a public loop network, you might indicate a port type of 
     * "FL" (value=6) or "NL" (value=2). 
     * 
     * @param	short	new CurrentPortType property value
     * @exception	Exception	
     */
    @Deprecated
    public void setCurrentPortType(CurrentPortType currentPortType){

    this.currentPortType = currentPortType;
    } // setCurrentPortType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CurrentVersion. 
     */
    @Deprecated    private String currentVersion;
    /**
     * This method returns the FibrePort.CurrentVersion property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Version information for the CurrentPortType that is 
     * active. 
     * 
     * @return	String	current CurrentVersion property value
     * @exception	Exception	
     */
    @Deprecated
    public String getCurrentVersion(){

    return this.currentVersion;
    } // getCurrentVersion

    /**
     * This method sets the FibrePort.CurrentVersion property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Version information for the CurrentPortType that is 
     * active. 
     * 
     * @param	String	new CurrentVersion property value
     * @exception	Exception	
     */
    @Deprecated
    public void setCurrentVersion(String currentVersion) {

    this.currentVersion = currentVersion;
    } // setCurrentVersion


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AliasAddresses. 
     */
    @Deprecated    private int[] aliasAddresses;
    /**
     * This method returns the FibrePort.AliasAddresses property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: One or more address identifiers that can be recognized by 
     * the Port, in addition to its port-specific identifier. Multicast or 
     * hunt group addresses that are recognized by the Port would be 
     * identified in this array. 
     * 
     * @return	int[]	current AliasAddresses property value
     * @exception	Exception	
     */
    @Deprecated
    public int[] getAliasAddresses(){

    return this.aliasAddresses;
    } // getAliasAddresses

    /**
     * This method sets the FibrePort.AliasAddresses property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: One or more address identifiers that can be recognized by 
     * the Port, in addition to its port-specific identifier. Multicast or 
     * hunt group addresses that are recognized by the Port would be 
     * identified in this array. 
     * 
     * @param	int[]	new AliasAddresses property value
     * @exception	Exception	
     */
    @Deprecated
    public void setAliasAddresses(int[] aliasAddresses) {

    this.aliasAddresses = aliasAddresses;
    } // setAliasAddresses


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property LossOfSignalCounter. 
     */
    @Deprecated    private long lossOfSignalCounter;
    /**
     * This method returns the FibrePort.LossOfSignalCounter property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Number of times that the signal has been lost on the Port 
     * since the last reset of the Device. 
     * 
     * @return	long	current LossOfSignalCounter property value
     * @exception	Exception	
     */
    @Deprecated
    public long getLossOfSignalCounter(){

    return this.lossOfSignalCounter;
    } // getLossOfSignalCounter

    /**
     * This method sets the FibrePort.LossOfSignalCounter property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Number of times that the signal has been lost on the Port 
     * since the last reset of the Device. 
     * 
     * @param	long	new LossOfSignalCounter property value
     * @exception	Exception	
     */
    @Deprecated
    public void setLossOfSignalCounter(long lossOfSignalCounter) {

    this.lossOfSignalCounter = lossOfSignalCounter;
    } // setLossOfSignalCounter


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property LossOfSyncCounter. 
     */
    @Deprecated    private long lossOfSyncCounter;
    /**
     * This method returns the FibrePort.LossOfSyncCounter property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Number of times that synchronization has been lost on the 
     * Port since the last reset of the Device. Synchronization is assumed 
     * lost after a timeout period that is identified by the Receiver 
     * TransmitterTimeout property. 
     * 
     * @return	long	current LossOfSyncCounter property value
     * @exception	Exception	
     */
    @Deprecated
    public long getLossOfSyncCounter(){

    return this.lossOfSyncCounter;
    } // getLossOfSyncCounter

    /**
     * This method sets the FibrePort.LossOfSyncCounter property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Number of times that synchronization has been lost on the 
     * Port since the last reset of the Device. Synchronization is assumed 
     * lost after a timeout period that is identified by the Receiver 
     * TransmitterTimeout property. 
     * 
     * @param	long	new LossOfSyncCounter property value
     * @exception	Exception	
     */
    @Deprecated
    public void setLossOfSyncCounter(long lossOfSyncCounter) {

    this.lossOfSyncCounter = lossOfSyncCounter;
    } // setLossOfSyncCounter


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CRCErrors. 
     */
    @Deprecated    private long cRCErrors;
    /**
     * This method returns the FibrePort.CRCErrors property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Number of times that the CRC in a frame does not match 
     * the CRC computed by the receiver. 
     * 
     * @return	long	current CRCErrors property value
     * @exception	Exception	
     */
    @Deprecated
    public long getCRCErrors(){

    return this.cRCErrors;
    } // getCRCErrors

    /**
     * This method sets the FibrePort.CRCErrors property value. This property 
     * is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Number of times that the CRC in a frame does not match 
     * the CRC computed by the receiver. 
     * 
     * @param	long	new CRCErrors property value
     * @exception	Exception	
     */
    @Deprecated
    public void setCRCErrors(long cRCErrors) {

    this.cRCErrors = cRCErrors;
    } // setCRCErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property InvalidTransmissionWords. 
     */
    @Deprecated    private long invalidTransmissionWords;
    /**
     * This method returns the FibrePort.InvalidTransmissionWords property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of transmission words that had an 8b10b code 
     * violation in one or more of its characters, had a K28.5 in its second, 
     * third, or fourth character positions, or was an ordered set that had 
     * an incorrect Beginning Running Disparity. 
     * 
     * @return	long	current InvalidTransmissionWords property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public long getInvalidTransmissionWords(){

    return this.invalidTransmissionWords;
    } // getInvalidTransmissionWords

    /**
     * This method sets the FibrePort.InvalidTransmissionWords property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of transmission words that had an 8b10b code 
     * violation in one or more of its characters, had a K28.5 in its second, 
     * third, or fourth character positions, or was an ordered set that had 
     * an incorrect Beginning Running Disparity. 
     * 
     * @param	long	new InvalidTransmissionWords property value
     * @exception	Exception	
     */
    @Deprecated
    public void setInvalidTransmissionWords(long invalidTransmissionWords) {

    this.invalidTransmissionWords = invalidTransmissionWords;
    } // setInvalidTransmissionWords


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property FramesTooShort. 
     */
    @Deprecated    private long framesTooShort;
    /**
     * This method returns the FibrePort.FramesTooShort property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of frames that were received that were shorter 
     * than 28 octets. The value of 28 is calculated based on an assumption 
     * of 24 header bytes plus 4 CRC bytes. The count does not include 
     * SOF/EOF bytes that are not data. 
     * 
     * @return	long	current FramesTooShort property value
     * @exception	Exception	
     */
    @Deprecated
    public long getFramesTooShort(){

    return this.framesTooShort;
    } // getFramesTooShort

    /**
     * This method sets the FibrePort.FramesTooShort property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of frames that were received that were shorter 
     * than 28 octets. The value of 28 is calculated based on an assumption 
     * of 24 header bytes plus 4 CRC bytes. The count does not include 
     * SOF/EOF bytes that are not data. 
     * 
     * @param	long	new FramesTooShort property value
     * @exception	Exception	
     */
    @Deprecated
    public void setFramesTooShort(long framesTooShort) {

    this.framesTooShort = framesTooShort;
    } // setFramesTooShort


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property FramesTooLong. 
     */
    @Deprecated    private long framesTooLong;
    /**
     * This method returns the FibrePort.FramesTooLong property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of frames that were received that were longer 
     * than 2140 octets. The value of 2140 is calculated based on an 
     * assumption of 24 header bytes plus 4 CRC bytes and 2112 bytes of 
     * payload. 
     * 
     * @return	long	current FramesTooLong property value
     * @exception	Exception	
     */
    @Deprecated
    public long getFramesTooLong(){

    return this.framesTooLong;
    } // getFramesTooLong

    /**
     * This method sets the FibrePort.FramesTooLong property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of frames that were received that were longer 
     * than 2140 octets. The value of 2140 is calculated based on an 
     * assumption of 24 header bytes plus 4 CRC bytes and 2112 bytes of 
     * payload. 
     * 
     * @param	long	new FramesTooLong property value
     * @exception	Exception	
     */
    @Deprecated
    public void setFramesTooLong(long framesTooLong) {

    this.framesTooLong = framesTooLong;
    } // setFramesTooLong


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ElasticityBufferUnderruns. 
     */
    @Deprecated    private long elasticityBufferUnderruns;
    /**
     * This method returns the FibrePort.ElasticityBufferUnderruns property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of times that a fill word could not be 
     * inserted, when required. The Elasticity Buffer is defined in FC-AL. 
     * This event might cause data corruption and might indicate a 
     * configuration error or that a device is out of spec. 
     * 
     * @return	long	current ElasticityBufferUnderruns property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public long getElasticityBufferUnderruns(){

    return this.elasticityBufferUnderruns;
    } // getElasticityBufferUnderruns

    /**
     * This method sets the FibrePort.ElasticityBufferUnderruns property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of times that a fill word could not be 
     * inserted, when required. The Elasticity Buffer is defined in FC-AL. 
     * This event might cause data corruption and might indicate a 
     * configuration error or that a device is out of spec. 
     * 
     * @param	long	new ElasticityBufferUnderruns property value
     * @exception	Exception	
     */
    @Deprecated
    public void setElasticityBufferUnderruns(long elasticityBufferUnderruns) 
	{

    this.elasticityBufferUnderruns = elasticityBufferUnderruns;
    } // setElasticityBufferUnderruns


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ElasticityBufferOverruns. 
     */
    @Deprecated    private long elasticityBufferOverruns;
    /**
     * This method returns the FibrePort.ElasticityBufferOverruns property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of times that a fill word could not be 
     * deleted, when required. The Elasticity Buffer is defined in FC-AL. 
     * This event might cause data corruption and might indicate a 
     * configuration error or a device out of spec. 
     * 
     * @return	long	current ElasticityBufferOverruns property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public long getElasticityBufferOverruns(){

    return this.elasticityBufferOverruns;
    } // getElasticityBufferOverruns

    /**
     * This method sets the FibrePort.ElasticityBufferOverruns property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of times that a fill word could not be 
     * deleted, when required. The Elasticity Buffer is defined in FC-AL. 
     * This event might cause data corruption and might indicate a 
     * configuration error or a device out of spec. 
     * 
     * @param	long	new ElasticityBufferOverruns property value
     * @exception	Exception	
     */
    @Deprecated
    public void setElasticityBufferOverruns(long elasticityBufferOverruns) {

    this.elasticityBufferOverruns = elasticityBufferOverruns;
    } // setElasticityBufferOverruns


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ReceiverTransmitterTimeout. 
     */
    @Deprecated    private long receiverTransmitterTimeout;
    /**
     * This method returns the FibrePort.ReceiverTransmitterTimeout property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Timeout value in milliseconds that is used to determine 
     * when loss of synchronization has occurred. The typical default is 100 
     * msec. 
     * 
     * @return	long	current ReceiverTransmitterTimeout property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public long getReceiverTransmitterTimeout(){

    return this.receiverTransmitterTimeout;
    } // getReceiverTransmitterTimeout

    /**
     * This method sets the FibrePort.ReceiverTransmitterTimeout property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Timeout value in milliseconds that is used to determine 
     * when loss of synchronization has occurred. The typical default is 100 
     * msec. 
     * 
     * @param	long	new ReceiverTransmitterTimeout property value
     * @exception	Exception	
     */
    @Deprecated
    public void setReceiverTransmitterTimeout(long receiverTransmitterTimeout) 
	{

    this.receiverTransmitterTimeout = receiverTransmitterTimeout;
    } // setReceiverTransmitterTimeout


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property BypassedState. 
     */
    @Deprecated
    public enum BypassedState{
    UNKNOWN,
    NOT_BYPASSED,
    BYPASSED,
    FORCED_INSERT
    }
 public BypassedState bypassedState;
    /**
     * This method returns the FibrePort.BypassedState property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Indication of whether the Port is currently bypassed 
     * (value=2) or not (value=1). A value of 3 ("Forced Insert") describes 
     * that the Port is forced active, when it would otherwise be "Bypassed". 
     * 
     * @return	short	current BypassedState property value
     * @exception	Exception	
     */
    @Deprecated
    public BypassedState getBypassedState(){

    return this.bypassedState;
    } // getBypassedState

    /**
     * This method sets the FibrePort.BypassedState property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Indication of whether the Port is currently bypassed 
     * (value=2) or not (value=1). A value of 3 ("Forced Insert") describes 
     * that the Port is forced active, when it would otherwise be "Bypassed". 
     * 
     * @param	short	new BypassedState property value
     * @exception	Exception	
     */
    @Deprecated
    public void setBypassedState(BypassedState bypassedState){

    this.bypassedState = bypassedState;
    } // setBypassedState


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ConnectedMedia. 
     */
    @Deprecated
    public enum ConnectedMedia{
    UNKNOWN,
    OTHER,
    NO_MEDIA,
    COPPER_TWINAXIAL,
    FIBER_OPTIC,
    FIBER_SINGLE_MODE,
    FIBER_MULTIMODE
    }
 public ConnectedMedia connectedMedia;
    /**
     * This method returns the FibrePort.ConnectedMedia property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The type of cabling as sensed by the Port. Not all Fibre 
     * Ports are capable of providing this information. In this case, a value 
     * of 0, "Unknown", will be returned. Also, when single or multi-mode 
     * fiber cabling cannot be distinguished, the more general value 4, 
     * "Fiber-optic" can be specified. 
     * 
     * @return	short	current ConnectedMedia property value
     * @exception	Exception	
     */
    @Deprecated
    public ConnectedMedia getConnectedMedia(){

    return this.connectedMedia;
    } // getConnectedMedia

    /**
     * This method sets the FibrePort.ConnectedMedia property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The type of cabling as sensed by the Port. Not all Fibre 
     * Ports are capable of providing this information. In this case, a value 
     * of 0, "Unknown", will be returned. Also, when single or multi-mode 
     * fiber cabling cannot be distinguished, the more general value 4, 
     * "Fiber-optic" can be specified. 
     * 
     * @param	short	new ConnectedMedia property value
     * @exception	Exception	
     */
    @Deprecated
    public void setConnectedMedia(ConnectedMedia connectedMedia){

    this.connectedMedia = connectedMedia;
    } // setConnectedMedia



} // Class FibrePort
