/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 15:29:20 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class SettingContext as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * SettingContextBean Interface. The CIM class SettingContext is described as 
 * follows: 
 * 
 * Note: The Configuration class is being deprecated in lieu of using a 
 * ConcreteComponent relationship to indicate a hierarchy of instances of 
 * Setting or SettingData. Therefore, the aggregation of Settings into 
 * Configurations is replaced by the ConcreteComponent relationship between 
 * instances of Settings and SettingData. Deprecated description: This 
 * relationship associates Configuration objects with Setting objects. For 
 * example, Settings of a NetworkAdapter could change based on the site or 
 * network to which its hosting ComputerSystem is attached. In this case, the 
 * ComputerSystem would have two different Configuration objects, 
 * corresponding to the differences in network configuration for the two 
 * network segments. Configuration A would aggregate a Setting object for the 
 * NetworkAdapter when operating on segment "ANet", whereas Configuration B 
 * would aggregate a different NetworkAdapter Setting object, specific to 
 * segment "BNet". Note that many Settings of the computer are independent of 
 * the network Configuration. For example, both Configurations A and B would 
 * aggregate the same Setting object for the MonitorResolution of the 
 * ComputerSystem. 
 */
public class SettingContext  implements Serializable {

    /**
     * This constructor creates a SettingContextBeanImpl Class which 
     * implements the SettingContextBean Interface, and encapsulates the CIM 
     * class SettingContext in a Java Bean. The CIM class SettingContext is 
     * described as follows: 
     * 
     * Note: The Configuration class is being deprecated in lieu of using a 
     * ConcreteComponent relationship to indicate a hierarchy of instances of 
     * Setting or SettingData. Therefore, the aggregation of Settings into 
     * Configurations is replaced by the ConcreteComponent relationship 
     * between instances of Settings and SettingData. Deprecated description: 
     * This relationship associates Configuration objects with Setting 
     * objects. For example, Settings of a NetworkAdapter could change based 
     * on the site or network to which its hosting ComputerSystem is 
     * attached. In this case, the ComputerSystem would have two different 
     * Configuration objects, corresponding to the differences in network 
     * configuration for the two network segments. Configuration A would 
     * aggregate a Setting object for the NetworkAdapter when operating on 
     * segment "ANet", whereas Configuration B would aggregate a different 
     * NetworkAdapter Setting object, specific to segment "BNet". Note that 
     * many Settings of the computer are independent of the network 
     * Configuration. For example, both Configurations A and B would 
     * aggregate the same Setting object for the MonitorResolution of the 
     * ComputerSystem. 
     */
    public SettingContext(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Context. 
     */
    @Deprecated    private Configuration context;
    /**
     * This method returns the SettingContext.Context property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this element is deprecated. Deprecated description: 
     * The Configuration object that aggregates the Setting. 
     * 
     * @return	CIM_Configuration	current Context property value
     * @exception	Exception	
     */
    @Deprecated
    public Configuration getContext(){

    return this.context;
    } // getContext

    /**
     * This method sets the SettingContext.Context property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this element is deprecated. Deprecated description: 
     * The Configuration object that aggregates the Setting. 
     * 
     * @param	CIM_Configuration	new Context property value
     * @exception	Exception	
     */
    @Deprecated
    public void setContext(Configuration context) {

    this.context = context;
    } // setContext


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Setting. 
     */
    @Deprecated    private Setting setting;
    /**
     * This method returns the SettingContext.Setting property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this element is deprecated. Deprecated description: An 
     * aggregated Setting. 
     * 
     * @return	CIM_Setting	current Setting property value
     * @exception	Exception	
     */
    @Deprecated
    public Setting getSetting(){

    return this.setting;
    } // getSetting

    /**
     * This method sets the SettingContext.Setting property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this element is deprecated. Deprecated description: An 
     * aggregated Setting. 
     * 
     * @param	CIM_Setting	new Setting property value
     * @exception	Exception	
     */
    @Deprecated
    public void setSetting(Setting setting) {

    this.setting = setting;
    } // setSetting



} // Class SettingContext
