/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 15:29:20 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class BufferPool as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * BufferPoolBean Interface. The CIM class BufferPool is described as 
 * follows: 
 * 
 * This class represents the use of buffers by a Queuing Service. The 
 * existence and management of individual buffers will be modeled in a future 
 * release. At the current level of abstraction, modeling the existence of 
 * the BufferPool is necessary. Long term, it is not sufficient. In 
 * implementations where there are multiple buffer sizes, an instance of 
 * BufferPool should be defined for each set of buffers with identical or 
 * similar sizes. These instances of buffer pools can then be grouped 
 * together using the CollectedBuffersPool association. Note that this class 
 * is derived from CollectionOfMSEs, and not from Forwarding or 
 * ConditioningService. BufferPool is only a collection of storage, and is 
 * NOT a Service. 
 */
public class BufferPool extends CollectionOfMSEs implements Serializable {

    /**
     * This constructor creates a BufferPoolBeanImpl Class which implements 
     * the BufferPoolBean Interface, and encapsulates the CIM class 
     * BufferPool in a Java Bean. The CIM class BufferPool is described as 
     * follows: 
     * 
     * This class represents the use of buffers by a Queuing Service. The 
     * existence and management of individual buffers will be modeled in a 
     * future release. At the current level of abstraction, modeling the 
     * existence of the BufferPool is necessary. Long term, it is not 
     * sufficient. In implementations where there are multiple buffer sizes, 
     * an instance of BufferPool should be defined for each set of buffers 
     * with identical or similar sizes. These instances of buffer pools can 
     * then be grouped together using the CollectedBuffersPool association. 
     * Note that this class is derived from CollectionOfMSEs, and not from 
     * Forwarding or ConditioningService. BufferPool is only a collection of 
     * storage, and is NOT a Service. 
     */
    public BufferPool(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CollectionID. 
     */
    private String collectionID;
    /**
     * This method returns the BufferPool.CollectionID property value. This 
     * property is described as follows: 
     * 
     * This property is defined in the CollectionOfMSEs class, but is 
     * overridden here to serve as part of the (composite) key that 
     * identifies the BufferPool instance. 
     * 
     * @return	String	current CollectionID property value
     * @exception	Exception	
     */
    public String getCollectionID(){

    return (String)collectionID;
    } // getCollectionID

    /**
     * This method sets the BufferPool.CollectionID property value. This 
     * property is described as follows: 
     * 
     * This property is defined in the CollectionOfMSEs class, but is 
     * overridden here to serve as part of the (composite) key that 
     * identifies the BufferPool instance. 
     * 
     * @param	String	new CollectionID property value
     * @exception	Exception	
     */
    public void setCollectionID(String collectionID) {

    this.collectionID = collectionID;
    } // setCollectionID


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CreationClassName. 
     */
    private String creationClassName;
    /**
     * This method returns the BufferPool.CreationClassName property value. 
     * This property is described as follows: 
     * 
     * CreationClassName indicates the name of the class or the subclass used 
     * in the creation of an instance. When used with the other key 
     * properties of this class, this property allows all instances of this 
     * class and its subclasses to be uniquely identified. 
     * 
     * @return	String	current CreationClassName property value
     * @exception	Exception	
     */
    public String getCreationClassName(){

    return this.creationClassName;
    } // getCreationClassName

    /**
     * This method sets the BufferPool.CreationClassName property value. This 
     * property is described as follows: 
     * 
     * CreationClassName indicates the name of the class or the subclass used 
     * in the creation of an instance. When used with the other key 
     * properties of this class, this property allows all instances of this 
     * class and its subclasses to be uniquely identified. 
     * 
     * @param	String	new CreationClassName property value
     * @exception	Exception	
     */
    public void setCreationClassName(String creationClassName) {

    this.creationClassName = creationClassName;
    } // setCreationClassName


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Name. 
     */
    private String name;
    /**
     * This method returns the BufferPool.Name property value. This property 
     * is described as follows: 
     * 
     * The Name property defines the label by which the object is known.
     * 
     * @return	String	current Name property value
     * @exception	Exception	
     */
    public String getName(){

    return this.name;
    } // getName

    /**
     * This method sets the BufferPool.Name property value. This property is 
     * described as follows: 
     * 
     * The Name property defines the label by which the object is known.
     * 
     * @param	String	new Name property value
     * @exception	Exception	
     */
    public void setName(String name) {

    this.name = name;
    } // setName


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property BufferSize. 
     */
    @Deprecated    private short bufferSize;
    /**
     * This method returns the BufferPool.BufferSize property value. This 
     * property is described as follows: 
     * 
     * This property is a 16-bit unsigned integer, and defines the number of 
     * bytes in each buffer. It is deprecated in lieu of a similar uint32 
     * property. 
     * 
     * @return	short	current BufferSize property value
     * @exception	Exception	
     */
    @Deprecated
    public short getBufferSize(){

    return this.bufferSize;
    } // getBufferSize

    /**
     * This method sets the BufferPool.BufferSize property value. This 
     * property is described as follows: 
     * 
     * This property is a 16-bit unsigned integer, and defines the number of 
     * bytes in each buffer. It is deprecated in lieu of a similar uint32 
     * property. 
     * 
     * @param	short	new BufferSize property value
     * @exception	Exception	
     */
    @Deprecated
    public void setBufferSize(short bufferSize) {

    this.bufferSize = bufferSize;
    } // setBufferSize


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SizeOfBuffers. 
     */
    private int sizeOfBuffers;
    /**
     * This method returns the BufferPool.SizeOfBuffers property value. This 
     * property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer, and defines the number of 
     * bytes in each buffer. 
     * 
     * @return	int	current SizeOfBuffers property value
     * @exception	Exception	
     */
    public int getSizeOfBuffers(){

    return this.sizeOfBuffers;
    } // getSizeOfBuffers

    /**
     * This method sets the BufferPool.SizeOfBuffers property value. This 
     * property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer, and defines the number of 
     * bytes in each buffer. 
     * 
     * @param	int	new SizeOfBuffers property value
     * @exception	Exception	
     */
    public void setSizeOfBuffers(int sizeOfBuffers) {

    this.sizeOfBuffers = sizeOfBuffers;
    } // setSizeOfBuffers


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property TotalBuffers. 
     */
    private int totalBuffers;
    /**
     * This method returns the BufferPool.TotalBuffers property value. This 
     * property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer, and defines the total 
     * number of buffers in the Pool. 
     * 
     * @return	int	current TotalBuffers property value
     * @exception	Exception	
     */
    public int getTotalBuffers(){

    return this.totalBuffers;
    } // getTotalBuffers

    /**
     * This method sets the BufferPool.TotalBuffers property value. This 
     * property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer, and defines the total 
     * number of buffers in the Pool. 
     * 
     * @param	int	new TotalBuffers property value
     * @exception	Exception	
     */
    public void setTotalBuffers(int totalBuffers) {

    this.totalBuffers = totalBuffers;
    } // setTotalBuffers


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AvailableBuffers. 
     */
    private int availableBuffers;
    /**
     * This method returns the BufferPool.AvailableBuffers property value. 
     * This property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer, and defines the number of 
     * buffers in the Pool that are currently not allocated to any instance 
     * of a QueuingService. Buffers allocated to a QueuingService could 
     * either be in use (containing packet data), or allocated to a Queue 
     * pending the arrival of new packet data. 
     * 
     * @return	int	current AvailableBuffers property value
     * @exception	Exception	
     */
    public int getAvailableBuffers(){

    return this.availableBuffers;
    } // getAvailableBuffers

    /**
     * This method sets the BufferPool.AvailableBuffers property value. This 
     * property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer, and defines the number of 
     * buffers in the Pool that are currently not allocated to any instance 
     * of a QueuingService. Buffers allocated to a QueuingService could 
     * either be in use (containing packet data), or allocated to a Queue 
     * pending the arrival of new packet data. 
     * 
     * @param	int	new AvailableBuffers property value
     * @exception	Exception	
     */
    public void setAvailableBuffers(int availableBuffers) {

    this.availableBuffers = availableBuffers;
    } // setAvailableBuffers


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SharedBuffers. 
     */
    private int sharedBuffers;
    /**
     * This method returns the BufferPool.SharedBuffers property value. This 
     * property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer, and defines the number of 
     * buffers in the Pool that have been simultaneously allocated to 
     * multiple instances of QueuingService. 
     * 
     * @return	int	current SharedBuffers property value
     * @exception	Exception	
     */
    public int getSharedBuffers(){

    return this.sharedBuffers;
    } // getSharedBuffers

    /**
     * This method sets the BufferPool.SharedBuffers property value. This 
     * property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer, and defines the number of 
     * buffers in the Pool that have been simultaneously allocated to 
     * multiple instances of QueuingService. 
     * 
     * @param	int	new SharedBuffers property value
     * @exception	Exception	
     */
    public void setSharedBuffers(int sharedBuffers) {

    this.sharedBuffers = sharedBuffers;
    } // setSharedBuffers



} // Class BufferPool
