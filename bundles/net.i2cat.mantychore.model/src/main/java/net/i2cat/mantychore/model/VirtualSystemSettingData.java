/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 15:29:20 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class VirtualSystemSettingData as well as methods comparable to 
 * the invokeMethods defined for this class. This Class implements the 
 * VirtualSystemSettingDataBean Interface. The CIM class 
 * VirtualSystemSettingData is described as follows: 
 * 
 * CIM_VirtualSystemSettingData defines the virtual aspects of a virtual 
 * system through a set of virtualization specific properties. 
 * CIM_VirtualSystemSettingData is also used as the top level class of 
 * virtual system configurations. Virtual system configurations model 
 * configuration information about virtual systems and their components. A 
 * virtual system configuration consists of one top-level instance of class 
 * CIM_VirtualSystemSettingData that aggregates a number of instances of 
 * class CIM_ResourceAllocationSettingData, using association 
 * CIM_ConcreteComponent. Virtual system configurations may for example be 
 * used to reflect configurations of - virtual systems that are defined at a 
 * virtualization platform, - virtual systems that are currently active, - 
 * input requests to create new virtual systems, - input requests to modify 
 * existing virtual systems, or - snapshots of virtual systems. 
 */
public class VirtualSystemSettingData extends SettingData implements 
    Serializable {

    /**
     * This constructor creates a VirtualSystemSettingDataBeanImpl Class which 
     * implements the VirtualSystemSettingDataBean Interface, and 
     * encapsulates the CIM class VirtualSystemSettingData in a Java Bean. 
     * The CIM class VirtualSystemSettingData is described as follows: 
     * 
     * CIM_VirtualSystemSettingData defines the virtual aspects of a virtual 
     * system through a set of virtualization specific properties. 
     * CIM_VirtualSystemSettingData is also used as the top level class of 
     * virtual system configurations. Virtual system configurations model 
     * configuration information about virtual systems and their components. 
     * A virtual system configuration consists of one top-level instance of 
     * class CIM_VirtualSystemSettingData that aggregates a number of 
     * instances of class CIM_ResourceAllocationSettingData, using 
     * association CIM_ConcreteComponent. Virtual system configurations may 
     * for example be used to reflect configurations of - virtual systems 
     * that are defined at a virtualization platform, - virtual systems that 
     * are currently active, - input requests to create new virtual systems, 
     * - input requests to modify existing virtual systems, or - snapshots of 
     * virtual systems. 
     */
    public VirtualSystemSettingData(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property VirtualSystemIdentifier. 
     */
    private String virtualSystemIdentifier;
    /**
     * This method returns the 
     * VirtualSystemSettingData.VirtualSystemIdentifier property value. This 
     * property is described as follows: 
     * 
     * VirtualSystemIdentifier shall reflect a unique name for the system as 
     * it is used within the virtualization platform. Note that the 
     * VirtualSystemIdentifier is not the hostname assigned to the operating 
     * system instance running within the virtual system, nor is it an IP 
     * address or MAC address assigned to any of its network ports. On create 
     * requests VirtualSystemIdentifier may contain implementation specific 
     * rules (like simple patterns or regular expresssion) that may be 
     * interpreted by the implementation when assigning a 
     * VirtualSystemIdentifier. 
     * 
     * @return	String	current VirtualSystemIdentifier property 
     * value 
     * @exception	Exception	
     */
    public String getVirtualSystemIdentifier(){

    return this.virtualSystemIdentifier;
    } // getVirtualSystemIdentifier

    /**
     * This method sets the VirtualSystemSettingData.VirtualSystemIdentifier 
     * property value. This property is described as follows: 
     * 
     * VirtualSystemIdentifier shall reflect a unique name for the system as 
     * it is used within the virtualization platform. Note that the 
     * VirtualSystemIdentifier is not the hostname assigned to the operating 
     * system instance running within the virtual system, nor is it an IP 
     * address or MAC address assigned to any of its network ports. On create 
     * requests VirtualSystemIdentifier may contain implementation specific 
     * rules (like simple patterns or regular expresssion) that may be 
     * interpreted by the implementation when assigning a 
     * VirtualSystemIdentifier. 
     * 
     * @param	String	new VirtualSystemIdentifier property value
     * @exception	Exception	
     */
    public void setVirtualSystemIdentifier(String virtualSystemIdentifier) {

    this.virtualSystemIdentifier = virtualSystemIdentifier;
    } // setVirtualSystemIdentifier


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property VirtualSystemType. 
     */
    private String virtualSystemType;
    /**
     * This method returns the VirtualSystemSettingData.VirtualSystemType 
     * property value. This property is described as follows: 
     * 
     * VirtualSystemType shall reflect a particular type of virtual system. 
     * The property value shall conform to this format (in ABNF): vs-type = 
     * dmtf-value / other-org-value / legacy-value; dmtf-value = "DMTF:" 
     * defining-org ":" org-vs-type; other-org-value = defining-org ":" 
     * org-vs-type; Where: dmtf-value: is a property value defined by DMTF 
     * and is defined in the description of this property. other-org-value: 
     * is a property value defined by a business entity other than DMTF and 
     * is not defined in the description of this property. legacy-value: is a 
     * property value defined by a business entity other than DMTF and is not 
     * defined in the description of this property. These values are 
     * permitted but recommended to be deprecated over time. defining-org: is 
     * an identifier for the business entity that defines the virtual system 
     * type. It shall include a copyrighted, trademarked, or otherwise unique 
     * name that is owned by that business entity. It shall not be "DMTF" and 
     * shall not contain a colon (:). org-vs-type: is an identifier for the 
     * virtual system type within the defining business entity. It shall be 
     * unique within the defining-org. It may use any character allowed for 
     * CIM strings, except for the following: U0000-U001F (Unicode C0 
     * controls) U0020 (space), note that the reason is that OVF allows for 
     * multiple space-separated vs-type values in this property. U007F 
     * (Unicode C0 controls) U0080-U009F (Unicode C1 controls) If there is a 
     * need to structure the value into segments, the segments should be 
     * separated with a single colon (:). The values of this property shall 
     * be processed case sensitively. They are intended to be processed 
     * programmatically (instead of being a display name) and should be 
     * short. As stated in the class description, instances of this class may 
     * be used for various purposes. A management application intending to 
     * use an instance of this class as input parameter to an operation that 
     * creates or modifies a virtual system should first determine the set of 
     * valid virtual system types that are supported by the virtualization 
     * platform hosting the virtual system by inspecting values of array 
     * property VirtualSystemTypesSupported of the instance of class 
     * CIM_VirtualSystemManagementCapabilities that describes the 
     * capabilities of the virtualization platform. The following DMTF values 
     * are defined: DMTF:unknown - the virtual system type is unknown or 
     * cannot be determined 
     * 
     * @return	String	current VirtualSystemType property value
     * @exception	Exception	
     */
    public String getVirtualSystemType(){

    return this.virtualSystemType;
    } // getVirtualSystemType

    /**
     * This method sets the VirtualSystemSettingData.VirtualSystemType 
     * property value. This property is described as follows: 
     * 
     * VirtualSystemType shall reflect a particular type of virtual system. 
     * The property value shall conform to this format (in ABNF): vs-type = 
     * dmtf-value / other-org-value / legacy-value; dmtf-value = "DMTF:" 
     * defining-org ":" org-vs-type; other-org-value = defining-org ":" 
     * org-vs-type; Where: dmtf-value: is a property value defined by DMTF 
     * and is defined in the description of this property. other-org-value: 
     * is a property value defined by a business entity other than DMTF and 
     * is not defined in the description of this property. legacy-value: is a 
     * property value defined by a business entity other than DMTF and is not 
     * defined in the description of this property. These values are 
     * permitted but recommended to be deprecated over time. defining-org: is 
     * an identifier for the business entity that defines the virtual system 
     * type. It shall include a copyrighted, trademarked, or otherwise unique 
     * name that is owned by that business entity. It shall not be "DMTF" and 
     * shall not contain a colon (:). org-vs-type: is an identifier for the 
     * virtual system type within the defining business entity. It shall be 
     * unique within the defining-org. It may use any character allowed for 
     * CIM strings, except for the following: U0000-U001F (Unicode C0 
     * controls) U0020 (space), note that the reason is that OVF allows for 
     * multiple space-separated vs-type values in this property. U007F 
     * (Unicode C0 controls) U0080-U009F (Unicode C1 controls) If there is a 
     * need to structure the value into segments, the segments should be 
     * separated with a single colon (:). The values of this property shall 
     * be processed case sensitively. They are intended to be processed 
     * programmatically (instead of being a display name) and should be 
     * short. As stated in the class description, instances of this class may 
     * be used for various purposes. A management application intending to 
     * use an instance of this class as input parameter to an operation that 
     * creates or modifies a virtual system should first determine the set of 
     * valid virtual system types that are supported by the virtualization 
     * platform hosting the virtual system by inspecting values of array 
     * property VirtualSystemTypesSupported of the instance of class 
     * CIM_VirtualSystemManagementCapabilities that describes the 
     * capabilities of the virtualization platform. The following DMTF values 
     * are defined: DMTF:unknown - the virtual system type is unknown or 
     * cannot be determined 
     * 
     * @param	String	new VirtualSystemType property value
     * @exception	Exception	
     */
    public void setVirtualSystemType(String virtualSystemType) {

    this.virtualSystemType = virtualSystemType;
    } // setVirtualSystemType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Notes. 
     */
    private String[] notes;
    /**
     * This method returns the VirtualSystemSettingData.Notes property value. 
     * This property is described as follows: 
     * 
     * End-user supplied notes that are related to the virtual system.
     * 
     * @return	String[]	current Notes property value
     * @exception	Exception	
     */
    public String[] getNotes(){

    return this.notes;
    } // getNotes

    /**
     * This method sets the VirtualSystemSettingData.Notes property value. 
     * This property is described as follows: 
     * 
     * End-user supplied notes that are related to the virtual system.
     * 
     * @param	String[]	new Notes property value
     * @exception	Exception	
     */
    public void setNotes(String[] notes) {

    this.notes = notes;
    } // setNotes


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CreationTime. 
     */
    private Date creationTime;
    /**
     * This method returns the VirtualSystemSettingData.CreationTime property 
     * value. This property is described as follows: 
     * 
     * Time when the virtual system configuration was created.
     * 
     * @return	CIMDateTime	current CreationTime property value
     * @exception	Exception	
     */
    public Date getCreationTime(){

    return this.creationTime;
    } // getCreationTime

    /**
     * This method sets the VirtualSystemSettingData.CreationTime property 
     * value. This property is described as follows: 
     * 
     * Time when the virtual system configuration was created.
     * 
     * @param	CIMDateTime	new CreationTime property value
     * @exception	Exception	
     */
    public void setCreationTime(Date creationTime) {

    this.creationTime = creationTime;
    } // setCreationTime


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ConfigurationID. 
     */
    private String configurationID;
    /**
     * This method returns the VirtualSystemSettingData.ConfigurationID 
     * property value. This property is described as follows: 
     * 
     * Unique id of the virtual system configuration. Note that the 
     * ConfigurationID is different from the InstanceID as it is assigned by 
     * the implementation to a virtual system or a virtual system 
     * configuration. It is not a key, and the same value may occur within 
     * more than one instance. 
     * 
     * @return	String	current ConfigurationID property value
     * @exception	Exception	
     */
    public String getConfigurationID(){

    return this.configurationID;
    } // getConfigurationID

    /**
     * This method sets the VirtualSystemSettingData.ConfigurationID property 
     * value. This property is described as follows: 
     * 
     * Unique id of the virtual system configuration. Note that the 
     * ConfigurationID is different from the InstanceID as it is assigned by 
     * the implementation to a virtual system or a virtual system 
     * configuration. It is not a key, and the same value may occur within 
     * more than one instance. 
     * 
     * @param	String	new ConfigurationID property value
     * @exception	Exception	
     */
    public void setConfigurationID(String configurationID) {

    this.configurationID = configurationID;
    } // setConfigurationID


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ConfigurationDataRoot. 
     */
    private String configurationDataRoot;
    /**
     * This method returns the VirtualSystemSettingData.ConfigurationDataRoot 
     * property value. This property is described as follows: 
     * 
     * Filepath of a directory where information about the virtual system 
     * configuration is stored.Format shall be URI based on RFC 2079. 
     * 
     * @return	String	current ConfigurationDataRoot property 
     * value 
     * @exception	Exception	
     */
    public String getConfigurationDataRoot(){

    return this.configurationDataRoot;
    } // getConfigurationDataRoot

    /**
     * This method sets the VirtualSystemSettingData.ConfigurationDataRoot 
     * property value. This property is described as follows: 
     * 
     * Filepath of a directory where information about the virtual system 
     * configuration is stored.Format shall be URI based on RFC 2079. 
     * 
     * @param	String	new ConfigurationDataRoot property value
     * @exception	Exception	
     */
    public void setConfigurationDataRoot(String configurationDataRoot) {

    this.configurationDataRoot = configurationDataRoot;
    } // setConfigurationDataRoot


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ConfigurationFile. 
     */
    private String configurationFile;
    /**
     * This method returns the VirtualSystemSettingData.ConfigurationFile 
     * property value. This property is described as follows: 
     * 
     * Filepath of a file where information about the virtual system 
     * configuration is stored. A relative path appends to the value of the 
     * ConfigurationDataRoot property.Format shall be URI based on RFC 2079. 
     * 
     * @return	String	current ConfigurationFile property value
     * @exception	Exception	
     */
    public String getConfigurationFile(){

    return this.configurationFile;
    } // getConfigurationFile

    /**
     * This method sets the VirtualSystemSettingData.ConfigurationFile 
     * property value. This property is described as follows: 
     * 
     * Filepath of a file where information about the virtual system 
     * configuration is stored. A relative path appends to the value of the 
     * ConfigurationDataRoot property.Format shall be URI based on RFC 2079. 
     * 
     * @param	String	new ConfigurationFile property value
     * @exception	Exception	
     */
    public void setConfigurationFile(String configurationFile) {

    this.configurationFile = configurationFile;
    } // setConfigurationFile


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SnapshotDataRoot. 
     */
    private String snapshotDataRoot;
    /**
     * This method returns the VirtualSystemSettingData.SnapshotDataRoot 
     * property value. This property is described as follows: 
     * 
     * Filepath of a directory where information about virtual system 
     * snapshots is stored. A relative path appends to the value of the 
     * ConfigurationDataRoot property.Format shall be URI based on RFC 2079. 
     * 
     * @return	String	current SnapshotDataRoot property value
     * @exception	Exception	
     */
    public String getSnapshotDataRoot(){

    return this.snapshotDataRoot;
    } // getSnapshotDataRoot

    /**
     * This method sets the VirtualSystemSettingData.SnapshotDataRoot property 
     * value. This property is described as follows: 
     * 
     * Filepath of a directory where information about virtual system 
     * snapshots is stored. A relative path appends to the value of the 
     * ConfigurationDataRoot property.Format shall be URI based on RFC 2079. 
     * 
     * @param	String	new SnapshotDataRoot property value
     * @exception	Exception	
     */
    public void setSnapshotDataRoot(String snapshotDataRoot) {

    this.snapshotDataRoot = snapshotDataRoot;
    } // setSnapshotDataRoot


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SuspendDataRoot. 
     */
    private String suspendDataRoot;
    /**
     * This method returns the VirtualSystemSettingData.SuspendDataRoot 
     * property value. This property is described as follows: 
     * 
     * Filepath of a directory where suspend related information about the 
     * virtual system is stored. A relative path appends to the value of the 
     * ConfigurationDataRoot property.Format shall be URI based on RFC 2079. 
     * 
     * @return	String	current SuspendDataRoot property value
     * @exception	Exception	
     */
    public String getSuspendDataRoot(){

    return this.suspendDataRoot;
    } // getSuspendDataRoot

    /**
     * This method sets the VirtualSystemSettingData.SuspendDataRoot property 
     * value. This property is described as follows: 
     * 
     * Filepath of a directory where suspend related information about the 
     * virtual system is stored. A relative path appends to the value of the 
     * ConfigurationDataRoot property.Format shall be URI based on RFC 2079. 
     * 
     * @param	String	new SuspendDataRoot property value
     * @exception	Exception	
     */
    public void setSuspendDataRoot(String suspendDataRoot) {

    this.suspendDataRoot = suspendDataRoot;
    } // setSuspendDataRoot


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SwapFileDataRoot. 
     */
    private String swapFileDataRoot;
    /**
     * This method returns the VirtualSystemSettingData.SwapFileDataRoot 
     * property value. This property is described as follows: 
     * 
     * Filepath of a directory where swapfiles of the virtual system are 
     * stored. A relative path appends to the value of the 
     * ConfigurationDataRoot property.Format shall be URI based on RFC 2079. 
     * 
     * @return	String	current SwapFileDataRoot property value
     * @exception	Exception	
     */
    public String getSwapFileDataRoot(){

    return this.swapFileDataRoot;
    } // getSwapFileDataRoot

    /**
     * This method sets the VirtualSystemSettingData.SwapFileDataRoot property 
     * value. This property is described as follows: 
     * 
     * Filepath of a directory where swapfiles of the virtual system are 
     * stored. A relative path appends to the value of the 
     * ConfigurationDataRoot property.Format shall be URI based on RFC 2079. 
     * 
     * @param	String	new SwapFileDataRoot property value
     * @exception	Exception	
     */
    public void setSwapFileDataRoot(String swapFileDataRoot) {

    this.swapFileDataRoot = swapFileDataRoot;
    } // setSwapFileDataRoot


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property LogDataRoot. 
     */
    private String logDataRoot;
    /**
     * This method returns the VirtualSystemSettingData.LogDataRoot property 
     * value. This property is described as follows: 
     * 
     * Filepath of a directory where log information about the virtual system 
     * is stored. A relative path appends to the value of the 
     * ConfigurationDataRoot property.Format shall be URI based on RFC 2079. 
     * 
     * @return	String	current LogDataRoot property value
     * @exception	Exception	
     */
    public String getLogDataRoot(){

    return this.logDataRoot;
    } // getLogDataRoot

    /**
     * This method sets the VirtualSystemSettingData.LogDataRoot property 
     * value. This property is described as follows: 
     * 
     * Filepath of a directory where log information about the virtual system 
     * is stored. A relative path appends to the value of the 
     * ConfigurationDataRoot property.Format shall be URI based on RFC 2079. 
     * 
     * @param	String	new LogDataRoot property value
     * @exception	Exception	
     */
    public void setLogDataRoot(String logDataRoot) {

    this.logDataRoot = logDataRoot;
    } // setLogDataRoot


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AutomaticStartupAction. 
     */

    public enum AutomaticStartupAction{
    NONE,
    RESTART_IF_PREVIOUSLY_ACTIVE,
    ALWAYS_STARTUP,
    DMTF_RESERVED
    }
 public AutomaticStartupAction automaticStartupAction;
    /**
     * This method returns the VirtualSystemSettingData.AutomaticStartupAction 
     * property value. This property is described as follows: 
     * 
     * Action to take for the virtual system when the host is started.
     * 
     * @return	short	current AutomaticStartupAction property 
     * value 
     * @exception	Exception	
     */
    public AutomaticStartupAction getAutomaticStartupAction(){

    return this.automaticStartupAction;
    } // getAutomaticStartupAction

    /**
     * This method sets the VirtualSystemSettingData.AutomaticStartupAction 
     * property value. This property is described as follows: 
     * 
     * Action to take for the virtual system when the host is started.
     * 
     * @param	short	new AutomaticStartupAction property value
     * @exception	Exception	
     */
    public void setAutomaticStartupAction(AutomaticStartupAction 
	automaticStartupAction){

    this.automaticStartupAction = automaticStartupAction;
    } // setAutomaticStartupAction


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AutomaticStartupActionDelay. 
     */
    private Date automaticStartupActionDelay;
    /**
     * This method returns the 
     * VirtualSystemSettingData.AutomaticStartupActionDelay property value. 
     * This property is described as follows: 
     * 
     * Delay applicable to startup action. The value shall be in the interval 
     * variant of the datetime datatype. 
     * 
     * @return	CIMDateTime	current AutomaticStartupActionDelay 
     * property value 
     * @exception	Exception	
     */
    public Date getAutomaticStartupActionDelay(){

    return this.automaticStartupActionDelay;
    } // getAutomaticStartupActionDelay

    /**
     * This method sets the 
     * VirtualSystemSettingData.AutomaticStartupActionDelay property value. 
     * This property is described as follows: 
     * 
     * Delay applicable to startup action. The value shall be in the interval 
     * variant of the datetime datatype. 
     * 
     * @param	CIMDateTime	new AutomaticStartupActionDelay 
     * property value 
     * @exception	Exception	
     */
    public void setAutomaticStartupActionDelay(Date 
	automaticStartupActionDelay) {

    this.automaticStartupActionDelay = automaticStartupActionDelay;
    } // setAutomaticStartupActionDelay


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AutomaticStartupActionSequenceNumber. 
     */
    private short automaticStartupActionSequenceNumber;
    /**
     * This method returns the 
     * VirtualSystemSettingData.AutomaticStartupActionSequenceNumber property 
     * value. This property is described as follows: 
     * 
     * Number indicating the relative sequence of virtual system activation 
     * when the host system is started. A lower number indicates earlier 
     * activation. If one or more configurations show the same value, the 
     * sequence is implementation dependent. A value of 0 indicates that the 
     * sequence is implementation dependent. 
     * 
     * @return	short	current 
     * AutomaticStartupActionSequenceNumber property value 
     * @exception	Exception	
     */
    public short getAutomaticStartupActionSequenceNumber(){

    return this.automaticStartupActionSequenceNumber;
    } // getAutomaticStartupActionSequenceNumber

    /**
     * This method sets the 
     * VirtualSystemSettingData.AutomaticStartupActionSequenceNumber property 
     * value. This property is described as follows: 
     * 
     * Number indicating the relative sequence of virtual system activation 
     * when the host system is started. A lower number indicates earlier 
     * activation. If one or more configurations show the same value, the 
     * sequence is implementation dependent. A value of 0 indicates that the 
     * sequence is implementation dependent. 
     * 
     * @param	short	new AutomaticStartupActionSequenceNumber 
     * property value 
     * @exception	Exception	
     */
    public void setAutomaticStartupActionSequenceNumber(short 
	automaticStartupActionSequenceNumber) {

    this.automaticStartupActionSequenceNumber = 
	automaticStartupActionSequenceNumber;
    } // setAutomaticStartupActionSequenceNumber


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AutomaticShutdownAction. 
     */

    public enum AutomaticShutdownAction{
    TURN_OFF,
    SAVE_STATE,
    SHUTDOWN,
    DMTF_RESERVED
    }
 public AutomaticShutdownAction automaticShutdownAction;
    /**
     * This method returns the 
     * VirtualSystemSettingData.AutomaticShutdownAction property value. This 
     * property is described as follows: 
     * 
     * Action to take for the virtual system when the host is shut down.
     * 
     * @return	short	current AutomaticShutdownAction property 
     * value 
     * @exception	Exception	
     */
    public AutomaticShutdownAction getAutomaticShutdownAction(){

    return this.automaticShutdownAction;
    } // getAutomaticShutdownAction

    /**
     * This method sets the VirtualSystemSettingData.AutomaticShutdownAction 
     * property value. This property is described as follows: 
     * 
     * Action to take for the virtual system when the host is shut down.
     * 
     * @param	short	new AutomaticShutdownAction property value
     * @exception	Exception	
     */
    public void setAutomaticShutdownAction(AutomaticShutdownAction 
	automaticShutdownAction){

    this.automaticShutdownAction = automaticShutdownAction;
    } // setAutomaticShutdownAction


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AutomaticRecoveryAction. 
     */

    public enum AutomaticRecoveryAction{
    NONE,
    RESTART,
    REVERT_TO_SNAPSHOT,
    DMTF_RESERVED
    }
 public AutomaticRecoveryAction automaticRecoveryAction;
    /**
     * This method returns the 
     * VirtualSystemSettingData.AutomaticRecoveryAction property value. This 
     * property is described as follows: 
     * 
     * Action to take for the virtual system when the software executed by the 
     * virtual system fails. Failures in this case means a failure that is 
     * detectable by the host platform, such as a non-interuptable wait state 
     * condition. 
     * 
     * @return	short	current AutomaticRecoveryAction property 
     * value 
     * @exception	Exception	
     */
    public AutomaticRecoveryAction getAutomaticRecoveryAction(){

    return this.automaticRecoveryAction;
    } // getAutomaticRecoveryAction

    /**
     * This method sets the VirtualSystemSettingData.AutomaticRecoveryAction 
     * property value. This property is described as follows: 
     * 
     * Action to take for the virtual system when the software executed by the 
     * virtual system fails. Failures in this case means a failure that is 
     * detectable by the host platform, such as a non-interuptable wait state 
     * condition. 
     * 
     * @param	short	new AutomaticRecoveryAction property value
     * @exception	Exception	
     */
    public void setAutomaticRecoveryAction(AutomaticRecoveryAction 
	automaticRecoveryAction){

    this.automaticRecoveryAction = automaticRecoveryAction;
    } // setAutomaticRecoveryAction


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RecoveryFile. 
     */
    private String recoveryFile;
    /**
     * This method returns the VirtualSystemSettingData.RecoveryFile property 
     * value. This property is described as follows: 
     * 
     * Filepath of a file where recovery relateded information of the virtual 
     * system is stored.Format shall be URI based on RFC 2079. 
     * 
     * @return	String	current RecoveryFile property value
     * @exception	Exception	
     */
    public String getRecoveryFile(){

    return this.recoveryFile;
    } // getRecoveryFile

    /**
     * This method sets the VirtualSystemSettingData.RecoveryFile property 
     * value. This property is described as follows: 
     * 
     * Filepath of a file where recovery relateded information of the virtual 
     * system is stored.Format shall be URI based on RFC 2079. 
     * 
     * @param	String	new RecoveryFile property value
     * @exception	Exception	
     */
    public void setRecoveryFile(String recoveryFile) {

    this.recoveryFile = recoveryFile;
    } // setRecoveryFile



} // Class VirtualSystemSettingData
