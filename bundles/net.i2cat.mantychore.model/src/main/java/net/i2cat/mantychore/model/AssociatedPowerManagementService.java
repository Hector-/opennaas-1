/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 03 
 * 14:18:55 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class AssociatedPowerManagementService as well as methods 
 * comparable to the invokeMethods defined for this class. This Class 
 * implements the AssociatedPowerManagementServiceBean Interface. The CIM 
 * class AssociatedPowerManagementService is described as follows: 
 * 
 * The association between a Managed System Element and its power management 
 * service. 
 */
public class AssociatedPowerManagementService extends 
    ServiceAvailableToElement implements Serializable {

    /**
     * This constructor creates a AssociatedPowerManagementServiceBeanImpl 
     * Class which implements the AssociatedPowerManagementServiceBean 
     * Interface, and encapsulates the CIM class 
     * AssociatedPowerManagementService in a Java Bean. The CIM class 
     * AssociatedPowerManagementService is described as follows: 
     * 
     * The association between a Managed System Element and its power 
     * management service. 
     */
    public AssociatedPowerManagementService(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ServiceProvided. 
     */
    private PowerManagementService serviceProvided;
    /**
     * This method returns the 
     * AssociatedPowerManagementService.ServiceProvided property value. This 
     * property is described as follows: 
     * 
     * The Service that is available.
     * 
     * @return	CIM_PowerManagementService	current 
     * ServiceProvided property value 
     * @exception	Exception	
     */
    public PowerManagementService getServiceProvided(){

    return (PowerManagementService)serviceProvided;
    } // getServiceProvided

    /**
     * This method sets the AssociatedPowerManagementService.ServiceProvided 
     * property value. This property is described as follows: 
     * 
     * The Service that is available.
     * 
     * @param	CIM_PowerManagementService	new ServiceProvided 
     * property value 
     * @exception	Exception	
     */
    public void setServiceProvided(PowerManagementService serviceProvided) {

    this.serviceProvided = serviceProvided;
    } // setServiceProvided


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PowerState. 
     */

    public enum PowerState{
    OTHER,
    ON,
    SLEEP_LIGHT,
    SLEEP_DEEP,
    POWER_CYCLE_OFF_SOFT,
    OFF_HARD,
    HIBERNATE_OFF_SOFT,
    OFF_SOFT,
    POWER_CYCLE_OFF_HARD,
    MASTER_BUS_RESET,
    DIAGNOSTIC_INTERRUPT_NMI,
    OFF_SOFT_GRACEFUL,
    OFF_HARD_GRACEFUL,
    MASTER_BUS_RESET_GRACEFUL,
    POWER_CYCLE_OFF_SOFT_GRACEFUL,
    POWER_CYCLE_OFF_HARD_GRACEFUL,
    DIAGNOSTIC_INTERRUPT_INIT,
    DMTF_RESERVED,
    VENDOR_SPECIFIC
    }
 public PowerState powerState;
    /**
     * This method returns the AssociatedPowerManagementService.PowerState 
     * property value. This property is described as follows: 
     * 
     * The current power state of the associated Managed System Element.
     * 
     * @return	short	current PowerState property value
     * @exception	Exception	
     */
    public PowerState getPowerState(){

    return this.powerState;
    } // getPowerState

    /**
     * This method sets the AssociatedPowerManagementService.PowerState 
     * property value. This property is described as follows: 
     * 
     * The current power state of the associated Managed System Element.
     * 
     * @param	short	new PowerState property value
     * @exception	Exception	
     */
    public void setPowerState(PowerState powerState){

    this.powerState = powerState;
    } // setPowerState


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherPowerState. 
     */
    private String otherPowerState;
    /**
     * This method returns the 
     * AssociatedPowerManagementService.OtherPowerState property value. This 
     * property is described as follows: 
     * 
     * A string describing the additional power management state of the 
     * element, used when the PowerState is set to the value 1, "Other". 
     * 
     * @return	String	current OtherPowerState property value
     * @exception	Exception	
     */
    public String getOtherPowerState(){

    return this.otherPowerState;
    } // getOtherPowerState

    /**
     * This method sets the AssociatedPowerManagementService.OtherPowerState 
     * property value. This property is described as follows: 
     * 
     * A string describing the additional power management state of the 
     * element, used when the PowerState is set to the value 1, "Other". 
     * 
     * @param	String	new OtherPowerState property value
     * @exception	Exception	
     */
    public void setOtherPowerState(String otherPowerState) {

    this.otherPowerState = otherPowerState;
    } // setOtherPowerState


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RequestedPowerState. 
     */

    public enum RequestedPowerState{
    UNKNOWN,
    OTHER,
    ON,
    SLEEP_LIGHT,
    SLEEP__DEEP,
    POWER_CYCLE_OFF_SOFT,
    OFF_HARD,
    HIBERNATE_OFF_SOFT,
    OFF_SOFT,
    POWER_CYCLE_OFF_HARD,
    MASTER_BUS_RESET,
    DIAGNOSTIC_INTERRUPT_NMI,
    NOT_APPLICABLE,
    OFF_SOFT_GRACEFUL,
    OFF_HARD_GRACEFUL,
    MASTER_BUS_RESET_GRACEFUL,
    POWER_CYCLE_OFF_SOFT_GRACEFUL,
    POWER_CYCLE_OFF_HARD_GRACEFUL,
    DIAGNOSTIC_INTERRUPT_INIT,
    DMTF_RESERVED,
    VENDOR_SPECIFIC
    }
 public RequestedPowerState requestedPowerState;
    /**
     * This method returns the 
     * AssociatedPowerManagementService.RequestedPowerState property value. 
     * This property is described as follows: 
     * 
     * The desired or the last requested power state of the associated Managed 
     * System Element, irrespective of the mechanism through which the 
     * request was made. If the requested power state is unknown, then the 
     * property shall have the value of 0 ("Unknown"). If the property has no 
     * meaning or is not supported, then the property shall have value 
     * 12("Not Applicable"). 
     * 
     * @return	short	current RequestedPowerState property value
     * @exception	Exception	
     */
    public RequestedPowerState getRequestedPowerState(){

    return this.requestedPowerState;
    } // getRequestedPowerState

    /**
     * This method sets the 
     * AssociatedPowerManagementService.RequestedPowerState property value. 
     * This property is described as follows: 
     * 
     * The desired or the last requested power state of the associated Managed 
     * System Element, irrespective of the mechanism through which the 
     * request was made. If the requested power state is unknown, then the 
     * property shall have the value of 0 ("Unknown"). If the property has no 
     * meaning or is not supported, then the property shall have value 
     * 12("Not Applicable"). 
     * 
     * @param	short	new RequestedPowerState property value
     * @exception	Exception	
     */
    public void setRequestedPowerState(RequestedPowerState 
	requestedPowerState){

    this.requestedPowerState = requestedPowerState;
    } // setRequestedPowerState


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherRequestedPowerState. 
     */
    private String otherRequestedPowerState;
    /**
     * This method returns the 
     * AssociatedPowerManagementService.OtherRequestedPowerState property 
     * value. This property is described as follows: 
     * 
     * A string describing the additional power management state of the 
     * element, used when the RequestedPowerState is set to the value 1, 
     * "Other". 
     * 
     * @return	String	current OtherRequestedPowerState property 
     * value 
     * @exception	Exception	
     */
    public String getOtherRequestedPowerState(){

    return this.otherRequestedPowerState;
    } // getOtherRequestedPowerState

    /**
     * This method sets the 
     * AssociatedPowerManagementService.OtherRequestedPowerState property 
     * value. This property is described as follows: 
     * 
     * A string describing the additional power management state of the 
     * element, used when the RequestedPowerState is set to the value 1, 
     * "Other". 
     * 
     * @param	String	new OtherRequestedPowerState property value
     * @exception	Exception	
     */
    public void setOtherRequestedPowerState(String otherRequestedPowerState) 
	{

    this.otherRequestedPowerState = otherRequestedPowerState;
    } // setOtherRequestedPowerState


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PowerOnTime. 
     */
    private Date powerOnTime;
    /**
     * This method returns the AssociatedPowerManagementService.PowerOnTime 
     * property value. This property is described as follows: 
     * 
     * The time when the element will be powered on again, used when the 
     * RequestedPowerState has the value 2, "On", 5, 
     * "Power Cycle (Off - Soft)" or 6, "Power Cycle (Off - Hard)". 
     * 
     * @return	CIMDateTime	current PowerOnTime property value
     * @exception	Exception	
     */
    public Date getPowerOnTime(){

    return this.powerOnTime;
    } // getPowerOnTime

    /**
     * This method sets the AssociatedPowerManagementService.PowerOnTime 
     * property value. This property is described as follows: 
     * 
     * The time when the element will be powered on again, used when the 
     * RequestedPowerState has the value 2, "On", 5, 
     * "Power Cycle (Off - Soft)" or 6, "Power Cycle (Off - Hard)". 
     * 
     * @param	CIMDateTime	new PowerOnTime property value
     * @exception	Exception	
     */
    public void setPowerOnTime(Date powerOnTime) {

    this.powerOnTime = powerOnTime;
    } // setPowerOnTime


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AvailableRequestedPowerStates. 
     */

    public enum AvailableRequestedPowerStates{
    OTHER,
    ON,
    SLEEP_LIGHT,
    SLEEP_DEEP,
    POWER_CYCLE_OFF_SOFT,
    OFF_HARD,
    HIBERNATE_OFF_SOFT,
    OFF_SOFT,
    POWER_CYCLE_OFF_HARD,
    MASTER_BUS_RESET,
    DIAGNOSTIC_INTERRUPT_NMI,
    OFF_SOFT_GRACEFUL,
    OFF_HARD_GRACEFUL,
    MASTER_BUS_RESET_GRACEFUL,
    POWER_CYCLE_OFF_SOFT_GRACEFUL,
    POWER_CYCLE_OFF_HARD_GRACEFUL,
    DMTF_RESERVED,
    VENDOR_SPECIFIC
    }
 public AvailableRequestedPowerStates availableRequestedPowerStates;
    /**
     * This method returns the 
     * AssociatedPowerManagementService.AvailableRequestedPowerStates 
     * property value. This property is described as follows: 
     * 
     * AvailableRequestedPowerStates indicates the possible values for the 
     * PowerState parameter of the method RequestPowerStateChange, used to 
     * initiate a power state change.The values listed shall be a subset of 
     * the values contained in the RequestedPowerStatesSupported property of 
     * the CIM_PowerManagementCapabilities where the values selected are a 
     * function of the current power state of the system. This property shall 
     * be non-null if an implementation supports the advertisement of the set 
     * of possible values as a function of the current state. This property 
     * shall be null if an implementation does not support the advertisement 
     * of the set of possible values as a function of the current state. The 
     * current values in the enumeration are: 2=On, corresponding to ACPI 
     * state G0 or S0 or D0. 3=Sleep - Light, corresponding to ACPI state G1, 
     * S1/S2, or D1. 4=Sleep - Deep, corresponding to ACPI state G1, S3, or 
     * D2. 5=Power Cycle (Off - Soft), corresponding to ACPI state G2, S5, or 
     * D3, but where the managed element is set to return to power state "On" 
     * at a pre-determined time. 6=Off - Hard, corresponding to ACPI state 
     * G3, S5, or D3. 7=Hibernate (Off - Soft), corresponding to ACPI state 
     * S4, where the state of the managed element is preserved and will be 
     * recovered upon powering on. 8=Off - Soft, corresponding to ACPI state 
     * G2, S5, or D3. 9= Power Cycle (Off-Hard), corresponds to the managed 
     * element reaching the ACPI state G3 followed by ACPI state S0. 
     * 10=Master Bus Reset, corresponds to the system reaching ACPI state S5 
     * followed by ACPI state S0. This is used to represent system master bus 
     * reset. 11=Diagnostic Interrupt (NMI), corresponding to the system 
     * reaching ACPI state S5 followed by ACPI state S0. This is used to 
     * represent system non-maskable interrupt. 12=Off - Soft Graceful, 
     * equivalent to Off Soft but preceded by a request to the managed 
     * element to perform an orderly shutdown. 13=Off - Hard Graceful, 
     * equivalent to Off Hard but preceded by a request to the managed 
     * element to perform an orderly shutdown. 14=Master Bus Rest Graceful, 
     * equivalent to Master Bus Reset but preceded by a request to the 
     * managed element to perform an orderly shutdown. 15=Power Cycle (Off - 
     * Soft Graceful), equivalent to Power Cycle (Off - Soft) but preceded by 
     * a request to the managed element to perform an orderly shutdown. 
     * 16=Power Cycle (Off - Hard Graceful), equivalent to Power Cycle (Off - 
     * Hard) but preceded by a request to the managed element to perform an 
     * orderly shutdown. ..=DMTF Reserved. 0x7FFF..0xFFFF = Vendor Specific. 
     * 
     * @return	short	current AvailableRequestedPowerStates 
     * property value 
     * @exception	Exception	
     */
    public AvailableRequestedPowerStates getAvailableRequestedPowerStates(){

    return this.availableRequestedPowerStates;
    } // getAvailableRequestedPowerStates

    /**
     * This method sets the 
     * AssociatedPowerManagementService.AvailableRequestedPowerStates 
     * property value. This property is described as follows: 
     * 
     * AvailableRequestedPowerStates indicates the possible values for the 
     * PowerState parameter of the method RequestPowerStateChange, used to 
     * initiate a power state change.The values listed shall be a subset of 
     * the values contained in the RequestedPowerStatesSupported property of 
     * the CIM_PowerManagementCapabilities where the values selected are a 
     * function of the current power state of the system. This property shall 
     * be non-null if an implementation supports the advertisement of the set 
     * of possible values as a function of the current state. This property 
     * shall be null if an implementation does not support the advertisement 
     * of the set of possible values as a function of the current state. The 
     * current values in the enumeration are: 2=On, corresponding to ACPI 
     * state G0 or S0 or D0. 3=Sleep - Light, corresponding to ACPI state G1, 
     * S1/S2, or D1. 4=Sleep - Deep, corresponding to ACPI state G1, S3, or 
     * D2. 5=Power Cycle (Off - Soft), corresponding to ACPI state G2, S5, or 
     * D3, but where the managed element is set to return to power state "On" 
     * at a pre-determined time. 6=Off - Hard, corresponding to ACPI state 
     * G3, S5, or D3. 7=Hibernate (Off - Soft), corresponding to ACPI state 
     * S4, where the state of the managed element is preserved and will be 
     * recovered upon powering on. 8=Off - Soft, corresponding to ACPI state 
     * G2, S5, or D3. 9= Power Cycle (Off-Hard), corresponds to the managed 
     * element reaching the ACPI state G3 followed by ACPI state S0. 
     * 10=Master Bus Reset, corresponds to the system reaching ACPI state S5 
     * followed by ACPI state S0. This is used to represent system master bus 
     * reset. 11=Diagnostic Interrupt (NMI), corresponding to the system 
     * reaching ACPI state S5 followed by ACPI state S0. This is used to 
     * represent system non-maskable interrupt. 12=Off - Soft Graceful, 
     * equivalent to Off Soft but preceded by a request to the managed 
     * element to perform an orderly shutdown. 13=Off - Hard Graceful, 
     * equivalent to Off Hard but preceded by a request to the managed 
     * element to perform an orderly shutdown. 14=Master Bus Rest Graceful, 
     * equivalent to Master Bus Reset but preceded by a request to the 
     * managed element to perform an orderly shutdown. 15=Power Cycle (Off - 
     * Soft Graceful), equivalent to Power Cycle (Off - Soft) but preceded by 
     * a request to the managed element to perform an orderly shutdown. 
     * 16=Power Cycle (Off - Hard Graceful), equivalent to Power Cycle (Off - 
     * Hard) but preceded by a request to the managed element to perform an 
     * orderly shutdown. ..=DMTF Reserved. 0x7FFF..0xFFFF = Vendor Specific. 
     * 
     * @param	short	new AvailableRequestedPowerStates property 
     * value 
     * @exception	Exception	
     */
    public void setAvailableRequestedPowerStates(AvailableRequestedPowerStates 
	availableRequestedPowerStates){

    this.availableRequestedPowerStates = availableRequestedPowerStates;
    } // setAvailableRequestedPowerStates


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property TransitioningToPowerState. 
     */

    public enum TransitioningToPowerState{
    OTHER,
    ON,
    SLEEP_LIGHT,
    SLEEP_DEEP,
    POWER_CYCLE_OFF_SOFT,
    OFF_HARD,
    HIBERNATE_OFF_SOFT,
    OFF_SOFT,
    POWER_CYCLE_OFF_HARD,
    MASTER_BUS_RESET,
    DIAGNOSTIC_INTERRUPT_NMI,
    OFF_SOFT_GRACEFUL,
    OFF_HARD_GRACEFUL,
    MASTER_BUS_RESET_GRACEFUL,
    POWER_CYCLE_OFF_SOFT_GRACEFUL,
    POWER_CYCLE_OFF_HARD_GRACEFUL,
    DIAGNOSTIC_INTERRUPT_INIT,
    NOT_APPLICABLE,
    NO_CHANGE,
    DMTF_RESERVED,
    VENDOR_SPECIFIC
    }
 public TransitioningToPowerState transitioningToPowerState;
    /**
     * This method returns the 
     * AssociatedPowerManagementService.TransitioningToPowerState property 
     * value. This property is described as follows: 
     * 
     * TransitioningToPowerState indicates the target power state to which the 
     * system is transitioning. A value of 19 "No Change" shall indicate that 
     * no transition is in progress. A value of 18 "Not Applicable" shall 
     * indicate the implementation does not support representing ongoing 
     * transitions. A value other than 18 or 19 shall identify the power 
     * state to which the element is in the process of transitioning. 
     * 
     * @return	short	current TransitioningToPowerState property 
     * value 
     * @exception	Exception	
     */
    public TransitioningToPowerState getTransitioningToPowerState(){

    return this.transitioningToPowerState;
    } // getTransitioningToPowerState

    /**
     * This method sets the 
     * AssociatedPowerManagementService.TransitioningToPowerState property 
     * value. This property is described as follows: 
     * 
     * TransitioningToPowerState indicates the target power state to which the 
     * system is transitioning. A value of 19 "No Change" shall indicate that 
     * no transition is in progress. A value of 18 "Not Applicable" shall 
     * indicate the implementation does not support representing ongoing 
     * transitions. A value other than 18 or 19 shall identify the power 
     * state to which the element is in the process of transitioning. 
     * 
     * @param	short	new TransitioningToPowerState property value
     * @exception	Exception	
     */
    public void setTransitioningToPowerState(TransitioningToPowerState 
	transitioningToPowerState){

    this.transitioningToPowerState = transitioningToPowerState;
    } // setTransitioningToPowerState



} // Class AssociatedPowerManagementService
