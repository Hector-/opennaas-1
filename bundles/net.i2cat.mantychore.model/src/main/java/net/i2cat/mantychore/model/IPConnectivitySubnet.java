/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class IPConnectivitySubnet as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * IPConnectivitySubnetBean Interface. The CIM class IPConnectivitySubnet is 
 * described as follows: 
 * 
 * An IPConnectivitySubnet represents a group of related IPProtocolEndpoints 
 * that can communicate with each other, as members of a subnet. The class 
 * describes the characteristics of the subnet. 
 */
    @Entity
public class IPConnectivitySubnet extends ConnectivityCollection implements 
    Serializable {

    /**
     * This constructor creates a IPConnectivitySubnetBeanImpl Class which 
     * implements the IPConnectivitySubnetBean Interface, and encapsulates 
     * the CIM class IPConnectivitySubnet in a Java Bean. The CIM class 
     * IPConnectivitySubnet is described as follows: 
     * 
     * An IPConnectivitySubnet represents a group of related 
     * IPProtocolEndpoints that can communicate with each other, as members 
     * of a subnet. The class describes the characteristics of the subnet. 
     */
    public IPConnectivitySubnet(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SubnetNumber. 
     */
    private String subnetNumber;
    /**
     * This method returns the IPConnectivitySubnet.subnetNumber property 
     * value. This property is described as follows: 
     * 
     * The IP address of the entire subnet, formatted according to the 
     * appropriate convention as defined in the AddressType property of this 
     * class. 
     * 
     * @return	String	current subnetNumber property value
     * @exception	Exception	
     */
    public String getsubnetNumber(){

    return this.subnetNumber;
    } // getsubnetNumber

    /**
     * This method sets the IPConnectivitySubnet.subnetNumber property value. 
     * This property is described as follows: 
     * 
     * The IP address of the entire subnet, formatted according to the 
     * appropriate convention as defined in the AddressType property of this 
     * class. 
     * 
     * @param	String	new subnetNumber property value
     * @exception	Exception	
     */
    public void setsubnetNumber(String subnetNumber) {

    this.subnetNumber = subnetNumber;
    } // setsubnetNumber


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SubnetMask. 
     */
    private String subnetMask;
    /**
     * This method returns the IPConnectivitySubnet.subnetMask property value. 
     * This property is described as follows: 
     * 
     * The mask for the starting IPv4 address of the IP subnet, if needed 
     * (i.e., if the AddressType property is 1, "IPv4"). 
     * 
     * @return	String	current subnetMask property value
     * @exception	Exception	
     */
    public String getsubnetMask(){

    return this.subnetMask;
    } // getsubnetMask

    /**
     * This method sets the IPConnectivitySubnet.subnetMask property value. 
     * This property is described as follows: 
     * 
     * The mask for the starting IPv4 address of the IP subnet, if needed 
     * (i.e., if the AddressType property is 1, "IPv4"). 
     * 
     * @param	String	new subnetMask property value
     * @exception	Exception	
     */
    public void setsubnetMask(String subnetMask) {

    this.subnetMask = subnetMask;
    } // setsubnetMask


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PrefixLength. 
     */
    private short prefixLength;
    /**
     * This method returns the IPConnectivitySubnet.prefixLength property 
     * value. This property is described as follows: 
     * 
     * The prefix length for IPv6 addresses in the IP subnet, if needed (i.e., 
     * if the AddressType property is 2, "IPv6"). 
     * 
     * @return	short	current prefixLength property value
     * @exception	Exception	
     */
    public short getprefixLength(){

    return this.prefixLength;
    } // getprefixLength

    /**
     * This method sets the IPConnectivitySubnet.prefixLength property value. 
     * This property is described as follows: 
     * 
     * The prefix length for IPv6 addresses in the IP subnet, if needed (i.e., 
     * if the AddressType property is 2, "IPv6"). 
     * 
     * @param	short	new prefixLength property value
     * @exception	Exception	
     */
    public void setprefixLength(short prefixLength) {

    this.prefixLength = prefixLength;
    } // setprefixLength


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AddressType. 
     */

    public enum AddressType{
    UNKNOWN,
    IPV4,
    IPV6
    }
    private AddressType addressType;
    /**
     * This method returns the IPConnectivitySubnet.AddressType property 
     * value. This property is described as follows: 
     * 
     * An enumeration that describes the format of the address properties in 
     * IPConnectivitySubnet. 
     * 
     * @return	int	current AddressType property value
     * @exception	Exception	
     */
    public AddressType getAddressType(){

    return this.addressType;
    } // getAddressType

    /**
     * This method sets the IPConnectivitySubnet.AddressType property value. 
     * This property is described as follows: 
     * 
     * An enumeration that describes the format of the address properties in 
     * IPConnectivitySubnet. 
     * 
     * @param	int	new AddressType property value
     * @exception	Exception	
     */
    public void setAddressType(AddressType addressType){

    this.addressType = addressType;
    } // setAddressType



} // Class IPConnectivitySubnet
