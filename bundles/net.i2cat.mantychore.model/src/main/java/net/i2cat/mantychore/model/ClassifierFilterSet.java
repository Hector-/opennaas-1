/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 10:54:51 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class ClassifierFilterSet as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * ClassifierFilterSetBean Interface. The CIM class ClassifierFilterSet is 
 * described as follows: 
 * 
 * In order for a ClassifierService to correctly identify and process network 
 * traffic, that traffic must be described by FilterEntries, which are 
 * aggregated into FilterLists. This association defines the Dependency of 
 * the ClassifierService on FilterLists (and therefore, their FilterEntries). 
 * The cardinality of the association requires that the Classifier Service 
 * operate against at least one FilterList. The association is deprecated in 
 * lieu of associating Filter Lists to ClassifierElements, and 
 * ClassifierElements into ClassifierServices. The latter approach is very 
 * flexible regarding the implementations that can be modeled, and removes 
 * the need to track individual traffic streams using an artificial model 
 * property, TrafficClass. Using ClassifierElements, each stream is processed 
 * beginning with a single FilterList and progressing through various 
 * ConditioningServices, associated via instances of NextService. 
 */
public class ClassifierFilterSet extends Dependency implements Serializable 
    {

    /**
     * This constructor creates a ClassifierFilterSetBeanImpl Class which 
     * implements the ClassifierFilterSetBean Interface, and encapsulates the 
     * CIM class ClassifierFilterSet in a Java Bean. The CIM class 
     * ClassifierFilterSet is described as follows: 
     * 
     * In order for a ClassifierService to correctly identify and process 
     * network traffic, that traffic must be described by FilterEntries, 
     * which are aggregated into FilterLists. This association defines the 
     * Dependency of the ClassifierService on FilterLists (and therefore, 
     * their FilterEntries). The cardinality of the association requires that 
     * the Classifier Service operate against at least one FilterList. The 
     * association is deprecated in lieu of associating Filter Lists to 
     * ClassifierElements, and ClassifierElements into ClassifierServices. 
     * The latter approach is very flexible regarding the implementations 
     * that can be modeled, and removes the need to track individual traffic 
     * streams using an artificial model property, TrafficClass. Using 
     * ClassifierElements, each stream is processed beginning with a single 
     * FilterList and progressing through various ConditioningServices, 
     * associated via instances of NextService. 
     */
    public ClassifierFilterSet(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Antecedent. 
     */
    @Deprecated    private FilterList antecedent;
    /**
     * This method returns the ClassifierFilterSet.Antecedent property value. 
     * This property is described as follows: 
     * 
     * The FilterList aggregating FilterEntries, these in turn describe how 
     * traffic is identified and processed by the ClassifierService. 
     * 
     * @return	CIM_FilterList	current Antecedent property value
     * @exception	Exception	
     */
    @Deprecated
    public FilterList getAntecedent(){

    return (FilterList)antecedent;
    } // getAntecedent

    /**
     * This method sets the ClassifierFilterSet.Antecedent property value. 
     * This property is described as follows: 
     * 
     * The FilterList aggregating FilterEntries, these in turn describe how 
     * traffic is identified and processed by the ClassifierService. 
     * 
     * @param	CIM_FilterList	new Antecedent property value
     * @exception	Exception	
     */
    @Deprecated
    public void setAntecedent(FilterList antecedent) {

    this.antecedent = antecedent;
    } // setAntecedent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Dependent. 
     */
    @Deprecated    private ClassifierService dependent;
    /**
     * This method returns the ClassifierFilterSet.Dependent property value. 
     * This property is described as follows: 
     * 
     * The ClassifierService which uses the FilterList and its aggregated 
     * FilterEntries. 
     * 
     * @return	CIM_ClassifierService	current Dependent property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public ClassifierService getDependent(){

    return (ClassifierService)dependent;
    } // getDependent

    /**
     * This method sets the ClassifierFilterSet.Dependent property value. This 
     * property is described as follows: 
     * 
     * The ClassifierService which uses the FilterList and its aggregated 
     * FilterEntries. 
     * 
     * @param	CIM_ClassifierService	new Dependent property value
     * @exception	Exception	
     */
    @Deprecated
    public void setDependent(ClassifierService dependent) {

    this.dependent = dependent;
    } // setDependent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property FilterListPosition. 
     */
    @Deprecated    private short filterListPosition;
    /**
     * This method returns the ClassifierFilterSet.FilterListPosition property 
     * value. This property is described as follows: 
     * 
     * The ordering of the FilterLists used in the classification and 
     * forwarding functions of the ClassifierService. 
     * 
     * @return	short	current FilterListPosition property value
     * @exception	Exception	
     */
    @Deprecated
    public short getFilterListPosition(){

    return this.filterListPosition;
    } // getFilterListPosition

    /**
     * This method sets the ClassifierFilterSet.FilterListPosition property 
     * value. This property is described as follows: 
     * 
     * The ordering of the FilterLists used in the classification and 
     * forwarding functions of the ClassifierService. 
     * 
     * @param	short	new FilterListPosition property value
     * @exception	Exception	
     */
    @Deprecated
    public void setFilterListPosition(short filterListPosition) {

    this.filterListPosition = filterListPosition;
    } // setFilterListPosition



} // Class ClassifierFilterSet
