/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 15:29:20 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class ClassifierElementUsesFilterList as well as methods 
 * comparable to the invokeMethods defined for this class. This Class 
 * implements the ClassifierElementUsesFilterListBean Interface. The CIM 
 * class ClassifierElementUsesFilterList is described as follows: 
 * 
 * This association relates one or more ClassifierElements with a FilterList 
 * that defines the criteria to select packets for the classifier to process. 
 * Note that a classifier is always modeled as a ClassifierService that 
 * aggregates a set of ClassifierElements. Each of these ClassifierElements 
 * is EITHER associated with a single FilterList OR associated to another 
 * ClassifierService (via NextServiceAfterClassifier Element to describe 
 * hierarchical classification). 
 */
public class ClassifierElementUsesFilterList extends Dependency implements 
    Serializable {

    /**
     * This constructor creates a ClassifierElementUsesFilterListBeanImpl 
     * Class which implements the ClassifierElementUsesFilterListBean 
     * Interface, and encapsulates the CIM class 
     * ClassifierElementUsesFilterList in a Java Bean. The CIM class 
     * ClassifierElementUsesFilterList is described as follows: 
     * 
     * This association relates one or more ClassifierElements with a 
     * FilterList that defines the criteria to select packets for the 
     * classifier to process. Note that a classifier is always modeled as a 
     * ClassifierService that aggregates a set of ClassifierElements. Each of 
     * these ClassifierElements is EITHER associated with a single FilterList 
     * OR associated to another ClassifierService (via 
     * NextServiceAfterClassifier Element to describe hierarchical 
     * classification). 
     */
    public ClassifierElementUsesFilterList(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Antecedent. 
     */
    private FilterList antecedent;
    /**
     * This method returns the ClassifierElementUsesFilterList.Antecedent 
     * property value. This property is described as follows: 
     * 
     * The FilterList that specifies the traffic criteria for a 
     * ClassifierElement. 
     * 
     * @return	CIM_FilterList	current Antecedent property value
     * @exception	Exception	
     */
    public FilterList getAntecedent(){

    return (FilterList)antecedent;
    } // getAntecedent

    /**
     * This method sets the ClassifierElementUsesFilterList.Antecedent 
     * property value. This property is described as follows: 
     * 
     * The FilterList that specifies the traffic criteria for a 
     * ClassifierElement. 
     * 
     * @param	CIM_FilterList	new Antecedent property value
     * @exception	Exception	
     */
    public void setAntecedent(FilterList antecedent) {

    this.antecedent = antecedent;
    } // setAntecedent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Dependent. 
     */
    private ClassifierElement dependent;
    /**
     * This method returns the ClassifierElementUsesFilterList.Dependent 
     * property value. This property is described as follows: 
     * 
     * The ClassifierElement that depends on the FilterList for its traffic 
     * criteria. 
     * 
     * @return	CIM_ClassifierElement	current Dependent property 
     * value 
     * @exception	Exception	
     */
    public ClassifierElement getDependent(){

    return (ClassifierElement)dependent;
    } // getDependent

    /**
     * This method sets the ClassifierElementUsesFilterList.Dependent property 
     * value. This property is described as follows: 
     * 
     * The ClassifierElement that depends on the FilterList for its traffic 
     * criteria. 
     * 
     * @param	CIM_ClassifierElement	new Dependent property value
     * @exception	Exception	
     */
    public void setDependent(ClassifierElement dependent) {

    this.dependent = dependent;
    } // setDependent



} // Class ClassifierElementUsesFilterList
