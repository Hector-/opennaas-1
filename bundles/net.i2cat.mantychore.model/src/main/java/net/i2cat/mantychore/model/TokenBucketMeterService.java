/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 17 
 * 13:56:59 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class TokenBucketMeterService as well as methods comparable to 
 * the invokeMethods defined for this class. This Class implements the 
 * TokenBucketMeterServiceBean Interface. The CIM class 
 * TokenBucketMeterService is described as follows: 
 * 
 * This is a concrete subclass of the MeterService class that represents the 
 * metering of network traffic using a token bucket meter. Two types of token 
 * bucket meters are defined using this class - a simple, two-parameter 
 * bucket meter, and a multi-stage meter. A simple token bucket usually has 
 * two parameters, an average token rate and a burst size, and has two 
 * conformance levels: 'conforming' and 'non-conforming'. This class also 
 * defines an excess burst size, which enables the meter to have three 
 * conformance levels ('conforming', 'partially conforming', and 
 * 'non-conforming'). In this case, packets that exceed the excess burst size 
 * are deemed non-conforming, while packets that exceed the smaller burst 
 * size but are less than the excess burst size are deemed partially 
 * conforming. 
 */
public class TokenBucketMeterService extends MeterService implements 
    Serializable {

    /**
     * This constructor creates a TokenBucketMeterServiceBeanImpl Class which 
     * implements the TokenBucketMeterServiceBean Interface, and encapsulates 
     * the CIM class TokenBucketMeterService in a Java Bean. The CIM class 
     * TokenBucketMeterService is described as follows: 
     * 
     * This is a concrete subclass of the MeterService class that represents 
     * the metering of network traffic using a token bucket meter. Two types 
     * of token bucket meters are defined using this class - a simple, 
     * two-parameter bucket meter, and a multi-stage meter. A simple token 
     * bucket usually has two parameters, an average token rate and a burst 
     * size, and has two conformance levels: 'conforming' and 
     * 'non-conforming'. This class also defines an excess burst size, which 
     * enables the meter to have three conformance levels ('conforming', 
     * 'partially conforming', and 'non-conforming'). In this case, packets 
     * that exceed the excess burst size are deemed non-conforming, while 
     * packets that exceed the smaller burst size but are less than the 
     * excess burst size are deemed partially conforming. 
     */
    public TokenBucketMeterService(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AverageRate. 
     */
    private int averageRate;
    /**
     * This method returns the TokenBucketMeterService.AverageRate property 
     * value. This property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer that is used to define the 
     * committed rate of the meter. The value is expressed in kilobits per 
     * second. 
     * 
     * @return	int	current AverageRate property value
     * @exception	Exception	
     */
    public int getAverageRate(){

    return this.averageRate;
    } // getAverageRate

    /**
     * This method sets the TokenBucketMeterService.AverageRate property 
     * value. This property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer that is used to define the 
     * committed rate of the meter. The value is expressed in kilobits per 
     * second. 
     * 
     * @param	int	new AverageRate property value
     * @exception	Exception	
     */
    public void setAverageRate(int averageRate) {

    this.averageRate = averageRate;
    } // setAverageRate


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PeakRate. 
     */
    private int peakRate;
    /**
     * This method returns the TokenBucketMeterService.PeakRate property 
     * value. This property is described as follows: 
     * 
     * This attribute is a 32-bit unsigned integer that is used to define the 
     * peak rate of the meter. The value is expressed in kilobits per second. 
     * 
     * @return	int	current PeakRate property value
     * @exception	Exception	
     */
    public int getPeakRate(){

    return this.peakRate;
    } // getPeakRate

    /**
     * This method sets the TokenBucketMeterService.PeakRate property value. 
     * This property is described as follows: 
     * 
     * This attribute is a 32-bit unsigned integer that is used to define the 
     * peak rate of the meter. The value is expressed in kilobits per second. 
     * 
     * @param	int	new PeakRate property value
     * @exception	Exception	
     */
    public void setPeakRate(int peakRate) {

    this.peakRate = peakRate;
    } // setPeakRate


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property BurstSize. 
     */
    private int burstSize;
    /**
     * This method returns the TokenBucketMeterService.BurstSize property 
     * value. This property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer that is used to define the 
     * maximum number of tokens available for the committed rate (specified 
     * by the AverageRate property). The value is specified in kilobytes. 
     * 
     * @return	int	current BurstSize property value
     * @exception	Exception	
     */
    public int getBurstSize(){

    return this.burstSize;
    } // getBurstSize

    /**
     * This method sets the TokenBucketMeterService.BurstSize property value. 
     * This property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer that is used to define the 
     * maximum number of tokens available for the committed rate (specified 
     * by the AverageRate property). The value is specified in kilobytes. 
     * 
     * @param	int	new BurstSize property value
     * @exception	Exception	
     */
    public void setBurstSize(int burstSize) {

    this.burstSize = burstSize;
    } // setBurstSize


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ExcessBurstSize. 
     */
    private int excessBurstSize;
    /**
     * This method returns the TokenBucketMeterService.ExcessBurstSize 
     * property value. This property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer that is used to define the 
     * maximum number of tokens available for the peak rate (specified by the 
     * PeakRate property). The value is specified in kilobytes. 
     * 
     * @return	int	current ExcessBurstSize property value
     * @exception	Exception	
     */
    public int getExcessBurstSize(){

    return this.excessBurstSize;
    } // getExcessBurstSize

    /**
     * This method sets the TokenBucketMeterService.ExcessBurstSize property 
     * value. This property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer that is used to define the 
     * maximum number of tokens available for the peak rate (specified by the 
     * PeakRate property). The value is specified in kilobytes. 
     * 
     * @param	int	new ExcessBurstSize property value
     * @exception	Exception	
     */
    public void setExcessBurstSize(int excessBurstSize) {

    this.excessBurstSize = excessBurstSize;
    } // setExcessBurstSize



} // Class TokenBucketMeterService
