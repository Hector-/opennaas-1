/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class EthernetPort as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * EthernetPortBean Interface. The CIM class EthernetPort is described as 
 * follows: 
 * 
 * Capabilities and management of an EthernetPort.
 */
    @Entity
public class EthernetPort extends NetworkPort implements Serializable {

    /**
     * This constructor creates a EthernetPortBeanImpl Class which implements 
     * the EthernetPortBean Interface, and encapsulates the CIM class 
     * EthernetPort in a Java Bean. The CIM class EthernetPort is described 
     * as follows: 
     * 
     * Capabilities and management of an EthernetPort.
     */
    public EthernetPort(){};

    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property NetworkAddresses. 
     */
    private String[] networkAddresses;
    /**
     * This method returns the EthernetPort.networkAddresses property value. 
     * This property is described as follows: 
     * 
     * Ethernet/802.3 MAC addresses formatted as twelve hexadecimal digits 
     * (for example, "010203040506"), with each pair representing one of the 
     * six octets of the MAC address in "canonical" bit order. (Therefore, 
     * the Group address bit is found in the low order bit of the first 
     * character of the string.) 
     * 
     * @return	String[]	current networkAddresses property value
     * @exception	Exception	
     */
    public String[] getnetworkAddresses(){

    return (String[])networkAddresses;
    } // getnetworkAddresses

    /**
     * This method sets the EthernetPort.networkAddresses property value. This 
     * property is described as follows: 
     * 
     * Ethernet/802.3 MAC addresses formatted as twelve hexadecimal digits 
     * (for example, "010203040506"), with each pair representing one of the 
     * six octets of the MAC address in "canonical" bit order. (Therefore, 
     * the Group address bit is found in the low order bit of the first 
     * character of the string.) 
     * 
     * @param	String[]	new networkAddresses property value
     * @exception	Exception	
     */
    public void setnetworkAddresses(String[] networkAddresses) {

    this.networkAddresses = networkAddresses;
    } // setnetworkAddresses


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MaxDataSize. 
     */
    private long maxDataSize;
    /**
     * This method returns the EthernetPort.maxDataSize property value. This 
     * property is described as follows: 
     * 
     * The maximum size of the INFO (non-MAC) field that will be received or 
     * transmitted. 
     * 
     * @return	long	current maxDataSize property value
     * @exception	Exception	
     */
    public long getmaxDataSize(){

    return this.maxDataSize;
    } // getmaxDataSize

    /**
     * This method sets the EthernetPort.maxDataSize property value. This 
     * property is described as follows: 
     * 
     * The maximum size of the INFO (non-MAC) field that will be received or 
     * transmitted. 
     * 
     * @param	long	new maxDataSize property value
     * @exception	Exception	
     */
    public void setmaxDataSize(long maxDataSize) {

    this.maxDataSize = maxDataSize;
    } // setmaxDataSize


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Capabilities. 
     */

    public enum Capabilities{
    UNKNOWN,
    OTHER,
    ALERTONLAN,
    WAKEONLAN,
    FAILOVER,
    LOADBALANCING
    }
    private Capabilities capabilities;
    /**
     * This method returns the EthernetPort.Capabilities property value. This 
     * property is described as follows: 
     * 
     * Capabilities of the EthernetPort. For example, the Device might support 
     * AlertOnLan, WakeOnLan, Load Balancing, or FailOver. If failover or 
     * load balancing capabilities are listed, a SpareGroup (failover) or 
     * ExtraCapacityGroup (load balancing) should also be defined to 
     * completely describe the capability. 
     * 
     * @return	int	current Capabilities property value
     * @exception	Exception	
     */
    public Capabilities getCapabilities(){

    return this.capabilities;
    } // getCapabilities

    /**
     * This method sets the EthernetPort.Capabilities property value. This 
     * property is described as follows: 
     * 
     * Capabilities of the EthernetPort. For example, the Device might support 
     * AlertOnLan, WakeOnLan, Load Balancing, or FailOver. If failover or 
     * load balancing capabilities are listed, a SpareGroup (failover) or 
     * ExtraCapacityGroup (load balancing) should also be defined to 
     * completely describe the capability. 
     * 
     * @param	int	new Capabilities property value
     * @exception	Exception	
     */
    public void setCapabilities(Capabilities capabilities){

    this.capabilities = capabilities;
    } // setCapabilities


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CapabilityDescriptions. 
     */
    private String[] capabilityDescriptions;
    /**
     * This method returns the EthernetPort.capabilityDescriptions property 
     * value. This property is described as follows: 
     * 
     * An array of free-form strings that provides more detailed explanations 
     * for any of the EthernetPort features that are indicated in the 
     * Capabilities array. Note, each entry of this array is related to the 
     * entry in the Capabilities array that is located at the same index. 
     * 
     * @return	String[]	current capabilityDescriptions property 
     * value 
     * @exception	Exception	
     */
    public String[] getcapabilityDescriptions(){

    return this.capabilityDescriptions;
    } // getcapabilityDescriptions

    /**
     * This method sets the EthernetPort.capabilityDescriptions property 
     * value. This property is described as follows: 
     * 
     * An array of free-form strings that provides more detailed explanations 
     * for any of the EthernetPort features that are indicated in the 
     * Capabilities array. Note, each entry of this array is related to the 
     * entry in the Capabilities array that is located at the same index. 
     * 
     * @param	String[]	new capabilityDescriptions property value
     * @exception	Exception	
     */
    public void setcapabilityDescriptions(String[] capabilityDescriptions) {

    this.capabilityDescriptions = capabilityDescriptions;
    } // setcapabilityDescriptions


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property EnabledCapabilities. 
     */

    public enum EnabledCapabilities{
    UNKNOWN,
    OTHER,
    ALERTONLAN,
    WAKEONLAN,
    FAILOVER,
    LOADBALANCING
    }
    private EnabledCapabilities enabledCapabilities;
    /**
     * This method returns the EthernetPort.EnabledCapabilities property 
     * value. This property is described as follows: 
     * 
     * Specifies which capabilities are enabled from the list of all supported 
     * ones, which are defined in the Capabilities array. 
     * 
     * @return	int	current EnabledCapabilities property value
     * @exception	Exception	
     */
    public EnabledCapabilities getEnabledCapabilities(){

    return this.enabledCapabilities;
    } // getEnabledCapabilities

    /**
     * This method sets the EthernetPort.EnabledCapabilities property value. 
     * This property is described as follows: 
     * 
     * Specifies which capabilities are enabled from the list of all supported 
     * ones, which are defined in the Capabilities array. 
     * 
     * @param	int	new EnabledCapabilities property value
     * @exception	Exception	
     */
    public void setEnabledCapabilities(EnabledCapabilities 
	enabledCapabilities){

    this.enabledCapabilities = enabledCapabilities;
    } // setEnabledCapabilities


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherEnabledCapabilities. 
     */
    private String[] otherEnabledCapabilities;
    /**
     * This method returns the EthernetPort.otherEnabledCapabilities property 
     * value. This property is described as follows: 
     * 
     * An array of free-form strings that provides more detailed explanations 
     * for any of the enabled capabilities that are specified as 'Other'. 
     * 
     * @return	String[]	current otherEnabledCapabilities 
     * property value 
     * @exception	Exception	
     */
    public String[] getotherEnabledCapabilities(){

    return this.otherEnabledCapabilities;
    } // getotherEnabledCapabilities

    /**
     * This method sets the EthernetPort.otherEnabledCapabilities property 
     * value. This property is described as follows: 
     * 
     * An array of free-form strings that provides more detailed explanations 
     * for any of the enabled capabilities that are specified as 'Other'. 
     * 
     * @param	String[]	new otherEnabledCapabilities property 
     * value 
     * @exception	Exception	
     */
    public void setotherEnabledCapabilities(String[] otherEnabledCapabilities) 
	{

    this.otherEnabledCapabilities = otherEnabledCapabilities;
    } // setotherEnabledCapabilities



} // Class EthernetPort
