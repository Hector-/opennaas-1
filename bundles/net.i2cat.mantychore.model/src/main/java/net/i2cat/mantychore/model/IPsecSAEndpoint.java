/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class IPsecSAEndpoint as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * IPsecSAEndpointBean Interface. The CIM class IPsecSAEndpoint is described 
 * as follows: 
 * 
 * IPsecSAEndpoints are types of SecurityAssociationEndpoints representing 
 * both negotiated and static SAs that correspond to AH, ESP, or IPCOMP 
 * transforms. 
 */
    @Entity
public class IPsecSAEndpoint extends SecurityAssociationEndpoint implements 
    Serializable {

    /**
     * This constructor creates a IPsecSAEndpointBeanImpl Class which 
     * implements the IPsecSAEndpointBean Interface, and encapsulates the CIM 
     * class IPsecSAEndpoint in a Java Bean. The CIM class IPsecSAEndpoint is 
     * described as follows: 
     * 
     * IPsecSAEndpoints are types of SecurityAssociationEndpoints representing 
     * both negotiated and static SAs that correspond to AH, ESP, or IPCOMP 
     * transforms. 
     */
    public IPsecSAEndpoint(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SPI. 
     */
    private long sPI;
    /**
     * This method returns the IPsecSAEndpoint.sPI property value. This 
     * property is described as follows: 
     * 
     * SPI contains the Security Parameter Index of the SA. This value in 
     * string form may also be used in the key field 'Name' inherited from 
     * ServiceAccessPoint. 
     * 
     * @return	long	current sPI property value
     * @exception	Exception	
     */
    public long getsPI(){

    return this.sPI;
    } // getsPI

    /**
     * This method sets the IPsecSAEndpoint.sPI property value. This property 
     * is described as follows: 
     * 
     * SPI contains the Security Parameter Index of the SA. This value in 
     * string form may also be used in the key field 'Name' inherited from 
     * ServiceAccessPoint. 
     * 
     * @param	long	new sPI property value
     * @exception	Exception	
     */
    public void setsPI(long sPI) {

    this.sPI = sPI;
    } // setsPI


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property InboundDirection. 
     */
    private boolean inboundDirection;
    /**
     * This method returns the IPsecSAEndpoint.inboundDirection property 
     * value. This property is described as follows: 
     * 
     * InboundDirection specifies whether the SA applies to inbound (TRUE) or 
     * outbound (FALSE) traffic. 
     * 
     * @return	boolean	current inboundDirection property value
     * @exception	Exception	
     */
    public boolean isinboundDirection(){

    return this.inboundDirection;
    } // getinboundDirection

    /**
     * This method sets the IPsecSAEndpoint.inboundDirection property value. 
     * This property is described as follows: 
     * 
     * InboundDirection specifies whether the SA applies to inbound (TRUE) or 
     * outbound (FALSE) traffic. 
     * 
     * @param	boolean	new inboundDirection property value
     * @exception	Exception	
     */
    public void setinboundDirection(boolean inboundDirection) {

    this.inboundDirection = inboundDirection;
    } // setinboundDirection


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property EncapsulationMode. 
     */

    public enum EncapsulationMode{
    UNKNOWN,
    TUNNEL,
    TRANSPORT
    }
    private EncapsulationMode encapsulationMode;
    /**
     * This method returns the IPsecSAEndpoint.EncapsulationMode property 
     * value. This property is described as follows: 
     * 
     * EncapsulationMode indicates whether the IPsecSAEndpoint uses transport 
     * or tunnel encapsulation. 
     * 
     * @return	int	current EncapsulationMode property value
     * @exception	Exception	
     */
    public EncapsulationMode getEncapsulationMode(){

    return this.encapsulationMode;
    } // getEncapsulationMode

    /**
     * This method sets the IPsecSAEndpoint.EncapsulationMode property value. 
     * This property is described as follows: 
     * 
     * EncapsulationMode indicates whether the IPsecSAEndpoint uses transport 
     * or tunnel encapsulation. 
     * 
     * @param	int	new EncapsulationMode property value
     * @exception	Exception	
     */
    public void setEncapsulationMode(EncapsulationMode encapsulationMode){

    this.encapsulationMode = encapsulationMode;
    } // setEncapsulationMode


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DFHandling. 
     */

    public enum DFHandling{
    UNKNOWN,
    COPY_FROM_INTERNAL_TO_EXTERNAL_IP_HEADER,
    SET_DF_BIT_IN_EXTERNAL_HEADER_TO_1,
    SET_DF_BIT_IN_EXTERNAL_HEADER_TO_0
    }
    private DFHandling dFHandling;
    /**
     * This method returns the IPsecSAEndpoint.DFHandling property value. This 
     * property is described as follows: 
     * 
     * DFHandling controls how the 'Don't Fragment' bit is managed by the 
     * IPsecSAEndpoint. 
     * 
     * @return	int	current DFHandling property value
     * @exception	Exception	
     */
    public DFHandling getDFHandling(){

    return this.dFHandling;
    } // getDFHandling

    /**
     * This method sets the IPsecSAEndpoint.DFHandling property value. This 
     * property is described as follows: 
     * 
     * DFHandling controls how the 'Don't Fragment' bit is managed by the 
     * IPsecSAEndpoint. 
     * 
     * @param	int	new DFHandling property value
     * @exception	Exception	
     */
    public void setDFHandling(DFHandling dFHandling){

    this.dFHandling = dFHandling;
    } // setDFHandling


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PFSInUse. 
     */
    private boolean pFSInUse;
    /**
     * This method returns the IPsecSAEndpoint.pFSInUse property value. This 
     * property is described as follows: 
     * 
     * PFSInUse indicates whether perfect forward secrecy is required when 
     * refreshing keys. 
     * 
     * @return	boolean	current pFSInUse property value
     * @exception	Exception	
     */
    public boolean ispFSInUse(){

    return this.pFSInUse;
    } // getpFSInUse

    /**
     * This method sets the IPsecSAEndpoint.pFSInUse property value. This 
     * property is described as follows: 
     * 
     * PFSInUse indicates whether perfect forward secrecy is required when 
     * refreshing keys. 
     * 
     * @param	boolean	new pFSInUse property value
     * @exception	Exception	
     */
    public void setpFSInUse(boolean pFSInUse) {

    this.pFSInUse = pFSInUse;
    } // setpFSInUse



} // Class IPsecSAEndpoint
