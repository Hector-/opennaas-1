/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 03 
 * 14:18:55 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class IPHeadersFilter as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * IPHeadersFilterBean Interface. The CIM class IPHeadersFilter is described 
 * as follows: 
 * 
 * IPHeadersFilter contains the most commonly required properties for 
 * performing filtering on IP, TCP or UDP headers. Properties not present in 
 * an instance of the IPHeadersFilter are treated as 'all values'. 
 */
public class IPHeadersFilter extends FilterEntryBase implements Serializable 
    {

    /**
     * This constructor creates a IPHeadersFilterBeanImpl Class which 
     * implements the IPHeadersFilterBean Interface, and encapsulates the CIM 
     * class IPHeadersFilter in a Java Bean. The CIM class IPHeadersFilter is 
     * described as follows: 
     * 
     * IPHeadersFilter contains the most commonly required properties for 
     * performing filtering on IP, TCP or UDP headers. Properties not present 
     * in an instance of the IPHeadersFilter are treated as 'all values'. 
     */
    public IPHeadersFilter(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HdrIPVersion. 
     */

    public enum HdrIPVersion{
    IPV4,
    IPV6
    }
 public HdrIPVersion hdrIPVersion;
    /**
     * This method returns the IPHeadersFilter.HdrIPVersion property value. 
     * This property is described as follows: 
     * 
     * HdrIPVersion identifies the version of the IP addresses for IP header 
     * filters. It is also used to determine the sizes of the OctetStrings in 
     * the six properties HdrSrcAddress, HdrSrcAddressEndOfRange, HdrSrcMask, 
     * HdrDestAddress, HdrDestAddressEndOfRange and HdrDestMask, as follows: 
     * ipv4(4): OctetString(SIZE (4)) ipv6(6): OctetString(SIZE (16|20)), 
     * depending on whether a scope identifier is present. If a value for 
     * this property is not provided, then the filter does not consider IP 
     * version in selecting matching packets, i.e., IP version matches for 
     * all values. In this case, the HdrSrcAddress, HdrSrcAddressEndOfRange, 
     * HdrSrcMask, HdrDestAddress, HdrDestAddressEndOfRange and HdrDestMask 
     * must also be not present. 
     * 
     * @return	Byte	current HdrIPVersion property value
     * @exception	Exception	
     */
    public HdrIPVersion getHdrIPVersion(){

    return this.hdrIPVersion;
    } // getHdrIPVersion

    /**
     * This method sets the IPHeadersFilter.HdrIPVersion property value. This 
     * property is described as follows: 
     * 
     * HdrIPVersion identifies the version of the IP addresses for IP header 
     * filters. It is also used to determine the sizes of the OctetStrings in 
     * the six properties HdrSrcAddress, HdrSrcAddressEndOfRange, HdrSrcMask, 
     * HdrDestAddress, HdrDestAddressEndOfRange and HdrDestMask, as follows: 
     * ipv4(4): OctetString(SIZE (4)) ipv6(6): OctetString(SIZE (16|20)), 
     * depending on whether a scope identifier is present. If a value for 
     * this property is not provided, then the filter does not consider IP 
     * version in selecting matching packets, i.e., IP version matches for 
     * all values. In this case, the HdrSrcAddress, HdrSrcAddressEndOfRange, 
     * HdrSrcMask, HdrDestAddress, HdrDestAddressEndOfRange and HdrDestMask 
     * must also be not present. 
     * 
     * @param	Byte	new HdrIPVersion property value
     * @exception	Exception	
     */
    public void setHdrIPVersion(HdrIPVersion hdrIPVersion){

    this.hdrIPVersion = hdrIPVersion;
    } // setHdrIPVersion


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HdrSrcAddress. 
     */
    private Byte[] hdrSrcAddress;
    /**
     * This method returns the IPHeadersFilter.HdrSrcAddress property value. 
     * This property is described as follows: 
     * 
     * HdrSrcAddress is an OctetString, of a size determined by the value of 
     * the HdrIPVersion property, representing a source IP address. When 
     * there is no HdrSrcAddressEndOfRange value, this value is compared to 
     * the source address in the IP header, subject to the mask represented 
     * in the HdrSrcMask property. (Note that the mask is ANDed with the 
     * address.) When there is a HdrSrcAddressEndOfRange value, this value is 
     * the start of the specified range (i.e., the HdrSrcAddress is lower 
     * than the HdrSrcAddressEndOfRange) that is compared to the source 
     * address in the IP header and matches on any value in the range. If a 
     * value for this property is not provided, then the filter does not 
     * consider HdrSrcAddress in selecting matching packets, i.e., 
     * HdrSrcAddress matches for all values. 
     * 
     * @return	Byte[]	current HdrSrcAddress property value
     * @exception	Exception	
     */
    public Byte[] getHdrSrcAddress(){

    return this.hdrSrcAddress;
    } // getHdrSrcAddress

    /**
     * This method sets the IPHeadersFilter.HdrSrcAddress property value. This 
     * property is described as follows: 
     * 
     * HdrSrcAddress is an OctetString, of a size determined by the value of 
     * the HdrIPVersion property, representing a source IP address. When 
     * there is no HdrSrcAddressEndOfRange value, this value is compared to 
     * the source address in the IP header, subject to the mask represented 
     * in the HdrSrcMask property. (Note that the mask is ANDed with the 
     * address.) When there is a HdrSrcAddressEndOfRange value, this value is 
     * the start of the specified range (i.e., the HdrSrcAddress is lower 
     * than the HdrSrcAddressEndOfRange) that is compared to the source 
     * address in the IP header and matches on any value in the range. If a 
     * value for this property is not provided, then the filter does not 
     * consider HdrSrcAddress in selecting matching packets, i.e., 
     * HdrSrcAddress matches for all values. 
     * 
     * @param	Byte[]	new HdrSrcAddress property value
     * @exception	Exception	
     */
    public void setHdrSrcAddress(Byte[] hdrSrcAddress) {

    this.hdrSrcAddress = hdrSrcAddress;
    } // setHdrSrcAddress


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HdrSrcAddressEndOfRange. 
     */
    private Byte[] hdrSrcAddressEndOfRange;
    /**
     * This method returns the IPHeadersFilter.HdrSrcAddressEndOfRange 
     * property value. This property is described as follows: 
     * 
     * HdrSrcAddressEndOfRange is an OctetString, of a size determined by the 
     * value of the HdrIPVersion property, representing the end of a range of 
     * source IP addresses (inclusive), where the start of the range is the 
     * HdrSrcAddress property value. If a value for HdrSrcAddress is not 
     * provided, then this property also MUST NOT be provided. If a value for 
     * this property is provided, then HdrSrcMask MUST NOT be provided. 
     * 
     * @return	Byte[]	current HdrSrcAddressEndOfRange property 
     * value 
     * @exception	Exception	
     */
    public Byte[] getHdrSrcAddressEndOfRange(){

    return this.hdrSrcAddressEndOfRange;
    } // getHdrSrcAddressEndOfRange

    /**
     * This method sets the IPHeadersFilter.HdrSrcAddressEndOfRange property 
     * value. This property is described as follows: 
     * 
     * HdrSrcAddressEndOfRange is an OctetString, of a size determined by the 
     * value of the HdrIPVersion property, representing the end of a range of 
     * source IP addresses (inclusive), where the start of the range is the 
     * HdrSrcAddress property value. If a value for HdrSrcAddress is not 
     * provided, then this property also MUST NOT be provided. If a value for 
     * this property is provided, then HdrSrcMask MUST NOT be provided. 
     * 
     * @param	Byte[]	new HdrSrcAddressEndOfRange property value
     * @exception	Exception	
     */
    public void setHdrSrcAddressEndOfRange(Byte[] hdrSrcAddressEndOfRange) {

    this.hdrSrcAddressEndOfRange = hdrSrcAddressEndOfRange;
    } // setHdrSrcAddressEndOfRange


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HdrSrcMask. 
     */
    private Byte[] hdrSrcMask;
    /**
     * This method returns the IPHeadersFilter.HdrSrcMask property value. This 
     * property is described as follows: 
     * 
     * HdrSrcMask is an OctetString, of a size determined by the value of the 
     * HdrIPVersion property, representing a mask to be used in comparing the 
     * source address in the IP header with the value represented in the 
     * HdrSrcAddress property. If a value for this property is not provided, 
     * then the filter does not consider HdrSrcMask in selecting matching 
     * packets, i.e., the value of the HdrSrcAddress or the source address 
     * range must match the source address in the packet exactly. If a value 
     * for this property is provided, then HdrSrcAddressEndOfRange MUST NOT 
     * be provided. 
     * 
     * @return	Byte[]	current HdrSrcMask property value
     * @exception	Exception	
     */
    public Byte[] getHdrSrcMask(){

    return this.hdrSrcMask;
    } // getHdrSrcMask

    /**
     * This method sets the IPHeadersFilter.HdrSrcMask property value. This 
     * property is described as follows: 
     * 
     * HdrSrcMask is an OctetString, of a size determined by the value of the 
     * HdrIPVersion property, representing a mask to be used in comparing the 
     * source address in the IP header with the value represented in the 
     * HdrSrcAddress property. If a value for this property is not provided, 
     * then the filter does not consider HdrSrcMask in selecting matching 
     * packets, i.e., the value of the HdrSrcAddress or the source address 
     * range must match the source address in the packet exactly. If a value 
     * for this property is provided, then HdrSrcAddressEndOfRange MUST NOT 
     * be provided. 
     * 
     * @param	Byte[]	new HdrSrcMask property value
     * @exception	Exception	
     */
    public void setHdrSrcMask(Byte[] hdrSrcMask) {

    this.hdrSrcMask = hdrSrcMask;
    } // setHdrSrcMask


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HdrDestAddress. 
     */
    private Byte[] hdrDestAddress;
    /**
     * This method returns the IPHeadersFilter.HdrDestAddress property value. 
     * This property is described as follows: 
     * 
     * HdrDestAddress is an OctetString, of a size determined by the value of 
     * the HdrIPVersion property, representing a destination IP address. When 
     * there is no HdrDestAddressEndOfRange value, this value is compared to 
     * the destination address in the IP header, subject to the mask 
     * represented in the HdrDestMask property. (Note that the mask is ANDed 
     * with the address.) When there is a HdrDestAddressEndOfRange value, 
     * this value is the start of the specified range (i.e., the 
     * HdrDestAddress is lower than the HdrDestAddressEndOfRange) that is 
     * compared to the source address in the IP header and matches on any 
     * value in the range. If a value for this property is not provided, then 
     * the filter does not consider HdrDestAddress in selecting matching 
     * packets, i.e., HdrDestAddress matches for all values. 
     * 
     * @return	Byte[]	current HdrDestAddress property value
     * @exception	Exception	
     */
    public Byte[] getHdrDestAddress(){

    return this.hdrDestAddress;
    } // getHdrDestAddress

    /**
     * This method sets the IPHeadersFilter.HdrDestAddress property value. 
     * This property is described as follows: 
     * 
     * HdrDestAddress is an OctetString, of a size determined by the value of 
     * the HdrIPVersion property, representing a destination IP address. When 
     * there is no HdrDestAddressEndOfRange value, this value is compared to 
     * the destination address in the IP header, subject to the mask 
     * represented in the HdrDestMask property. (Note that the mask is ANDed 
     * with the address.) When there is a HdrDestAddressEndOfRange value, 
     * this value is the start of the specified range (i.e., the 
     * HdrDestAddress is lower than the HdrDestAddressEndOfRange) that is 
     * compared to the source address in the IP header and matches on any 
     * value in the range. If a value for this property is not provided, then 
     * the filter does not consider HdrDestAddress in selecting matching 
     * packets, i.e., HdrDestAddress matches for all values. 
     * 
     * @param	Byte[]	new HdrDestAddress property value
     * @exception	Exception	
     */
    public void setHdrDestAddress(Byte[] hdrDestAddress) {

    this.hdrDestAddress = hdrDestAddress;
    } // setHdrDestAddress


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HdrDestAddressEndOfRange. 
     */
    private Byte[] hdrDestAddressEndOfRange;
    /**
     * This method returns the IPHeadersFilter.HdrDestAddressEndOfRange 
     * property value. This property is described as follows: 
     * 
     * HdrDestAddressEndOfRange is an OctetString, of a size determined by the 
     * value of the HdrIPVersion property, representing the end of a range of 
     * destination IP addresses (inclusive), where the start of the range is 
     * the HdrDestAddress property value. If a value for HdrDestAddress is 
     * not provided, then this property also MUST NOT be provided. If a value 
     * for this property is provided, then HdrDestMask MUST NOT be provided. 
     * 
     * @return	Byte[]	current HdrDestAddressEndOfRange property 
     * value 
     * @exception	Exception	
     */
    public Byte[] getHdrDestAddressEndOfRange(){

    return this.hdrDestAddressEndOfRange;
    } // getHdrDestAddressEndOfRange

    /**
     * This method sets the IPHeadersFilter.HdrDestAddressEndOfRange property 
     * value. This property is described as follows: 
     * 
     * HdrDestAddressEndOfRange is an OctetString, of a size determined by the 
     * value of the HdrIPVersion property, representing the end of a range of 
     * destination IP addresses (inclusive), where the start of the range is 
     * the HdrDestAddress property value. If a value for HdrDestAddress is 
     * not provided, then this property also MUST NOT be provided. If a value 
     * for this property is provided, then HdrDestMask MUST NOT be provided. 
     * 
     * @param	Byte[]	new HdrDestAddressEndOfRange property value
     * @exception	Exception	
     */
    public void setHdrDestAddressEndOfRange(Byte[] hdrDestAddressEndOfRange) 
	{

    this.hdrDestAddressEndOfRange = hdrDestAddressEndOfRange;
    } // setHdrDestAddressEndOfRange


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HdrDestMask. 
     */
    private Byte[] hdrDestMask;
    /**
     * This method returns the IPHeadersFilter.HdrDestMask property value. 
     * This property is described as follows: 
     * 
     * HdrDestMask is an OctetString, of a size determined by the value of the 
     * HdrIPVersion property, representing a mask to be used in comparing the 
     * destination address in the IP header with the value represented in the 
     * HdrDestAddress property. If a value for this property is not provided, 
     * then the filter does not consider HdrDestMask in selecting matching 
     * packets, i.e., the value of the HdrDestAddress or the destination 
     * address range must match the destination address in the packet 
     * exactly. If a value for this property is provided, then 
     * HdrDestAddressEndOfRange MUST NOT be provided. 
     * 
     * @return	Byte[]	current HdrDestMask property value
     * @exception	Exception	
     */
    public Byte[] getHdrDestMask(){

    return this.hdrDestMask;
    } // getHdrDestMask

    /**
     * This method sets the IPHeadersFilter.HdrDestMask property value. This 
     * property is described as follows: 
     * 
     * HdrDestMask is an OctetString, of a size determined by the value of the 
     * HdrIPVersion property, representing a mask to be used in comparing the 
     * destination address in the IP header with the value represented in the 
     * HdrDestAddress property. If a value for this property is not provided, 
     * then the filter does not consider HdrDestMask in selecting matching 
     * packets, i.e., the value of the HdrDestAddress or the destination 
     * address range must match the destination address in the packet 
     * exactly. If a value for this property is provided, then 
     * HdrDestAddressEndOfRange MUST NOT be provided. 
     * 
     * @param	Byte[]	new HdrDestMask property value
     * @exception	Exception	
     */
    public void setHdrDestMask(Byte[] hdrDestMask) {

    this.hdrDestMask = hdrDestMask;
    } // setHdrDestMask


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HdrProtocolID. 
     */
    private Byte hdrProtocolID;
    /**
     * This method returns the IPHeadersFilter.HdrProtocolID property value. 
     * This property is described as follows: 
     * 
     * HdrProtocolID is an 8-bit unsigned integer, representing an IP protocol 
     * type. This value is compared to the Protocol field in the IP header. 
     * If a value for this property is not provided, then the filter does not 
     * consider HdrProtocolID in selecting matching packets, i.e., 
     * HdrProtocolID matches for all values. 
     * 
     * @return	Byte	current HdrProtocolID property value
     * @exception	Exception	
     */
    public Byte getHdrProtocolID(){

    return this.hdrProtocolID;
    } // getHdrProtocolID

    /**
     * This method sets the IPHeadersFilter.HdrProtocolID property value. This 
     * property is described as follows: 
     * 
     * HdrProtocolID is an 8-bit unsigned integer, representing an IP protocol 
     * type. This value is compared to the Protocol field in the IP header. 
     * If a value for this property is not provided, then the filter does not 
     * consider HdrProtocolID in selecting matching packets, i.e., 
     * HdrProtocolID matches for all values. 
     * 
     * @param	Byte	new HdrProtocolID property value
     * @exception	Exception	
     */
    public void setHdrProtocolID(Byte hdrProtocolID) {

    this.hdrProtocolID = hdrProtocolID;
    } // setHdrProtocolID


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HdrSrcPortStart. 
     */
    private short hdrSrcPortStart;
    /**
     * This method returns the IPHeadersFilter.HdrSrcPortStart property value. 
     * This property is described as follows: 
     * 
     * HdrSrcPortStart represents the lower end of a range of UDP or TCP 
     * source ports. The upper end of the range is represented by the 
     * HdrSrcPortEnd property. The value of HdrSrcPortStart MUST be no 
     * greater than the value of HdrSrcPortEnd. A source port filter is 
     * evaluated by testing whether the source port identified in the IP 
     * header falls within the range of values between HdrSrcPortStart and 
     * HdrSrcPortEnd, INCLUDING these two end points. If a value for this 
     * property is not provided, then the filter does not consider 
     * HdrSrcPortStart in selecting matching packets, i.e., there is no lower 
     * bound in matching source port values. 
     * 
     * @return	short	current HdrSrcPortStart property value
     * @exception	Exception	
     */
    public short getHdrSrcPortStart(){

    return this.hdrSrcPortStart;
    } // getHdrSrcPortStart

    /**
     * This method sets the IPHeadersFilter.HdrSrcPortStart property value. 
     * This property is described as follows: 
     * 
     * HdrSrcPortStart represents the lower end of a range of UDP or TCP 
     * source ports. The upper end of the range is represented by the 
     * HdrSrcPortEnd property. The value of HdrSrcPortStart MUST be no 
     * greater than the value of HdrSrcPortEnd. A source port filter is 
     * evaluated by testing whether the source port identified in the IP 
     * header falls within the range of values between HdrSrcPortStart and 
     * HdrSrcPortEnd, INCLUDING these two end points. If a value for this 
     * property is not provided, then the filter does not consider 
     * HdrSrcPortStart in selecting matching packets, i.e., there is no lower 
     * bound in matching source port values. 
     * 
     * @param	short	new HdrSrcPortStart property value
     * @exception	Exception	
     */
    public void setHdrSrcPortStart(short hdrSrcPortStart) {

    this.hdrSrcPortStart = hdrSrcPortStart;
    } // setHdrSrcPortStart


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HdrSrcPortEnd. 
     */
    private short hdrSrcPortEnd;
    /**
     * This method returns the IPHeadersFilter.HdrSrcPortEnd property value. 
     * This property is described as follows: 
     * 
     * HdrSrcPortEnd represents the upper end of a range of UDP or TCP source 
     * ports. The lower end of the range is represented by the 
     * HdrSrcPortStart property. The value of HdrSrcPortEnd MUST be no less 
     * than the value of HdrSrcPortStart. A single port is indicated by equal 
     * values for HdrSrcPortStart and HdrSrcPortEnd. A source port filter is 
     * evaluated by testing whether the source port identified in the IP 
     * header falls within the range of values between HdrSrcPortStart and 
     * HdrSrcPortEnd, INCLUDING these two end points. If a value for this 
     * property is not provided, then the filter does not consider 
     * HdrSrcPortEnd in selecting matching packets, i.e., there is no upper 
     * bound in matching source port values. 
     * 
     * @return	short	current HdrSrcPortEnd property value
     * @exception	Exception	
     */
    public short getHdrSrcPortEnd(){

    return this.hdrSrcPortEnd;
    } // getHdrSrcPortEnd

    /**
     * This method sets the IPHeadersFilter.HdrSrcPortEnd property value. This 
     * property is described as follows: 
     * 
     * HdrSrcPortEnd represents the upper end of a range of UDP or TCP source 
     * ports. The lower end of the range is represented by the 
     * HdrSrcPortStart property. The value of HdrSrcPortEnd MUST be no less 
     * than the value of HdrSrcPortStart. A single port is indicated by equal 
     * values for HdrSrcPortStart and HdrSrcPortEnd. A source port filter is 
     * evaluated by testing whether the source port identified in the IP 
     * header falls within the range of values between HdrSrcPortStart and 
     * HdrSrcPortEnd, INCLUDING these two end points. If a value for this 
     * property is not provided, then the filter does not consider 
     * HdrSrcPortEnd in selecting matching packets, i.e., there is no upper 
     * bound in matching source port values. 
     * 
     * @param	short	new HdrSrcPortEnd property value
     * @exception	Exception	
     */
    public void setHdrSrcPortEnd(short hdrSrcPortEnd) {

    this.hdrSrcPortEnd = hdrSrcPortEnd;
    } // setHdrSrcPortEnd


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HdrDestPortStart. 
     */
    private short hdrDestPortStart;
    /**
     * This method returns the IPHeadersFilter.HdrDestPortStart property 
     * value. This property is described as follows: 
     * 
     * HdrDestPortStart represents the lower end of a range of UDP or TCP 
     * destination ports. The upper end of the range is represented by the 
     * HdrDestPortEnd property. The value of HdrDestPortStart MUST be no 
     * greater than the value of HdrDestPortEnd. A single port is indicated 
     * by equal values for HdrDestPortStart and HdrDestPortEnd. A destination 
     * port filter is evaluated by testing whether the destination port 
     * identified in the IP header falls within the range of values between 
     * HdrDestPortStart and HdrDestPortEnd, INCLUDING these two end points. 
     * If a value for this property is not provided, then the filter does not 
     * consider HdrDestPortStart in selecting matching packets, i.e., there 
     * is no lower bound in matching destination port values. 
     * 
     * @return	short	current HdrDestPortStart property value
     * @exception	Exception	
     */
    public short getHdrDestPortStart(){

    return this.hdrDestPortStart;
    } // getHdrDestPortStart

    /**
     * This method sets the IPHeadersFilter.HdrDestPortStart property value. 
     * This property is described as follows: 
     * 
     * HdrDestPortStart represents the lower end of a range of UDP or TCP 
     * destination ports. The upper end of the range is represented by the 
     * HdrDestPortEnd property. The value of HdrDestPortStart MUST be no 
     * greater than the value of HdrDestPortEnd. A single port is indicated 
     * by equal values for HdrDestPortStart and HdrDestPortEnd. A destination 
     * port filter is evaluated by testing whether the destination port 
     * identified in the IP header falls within the range of values between 
     * HdrDestPortStart and HdrDestPortEnd, INCLUDING these two end points. 
     * If a value for this property is not provided, then the filter does not 
     * consider HdrDestPortStart in selecting matching packets, i.e., there 
     * is no lower bound in matching destination port values. 
     * 
     * @param	short	new HdrDestPortStart property value
     * @exception	Exception	
     */
    public void setHdrDestPortStart(short hdrDestPortStart) {

    this.hdrDestPortStart = hdrDestPortStart;
    } // setHdrDestPortStart


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HdrDestPortEnd. 
     */
    private short hdrDestPortEnd;
    /**
     * This method returns the IPHeadersFilter.HdrDestPortEnd property value. 
     * This property is described as follows: 
     * 
     * HdrDestPortEnd represents the upper end of a range of UDP or TCP 
     * destination ports. The lower end of the range is represented by the 
     * HdrDestPortStart property. The value of HdrDestPortEnd MUST be no less 
     * than the value of HdrDestPortStart. A single port is indicated by 
     * equal values for HdrDestPortStart and HdrDestPortEnd. A destination 
     * port filter is evaluated by testing whether the destination port 
     * identified in the IP header falls within the range of values between 
     * HdrDestPortStart and HdrDestPortEnd, INCLUDING these two end points. 
     * If a value for this property is not provided, then the filter does not 
     * consider HdrDestPortEnd in selecting matching packets, i.e., there is 
     * no upper bound in matching destination port values. 
     * 
     * @return	short	current HdrDestPortEnd property value
     * @exception	Exception	
     */
    public short getHdrDestPortEnd(){

    return this.hdrDestPortEnd;
    } // getHdrDestPortEnd

    /**
     * This method sets the IPHeadersFilter.HdrDestPortEnd property value. 
     * This property is described as follows: 
     * 
     * HdrDestPortEnd represents the upper end of a range of UDP or TCP 
     * destination ports. The lower end of the range is represented by the 
     * HdrDestPortStart property. The value of HdrDestPortEnd MUST be no less 
     * than the value of HdrDestPortStart. A single port is indicated by 
     * equal values for HdrDestPortStart and HdrDestPortEnd. A destination 
     * port filter is evaluated by testing whether the destination port 
     * identified in the IP header falls within the range of values between 
     * HdrDestPortStart and HdrDestPortEnd, INCLUDING these two end points. 
     * If a value for this property is not provided, then the filter does not 
     * consider HdrDestPortEnd in selecting matching packets, i.e., there is 
     * no upper bound in matching destination port values. 
     * 
     * @param	short	new HdrDestPortEnd property value
     * @exception	Exception	
     */
    public void setHdrDestPortEnd(short hdrDestPortEnd) {

    this.hdrDestPortEnd = hdrDestPortEnd;
    } // setHdrDestPortEnd


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HdrDSCP. 
     */
    private Byte[] hdrDSCP;
    /**
     * This method returns the IPHeadersFilter.HdrDSCP property value. This 
     * property is described as follows: 
     * 
     * HdrDSCP is defined as a set of discrete DiffServ code points, with no 
     * inherent structure. There is no semantically significant relationship 
     * between different HdrDSCPs. Consequently, there is no provision for 
     * specifying a range of HdrDSCPs. Since, in IPv4, the HdrDSCP field may 
     * contain bits to be interpreted as the TOS IP Precedence, this property 
     * is also used to filter on IP Precedence. Similarly, the IPv6 Traffic 
     * Class field is also filtered using the value(s) in this property. 
     * HdrDSCP is defined as an array, to provide the ability to specify 
     * several discrete DSCPs in a single instance of IPHeadersFilter, that 
     * would be OR'ed together to define the filter criteria. If a value for 
     * this property is not provided, then the filter does not consider 
     * HdrDSCP in selecting matching packets, i.e., HdrDSCP matches for all 
     * values. 
     * 
     * @return	Byte[]	current HdrDSCP property value
     * @exception	Exception	
     */
    public Byte[] getHdrDSCP(){

    return this.hdrDSCP;
    } // getHdrDSCP

    /**
     * This method sets the IPHeadersFilter.HdrDSCP property value. This 
     * property is described as follows: 
     * 
     * HdrDSCP is defined as a set of discrete DiffServ code points, with no 
     * inherent structure. There is no semantically significant relationship 
     * between different HdrDSCPs. Consequently, there is no provision for 
     * specifying a range of HdrDSCPs. Since, in IPv4, the HdrDSCP field may 
     * contain bits to be interpreted as the TOS IP Precedence, this property 
     * is also used to filter on IP Precedence. Similarly, the IPv6 Traffic 
     * Class field is also filtered using the value(s) in this property. 
     * HdrDSCP is defined as an array, to provide the ability to specify 
     * several discrete DSCPs in a single instance of IPHeadersFilter, that 
     * would be OR'ed together to define the filter criteria. If a value for 
     * this property is not provided, then the filter does not consider 
     * HdrDSCP in selecting matching packets, i.e., HdrDSCP matches for all 
     * values. 
     * 
     * @param	Byte[]	new HdrDSCP property value
     * @exception	Exception	
     */
    public void setHdrDSCP(Byte[] hdrDSCP) {

    this.hdrDSCP = hdrDSCP;
    } // setHdrDSCP


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HdrFlowLabel. 
     */
    private Byte[] hdrFlowLabel;
    /**
     * This method returns the IPHeadersFilter.HdrFlowLabel property value. 
     * This property is described as follows: 
     * 
     * The 20-bit Flow Label field in the IPv6 header may be used by a source 
     * to label sequences of packets for which it requests special handling 
     * by the IPv6 devices, such as non-default quality of service or 
     * 'real-time' service. In the filter, this 20-bit string is encoded in a 
     * 24-bit octetstring by right-adjusting the value and padding on the 
     * left with b'0000'. If a value for this property is not provided, then 
     * the filter does not consider HdrFlowLabel in selecting matching 
     * packets, i.e., HdrFlowLabel matches for all values. 
     * 
     * @return	Byte[]	current HdrFlowLabel property value
     * @exception	Exception	
     */
    public Byte[] getHdrFlowLabel(){

    return this.hdrFlowLabel;
    } // getHdrFlowLabel

    /**
     * This method sets the IPHeadersFilter.HdrFlowLabel property value. This 
     * property is described as follows: 
     * 
     * The 20-bit Flow Label field in the IPv6 header may be used by a source 
     * to label sequences of packets for which it requests special handling 
     * by the IPv6 devices, such as non-default quality of service or 
     * 'real-time' service. In the filter, this 20-bit string is encoded in a 
     * 24-bit octetstring by right-adjusting the value and padding on the 
     * left with b'0000'. If a value for this property is not provided, then 
     * the filter does not consider HdrFlowLabel in selecting matching 
     * packets, i.e., HdrFlowLabel matches for all values. 
     * 
     * @param	Byte[]	new HdrFlowLabel property value
     * @exception	Exception	
     */
    public void setHdrFlowLabel(Byte[] hdrFlowLabel) {

    this.hdrFlowLabel = hdrFlowLabel;
    } // setHdrFlowLabel



} // Class IPHeadersFilter
