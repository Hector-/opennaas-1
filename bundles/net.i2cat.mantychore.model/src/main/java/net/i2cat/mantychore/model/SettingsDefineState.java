/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 03 
 * 14:18:55 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class SettingsDefineState as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * SettingsDefineStateBean Interface. The CIM class SettingsDefineState is 
 * described as follows: 
 * 
 * SettingsDefineState is used to associate an instance of SettingData with an 
 * instance of ManagedElement. This association indicates that the 
 * SettingData instance provides additional information about the Current 
 * State of the associated ManagedElement. State is broadly defined to 
 * include the configuration, status, capabilities, and other information of 
 * an instance. Use of the same instance of SettingData to represent more 
 * than one of Current State (SettingsDefineState) and Desired State 
 * (ElementSettingData) and Possible State (SettingsDefineCapabilities) for a 
 * ManagedElement is not recommended. 
 */
public class SettingsDefineState  implements Serializable {

    /**
     * This constructor creates a SettingsDefineStateBeanImpl Class which 
     * implements the SettingsDefineStateBean Interface, and encapsulates the 
     * CIM class SettingsDefineState in a Java Bean. The CIM class 
     * SettingsDefineState is described as follows: 
     * 
     * SettingsDefineState is used to associate an instance of SettingData 
     * with an instance of ManagedElement. This association indicates that 
     * the SettingData instance provides additional information about the 
     * Current State of the associated ManagedElement. State is broadly 
     * defined to include the configuration, status, capabilities, and other 
     * information of an instance. Use of the same instance of SettingData to 
     * represent more than one of Current State (SettingsDefineState) and 
     * Desired State (ElementSettingData) and Possible State 
     * (SettingsDefineCapabilities) for a ManagedElement is not recommended. 
     */
    public SettingsDefineState(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ManagedElement. 
     */
    private ManagedElement managedElement;
    /**
     * This method returns the SettingsDefineState.ManagedElement property 
     * value. This property is described as follows: 
     * 
     * The managed element.
     * 
     * @return	CIM_ManagedElement	current ManagedElement 
     * property value 
     * @exception	Exception	
     */
    public ManagedElement getManagedElement(){

    return this.managedElement;
    } // getManagedElement

    /**
     * This method sets the SettingsDefineState.ManagedElement property value. 
     * This property is described as follows: 
     * 
     * The managed element.
     * 
     * @param	CIM_ManagedElement	new ManagedElement property 
     * value 
     * @exception	Exception	
     */
    public void setManagedElement(ManagedElement managedElement) {

    this.managedElement = managedElement;
    } // setManagedElement


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SettingData. 
     */
    private SettingData settingData;
    /**
     * This method returns the SettingsDefineState.SettingData property value. 
     * This property is described as follows: 
     * 
     * The SettingData object that provides additional information about the 
     * current state and configuration of the ManagedElement. 
     * 
     * @return	CIM_SettingData	current SettingData property 
     * value 
     * @exception	Exception	
     */
    public SettingData getSettingData(){

    return this.settingData;
    } // getSettingData

    /**
     * This method sets the SettingsDefineState.SettingData property value. 
     * This property is described as follows: 
     * 
     * The SettingData object that provides additional information about the 
     * current state and configuration of the ManagedElement. 
     * 
     * @param	CIM_SettingData	new SettingData property value
     * @exception	Exception	
     */
    public void setSettingData(SettingData settingData) {

    this.settingData = settingData;
    } // setSettingData



} // Class SettingsDefineState
