/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 10:54:51 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class IPSOFilterEntry as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * IPSOFilterEntryBean Interface. The CIM class IPSOFilterEntry is described 
 * as follows: 
 * 
 * An IPSOFilterEntry is used to match traffic based on the IP Security 
 * Options header values (ClassificationLevel and ProtectionAuthority) as 
 * defined in RFC1108. This type of FilterEntry is used to adjust the IPsec 
 * encryption level according to the IPSO classification of the traffic 
 * (e.g., secret, confidential, restricted, etc.). 
 */
public class IPSOFilterEntry extends FilterEntryBase implements Serializable 
    {

    /**
     * This constructor creates a IPSOFilterEntryBeanImpl Class which 
     * implements the IPSOFilterEntryBean Interface, and encapsulates the CIM 
     * class IPSOFilterEntry in a Java Bean. The CIM class IPSOFilterEntry is 
     * described as follows: 
     * 
     * An IPSOFilterEntry is used to match traffic based on the IP Security 
     * Options header values (ClassificationLevel and ProtectionAuthority) as 
     * defined in RFC1108. This type of FilterEntry is used to adjust the 
     * IPsec encryption level according to the IPSO classification of the 
     * traffic (e.g., secret, confidential, restricted, etc.). 
     */
    public IPSOFilterEntry(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MatchConditionType. 
     */

    public enum MatchConditionType{
    CLASSIFICATION_LEVEL,
    PROTECTION_AUTHORITY,
    BOTH_CLASSIFICATION_LEVEL_AND_PROTECTION_AUTHORITY
    }MatchConditionType matchConditionType;
    /**
     * This method returns the IPSOFilterEntry.MatchConditionType property 
     * value. This property is described as follows: 
     * 
     * MatchConditionType specifies whether to match based on traffic 
     * classification level, protection authority or both. Note that this 
     * enumeration is modified from its definition in the IETF's IPSP Policy 
     * Model to allow for both classification level and protection authority 
     * checking, and to allow the enumerated value, "Other", to be added in 
     * the future. 
     * 
     * @return	short	current MatchConditionType property value
     * @exception	Exception	
     */
    public MatchConditionType getMatchConditionType(){

    return this.matchConditionType;
    } // getMatchConditionType

    /**
     * This method sets the IPSOFilterEntry.MatchConditionType property value. 
     * This property is described as follows: 
     * 
     * MatchConditionType specifies whether to match based on traffic 
     * classification level, protection authority or both. Note that this 
     * enumeration is modified from its definition in the IETF's IPSP Policy 
     * Model to allow for both classification level and protection authority 
     * checking, and to allow the enumerated value, "Other", to be added in 
     * the future. 
     * 
     * @param	short	new MatchConditionType property value
     * @exception	Exception	
     */
    public void setMatchConditionType(MatchConditionType 
	matchConditionType){

    this.matchConditionType = matchConditionType;
    } // setMatchConditionType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ClassificationLevel. 
     */

    public enum ClassificationLevel{
    OTHER,
    NO_FILTERING_ON_CLASSIFICATION_LEVEL,
    TOP_SECRET,
    SECRET,
    CONFIDENTIAL,
    UNCLASSIFIED,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }ClassificationLevel classificationLevel;
    /**
     * This method returns the IPSOFilterEntry.ClassificationLevel property 
     * value. This property is described as follows: 
     * 
     * This is the value to be matched when MatchConditionType is 1 or 3 - 
     * meaning that "Classification Level" should be filtered. In RFC1108, 
     * the following semantics are specified: TopSecret, Secret, 
     * Confidential, and Unclassified. Note that this enumeration's values 
     * are different than the RFC list and the IETF's IPSP Policy Model since 
     * those lists are simply bit maps, and do not include specific values 
     * for "Other" or "No Filtering". 
     * 
     * @return	short	current ClassificationLevel property value
     * @exception	Exception	
     */
    public ClassificationLevel getClassificationLevel(){

    return this.classificationLevel;
    } // getClassificationLevel

    /**
     * This method sets the IPSOFilterEntry.ClassificationLevel property 
     * value. This property is described as follows: 
     * 
     * This is the value to be matched when MatchConditionType is 1 or 3 - 
     * meaning that "Classification Level" should be filtered. In RFC1108, 
     * the following semantics are specified: TopSecret, Secret, 
     * Confidential, and Unclassified. Note that this enumeration's values 
     * are different than the RFC list and the IETF's IPSP Policy Model since 
     * those lists are simply bit maps, and do not include specific values 
     * for "Other" or "No Filtering". 
     * 
     * @param	short	new ClassificationLevel property value
     * @exception	Exception	
     */
    public void setClassificationLevel(ClassificationLevel 
	classificationLevel){

    this.classificationLevel = classificationLevel;
    } // setClassificationLevel


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherClassificationLevel. 
     */
    private String otherClassificationLevel;
    /**
     * This method returns the IPSOFilterEntry.OtherClassificationLevel 
     * property value. This property is described as follows: 
     * 
     * Description of the level when the value 1 ("Other") is specified for 
     * the property, ClassificationLevel. 
     * 
     * @return	String	current OtherClassificationLevel property 
     * value 
     * @exception	Exception	
     */
    public String getOtherClassificationLevel(){

    return this.otherClassificationLevel;
    } // getOtherClassificationLevel

    /**
     * This method sets the IPSOFilterEntry.OtherClassificationLevel property 
     * value. This property is described as follows: 
     * 
     * Description of the level when the value 1 ("Other") is specified for 
     * the property, ClassificationLevel. 
     * 
     * @param	String	new OtherClassificationLevel property value
     * @exception	Exception	
     */
    public void setOtherClassificationLevel(String otherClassificationLevel) 
	{

    this.otherClassificationLevel = otherClassificationLevel;
    } // setOtherClassificationLevel


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ProtectionAuthorities. 
     */

    public enum ProtectionAuthorities{
    OTHER,
    NO_FILTERING_ON_PROTECTION_AUTHORITY,
    GENSER,
    SIOP_ESI,
    SCI,
    NSA,
    DOE,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }ProtectionAuthorities protectionAuthorities;
    /**
     * This method returns the IPSOFilterEntry.ProtectionAuthorities property 
     * value. This property is described as follows: 
     * 
     * These are the values to be matched when MatchConditionType is 2 or 3 - 
     * meaning that "Protection Authority" should be filtered. In RFC1108, 
     * the following authorities are specified: GENSER, SIOP-ESI, SCI, NSA 
     * and DOE. Note that multiple authorities may be specified. This 
     * enumeration is modified from its definition in the RFC and IETF's IPSP 
     * Policy Model. Those lists are simply bit maps, and do not include 
     * specific values for "Other" or "No Filtering". 
     * 
     * @return	short	current ProtectionAuthorities property 
     * value 
     * @exception	Exception	
     */
    public ProtectionAuthorities getProtectionAuthorities(){

    return this.protectionAuthorities;
    } // getProtectionAuthorities

    /**
     * This method sets the IPSOFilterEntry.ProtectionAuthorities property 
     * value. This property is described as follows: 
     * 
     * These are the values to be matched when MatchConditionType is 2 or 3 - 
     * meaning that "Protection Authority" should be filtered. In RFC1108, 
     * the following authorities are specified: GENSER, SIOP-ESI, SCI, NSA 
     * and DOE. Note that multiple authorities may be specified. This 
     * enumeration is modified from its definition in the RFC and IETF's IPSP 
     * Policy Model. Those lists are simply bit maps, and do not include 
     * specific values for "Other" or "No Filtering". 
     * 
     * @param	short	new ProtectionAuthorities property value
     * @exception	Exception	
     */
    public void setProtectionAuthorities(ProtectionAuthorities 
	protectionAuthorities){

    this.protectionAuthorities = protectionAuthorities;
    } // setProtectionAuthorities


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherProtectionAuthorities. 
     */
    private String[] otherProtectionAuthorities;
    /**
     * This method returns the IPSOFilterEntry.OtherProtectionAuthorities 
     * property value. This property is described as follows: 
     * 
     * Description of the authority when the value 1 ("Other") is specified 
     * for the property, ProtectionAuthorities. 
     * 
     * @return	String[]	current OtherProtectionAuthorities 
     * property value 
     * @exception	Exception	
     */
    public String[] getOtherProtectionAuthorities(){

    return this.otherProtectionAuthorities;
    } // getOtherProtectionAuthorities

    /**
     * This method sets the IPSOFilterEntry.OtherProtectionAuthorities 
     * property value. This property is described as follows: 
     * 
     * Description of the authority when the value 1 ("Other") is specified 
     * for the property, ProtectionAuthorities. 
     * 
     * @param	String[]	new OtherProtectionAuthorities property 
     * value 
     * @exception	Exception	
     */
    public void setOtherProtectionAuthorities(String[] 
	otherProtectionAuthorities) {

    this.otherProtectionAuthorities = otherProtectionAuthorities;
    } // setOtherProtectionAuthorities



} // Class IPSOFilterEntry
