/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 15:29:20 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class ResourceAllocationSettingData as well as methods 
 * comparable to the invokeMethods defined for this class. This Class 
 * implements the ResourceAllocationSettingDataBean Interface. The CIM class 
 * ResourceAllocationSettingData is described as follows: 
 * 
 * The ResourceAllocationSettingData class represents settings specifically 
 * related to an allocated resource that are outside the scope of the CIM 
 * class typically used to represent the resource itself. These settings 
 * include information specific to the allocation that may not be visible to 
 * the consumer of the resource itself. For example, a virtual processor may 
 * look like a 2 ghz processor to the consumer (virtual computer system), 
 * however the virtualization system may use time-slicing to schedule the the 
 * virtual processor to only allow it to use 1 ghz. 
 */
public class ResourceAllocationSettingData extends SettingData implements 
    Serializable {

    /**
     * This constructor creates a ResourceAllocationSettingDataBeanImpl Class 
     * which implements the ResourceAllocationSettingDataBean Interface, and 
     * encapsulates the CIM class ResourceAllocationSettingData in a Java 
     * Bean. The CIM class ResourceAllocationSettingData is described as 
     * follows: 
     * 
     * The ResourceAllocationSettingData class represents settings 
     * specifically related to an allocated resource that are outside the 
     * scope of the CIM class typically used to represent the resource 
     * itself. These settings include information specific to the allocation 
     * that may not be visible to the consumer of the resource itself. For 
     * example, a virtual processor may look like a 2 ghz processor to the 
     * consumer (virtual computer system), however the virtualization system 
     * may use time-slicing to schedule the the virtual processor to only 
     * allow it to use 1 ghz. 
     */
    public ResourceAllocationSettingData(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ResourceType. 
     */

    public enum ResourceType{
    OTHER,
    COMPUTER_SYSTEM,
    PROCESSOR,
    MEMORY,
    IDE_CONTROLLER,
    PARALLEL_SCSI_HBA,
    FC_HBA,
    ISCSI_HBA,
    IB_HCA,
    ETHERNET_ADAPTER,
    OTHER_NETWORK_ADAPTER,
    I_O_SLOT,
    I_O_DEVICE,
    FLOPPY_DRIVE,
    CD_DRIVE,
    DVD_DRIVE,
    DISK_DRIVE,
    TAPE_DRIVE,
    STORAGE_EXTENT,
    OTHER_STORAGE_DEVICE,
    SERIAL_PORT,
    PARALLEL_PORT,
    USB_CONTROLLER,
    GRAPHICS_CONTROLLER,
    IEEE_1394_CONTROLLER,
    PARTITIONABLE_UNIT,
    BASE_PARTITIONABLE_UNIT,
    POWER,
    COOLING_CAPACITY,
    ETHERNET_SWITCH_PORT,
    LOGICAL_DISK,
    STORAGE_VOLUME,
    ETHERNET_CONNECTION,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }
 public ResourceType resourceType;
    /**
     * This method returns the ResourceAllocationSettingData.ResourceType 
     * property value. This property is described as follows: 
     * 
     * The type of resource this allocation setting represents.
     * 
     * @return	short	current ResourceType property value
     * @exception	Exception	
     */
    public ResourceType getResourceType(){

    return this.resourceType;
    } // getResourceType

    /**
     * This method sets the ResourceAllocationSettingData.ResourceType 
     * property value. This property is described as follows: 
     * 
     * The type of resource this allocation setting represents.
     * 
     * @param	short	new ResourceType property value
     * @exception	Exception	
     */
    public void setResourceType(ResourceType resourceType){

    this.resourceType = resourceType;
    } // setResourceType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherResourceType. 
     */
    private String otherResourceType;
    /**
     * This method returns the ResourceAllocationSettingData.OtherResourceType 
     * property value. This property is described as follows: 
     * 
     * A string that describes the resource type when a well defined value is 
     * not available and ResourceType has the value "Other". 
     * 
     * @return	String	current OtherResourceType property value
     * @exception	Exception	
     */
    public String getOtherResourceType(){

    return this.otherResourceType;
    } // getOtherResourceType

    /**
     * This method sets the ResourceAllocationSettingData.OtherResourceType 
     * property value. This property is described as follows: 
     * 
     * A string that describes the resource type when a well defined value is 
     * not available and ResourceType has the value "Other". 
     * 
     * @param	String	new OtherResourceType property value
     * @exception	Exception	
     */
    public void setOtherResourceType(String otherResourceType) {

    this.otherResourceType = otherResourceType;
    } // setOtherResourceType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ResourceSubType. 
     */
    private String resourceSubType;
    /**
     * This method returns the ResourceAllocationSettingData.ResourceSubType 
     * property value. This property is described as follows: 
     * 
     * A string describing an implementation specific sub-type for this 
     * resource. For example, this may be used to distinguish different 
     * models of the same resource type.The property value shall conform to 
     * this format (in ABNF): vs-type = dmtf-value / other-org-value / 
     * legacy-value dmtf-value = "DMTF:" defining-org ":" org-vs-type 
     * org-value = defining-org ":" org-vs-type Where: dmtf-value: is a 
     * property value defined by DMTF and is defined in the description of 
     * this property. other-org-value: is a property value defined by a 
     * business entity other than DMTF and is not defined in the description 
     * of this property. legacy-value: is a property value defined by a 
     * business entity other than DMTF and is not defined in the description 
     * of this property. These values are permitted but recommended to be 
     * deprecated over time. defining-org: is an identifier for the business 
     * entity that defines the virtual system type. It shall include a 
     * copyrighted, trademarked, or otherwise unique name that is owned by 
     * that business entity. It shall not be "DMTF" and shall not contain a 
     * colon (:). org-vs-type: is an identifier for the virtual system type 
     * within the defining business entity. It shall be unique within the 
     * defining-org. It may use any character allowed for CIM strings, except 
     * for the following: U0000-U001F (Unicode C0 controls) U0020 (space), 
     * note that the reason is that OVF allows for multiple space-separated 
     * vs-type values in this property. U007F (Unicode C0 controls) 
     * U0080-U009F (Unicode C1 controls) If there is a need to structure the 
     * value into segments, the segments should be separated with a single 
     * colon (:). The values of this property shall be processed case 
     * sensitively. They are intended to be processed programmatically 
     * (instead of being a display name) and should be short. The following 
     * DMTF values are defined: DMTF:unknown - the resource sub-type is 
     * unknown or cannot be determined Developers should consult the relevant 
     * profile for defined values. 
     * 
     * @return	String	current ResourceSubType property value
     * @exception	Exception	
     */
    public String getResourceSubType(){

    return this.resourceSubType;
    } // getResourceSubType

    /**
     * This method sets the ResourceAllocationSettingData.ResourceSubType 
     * property value. This property is described as follows: 
     * 
     * A string describing an implementation specific sub-type for this 
     * resource. For example, this may be used to distinguish different 
     * models of the same resource type.The property value shall conform to 
     * this format (in ABNF): vs-type = dmtf-value / other-org-value / 
     * legacy-value dmtf-value = "DMTF:" defining-org ":" org-vs-type 
     * org-value = defining-org ":" org-vs-type Where: dmtf-value: is a 
     * property value defined by DMTF and is defined in the description of 
     * this property. other-org-value: is a property value defined by a 
     * business entity other than DMTF and is not defined in the description 
     * of this property. legacy-value: is a property value defined by a 
     * business entity other than DMTF and is not defined in the description 
     * of this property. These values are permitted but recommended to be 
     * deprecated over time. defining-org: is an identifier for the business 
     * entity that defines the virtual system type. It shall include a 
     * copyrighted, trademarked, or otherwise unique name that is owned by 
     * that business entity. It shall not be "DMTF" and shall not contain a 
     * colon (:). org-vs-type: is an identifier for the virtual system type 
     * within the defining business entity. It shall be unique within the 
     * defining-org. It may use any character allowed for CIM strings, except 
     * for the following: U0000-U001F (Unicode C0 controls) U0020 (space), 
     * note that the reason is that OVF allows for multiple space-separated 
     * vs-type values in this property. U007F (Unicode C0 controls) 
     * U0080-U009F (Unicode C1 controls) If there is a need to structure the 
     * value into segments, the segments should be separated with a single 
     * colon (:). The values of this property shall be processed case 
     * sensitively. They are intended to be processed programmatically 
     * (instead of being a display name) and should be short. The following 
     * DMTF values are defined: DMTF:unknown - the resource sub-type is 
     * unknown or cannot be determined Developers should consult the relevant 
     * profile for defined values. 
     * 
     * @param	String	new ResourceSubType property value
     * @exception	Exception	
     */
    public void setResourceSubType(String resourceSubType) {

    this.resourceSubType = resourceSubType;
    } // setResourceSubType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PoolID. 
     */
    private String poolID;
    /**
     * This method returns the ResourceAllocationSettingData.PoolID property 
     * value. This property is described as follows: 
     * 
     * This property specifies which ResourcePool the resource is currently 
     * allocated from, or which ResourcePool the resource will be allocated 
     * from when the allocation occurs. 
     * 
     * @return	String	current PoolID property value
     * @exception	Exception	
     */
    public String getPoolID(){

    return this.poolID;
    } // getPoolID

    /**
     * This method sets the ResourceAllocationSettingData.PoolID property 
     * value. This property is described as follows: 
     * 
     * This property specifies which ResourcePool the resource is currently 
     * allocated from, or which ResourcePool the resource will be allocated 
     * from when the allocation occurs. 
     * 
     * @param	String	new PoolID property value
     * @exception	Exception	
     */
    public void setPoolID(String poolID) {

    this.poolID = poolID;
    } // setPoolID


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ConsumerVisibility. 
     */

    public enum ConsumerVisibility{
    UNKNOWN,
    PASSED_THROUGH,
    VIRTUALIZED,
    NOT_REPRESENTED,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }
 public ConsumerVisibility consumerVisibility;
    /**
     * This method returns the 
     * ResourceAllocationSettingData.ConsumerVisibility property value. This 
     * property is described as follows: 
     * 
     * Describes the consumers visibility to the allocated resource. A value 
     * of "Passed-Through" indicates the underlying or host resource is 
     * utilized and passed through to the consumer, possibly using 
     * partitioning. At least one item shall be present in the HostResource 
     * property. A value of "Virtualized" indicates the resource is 
     * virtualized and may not map directly to an underlying/host resource. 
     * Some implementations may support specific assignment for virtualized 
     * resources, in which case the host resource(s) are exposed using the 
     * HostResource property. A value of "Not represented" indicates a 
     * representation of the resource does not exist within the context of 
     * the resource consumer. 
     * 
     * @return	short	current ConsumerVisibility property value
     * @exception	Exception	
     */
    public ConsumerVisibility getConsumerVisibility(){

    return this.consumerVisibility;
    } // getConsumerVisibility

    /**
     * This method sets the ResourceAllocationSettingData.ConsumerVisibility 
     * property value. This property is described as follows: 
     * 
     * Describes the consumers visibility to the allocated resource. A value 
     * of "Passed-Through" indicates the underlying or host resource is 
     * utilized and passed through to the consumer, possibly using 
     * partitioning. At least one item shall be present in the HostResource 
     * property. A value of "Virtualized" indicates the resource is 
     * virtualized and may not map directly to an underlying/host resource. 
     * Some implementations may support specific assignment for virtualized 
     * resources, in which case the host resource(s) are exposed using the 
     * HostResource property. A value of "Not represented" indicates a 
     * representation of the resource does not exist within the context of 
     * the resource consumer. 
     * 
     * @param	short	new ConsumerVisibility property value
     * @exception	Exception	
     */
    public void setConsumerVisibility(ConsumerVisibility 
	consumerVisibility){

    this.consumerVisibility = consumerVisibility;
    } // setConsumerVisibility


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HostResource. 
     */
    private String[] hostResource;
    /**
     * This method returns the ResourceAllocationSettingData.HostResource 
     * property value. This property is described as follows: 
     * 
     * This property exposes specific assignment of resources. Each non-null 
     * value of the HostResource property shall be formated as a URI per 
     * RFC3986. If this resource is modeled then a value should be a WBEM URI 
     * (DSP0207). If the resource is not modeled then see the appropriate 
     * profile. Profiles may further constrain the type of URI. A NULL value 
     * or empty array requests the implementation decide the kind of host 
     * resource. If the virtual resource is mapped to more than oneunderlying 
     * resource, this property may be left NULL. If NULL, the 
     * DeviceAllocatedFromPool or ResourceAllocationFromPool associations may 
     * be used to determine the pool of host resources this virtual resource 
     * may use. If specific assignment is utilized, all underlying resources 
     * used by this virtual resource should be listed.The kind of dependency 
     * is specified by the ConsumerVisibility and the MappingBehavior 
     * properties. Typically the array contains one item, however multiple 
     * host resources may be specified. A client may set the value(s) to 
     * indicate that the requested virtual resource allocation be based on 
     * host resources that are identified by element values. 
     * 
     * @return	String[]	current HostResource property value
     * @exception	Exception	
     */
    public String[] getHostResource(){

    return this.hostResource;
    } // getHostResource

    /**
     * This method sets the ResourceAllocationSettingData.HostResource 
     * property value. This property is described as follows: 
     * 
     * This property exposes specific assignment of resources. Each non-null 
     * value of the HostResource property shall be formated as a URI per 
     * RFC3986. If this resource is modeled then a value should be a WBEM URI 
     * (DSP0207). If the resource is not modeled then see the appropriate 
     * profile. Profiles may further constrain the type of URI. A NULL value 
     * or empty array requests the implementation decide the kind of host 
     * resource. If the virtual resource is mapped to more than oneunderlying 
     * resource, this property may be left NULL. If NULL, the 
     * DeviceAllocatedFromPool or ResourceAllocationFromPool associations may 
     * be used to determine the pool of host resources this virtual resource 
     * may use. If specific assignment is utilized, all underlying resources 
     * used by this virtual resource should be listed.The kind of dependency 
     * is specified by the ConsumerVisibility and the MappingBehavior 
     * properties. Typically the array contains one item, however multiple 
     * host resources may be specified. A client may set the value(s) to 
     * indicate that the requested virtual resource allocation be based on 
     * host resources that are identified by element values. 
     * 
     * @param	String[]	new HostResource property value
     * @exception	Exception	
     */
    public void setHostResource(String[] hostResource) {

    this.hostResource = hostResource;
    } // setHostResource


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AllocationUnits. 
     */
    private String allocationUnits;
    /**
     * This method returns the ResourceAllocationSettingData.AllocationUnits 
     * property value. This property is described as follows: 
     * 
     * This property specifies the units of allocation used by the Reservation 
     * and Limit properties. For example, when ResourceType=Processor, 
     * AllocationUnits may be set to hertz*10^6 or percent. When 
     * ResourceType=Memory, AllocationUnits may be set to bytes*10^3. It is 
     * expected that profiles constrain the units that apply in context of 
     * particular resource types. The value of this property shall be a legal 
     * value of the Programmatic Units qualifier as defined in Annex C.1 of 
     * DSP0004 V2.5 or later. 
     * 
     * @return	String	current AllocationUnits property value
     * @exception	Exception	
     */
    public String getAllocationUnits(){

    return this.allocationUnits;
    } // getAllocationUnits

    /**
     * This method sets the ResourceAllocationSettingData.AllocationUnits 
     * property value. This property is described as follows: 
     * 
     * This property specifies the units of allocation used by the Reservation 
     * and Limit properties. For example, when ResourceType=Processor, 
     * AllocationUnits may be set to hertz*10^6 or percent. When 
     * ResourceType=Memory, AllocationUnits may be set to bytes*10^3. It is 
     * expected that profiles constrain the units that apply in context of 
     * particular resource types. The value of this property shall be a legal 
     * value of the Programmatic Units qualifier as defined in Annex C.1 of 
     * DSP0004 V2.5 or later. 
     * 
     * @param	String	new AllocationUnits property value
     * @exception	Exception	
     */
    public void setAllocationUnits(String allocationUnits) {

    this.allocationUnits = allocationUnits;
    } // setAllocationUnits


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property VirtualQuantity. 
     */
    private long virtualQuantity;
    /**
     * This method returns the ResourceAllocationSettingData.VirtualQuantity 
     * property value. This property is described as follows: 
     * 
     * This property specifies the quantity of resources presented to the 
     * consumer. For example, when ResourceType=Processor, this property 
     * would reflect the number of discrete Processors presented to the 
     * virtual computer system. When ResourceType=Memory, this property could 
     * reflect the number of MB reported to the virtual computer system. The 
     * value of the VirtualQuantity property should be expressed in units as 
     * defined by the value of the VirtualQuantityUnits property. 
     * 
     * @return	long	current VirtualQuantity property value
     * @exception	Exception	
     */
    public long getVirtualQuantity(){

    return this.virtualQuantity;
    } // getVirtualQuantity

    /**
     * This method sets the ResourceAllocationSettingData.VirtualQuantity 
     * property value. This property is described as follows: 
     * 
     * This property specifies the quantity of resources presented to the 
     * consumer. For example, when ResourceType=Processor, this property 
     * would reflect the number of discrete Processors presented to the 
     * virtual computer system. When ResourceType=Memory, this property could 
     * reflect the number of MB reported to the virtual computer system. The 
     * value of the VirtualQuantity property should be expressed in units as 
     * defined by the value of the VirtualQuantityUnits property. 
     * 
     * @param	long	new VirtualQuantity property value
     * @exception	Exception	
     */
    public void setVirtualQuantity(long virtualQuantity) {

    this.virtualQuantity = virtualQuantity;
    } // setVirtualQuantity


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Reservation. 
     */
    private long reservation;
    /**
     * This method returns the ResourceAllocationSettingData.Reservation 
     * property value. This property is described as follows: 
     * 
     * This property specifies the amount of resource guaranteed to be 
     * available for this allocation. On system which support over-commitment 
     * of resources, this value is typically used for admission control to 
     * prevent an an allocation from being accepted thus preventing 
     * starvation. The value of the Reservation property is expressed in the 
     * unit specified by the value of the AllocationUnits property. 
     * 
     * @return	long	current Reservation property value
     * @exception	Exception	
     */
    public long getReservation(){

    return this.reservation;
    } // getReservation

    /**
     * This method sets the ResourceAllocationSettingData.Reservation property 
     * value. This property is described as follows: 
     * 
     * This property specifies the amount of resource guaranteed to be 
     * available for this allocation. On system which support over-commitment 
     * of resources, this value is typically used for admission control to 
     * prevent an an allocation from being accepted thus preventing 
     * starvation. The value of the Reservation property is expressed in the 
     * unit specified by the value of the AllocationUnits property. 
     * 
     * @param	long	new Reservation property value
     * @exception	Exception	
     */
    public void setReservation(long reservation) {

    this.reservation = reservation;
    } // setReservation


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Limit. 
     */
    private long limit;
    /**
     * This method returns the ResourceAllocationSettingData.Limit property 
     * value. This property is described as follows: 
     * 
     * This property specifies the upper bound, or maximum amount of resource 
     * that will be granted for this allocation. For example, a system which 
     * supports memory paging may support setting the Limit of a Memory 
     * allocation below that of the VirtualQuantity, thus forcing paging to 
     * occur for this allocation. The value of the Limit property is 
     * expressed in the unit specified by the value of the AllocationUnits 
     * property. 
     * 
     * @return	long	current Limit property value
     * @exception	Exception	
     */
    public long getLimit(){

    return this.limit;
    } // getLimit

    /**
     * This method sets the ResourceAllocationSettingData.Limit property 
     * value. This property is described as follows: 
     * 
     * This property specifies the upper bound, or maximum amount of resource 
     * that will be granted for this allocation. For example, a system which 
     * supports memory paging may support setting the Limit of a Memory 
     * allocation below that of the VirtualQuantity, thus forcing paging to 
     * occur for this allocation. The value of the Limit property is 
     * expressed in the unit specified by the value of the AllocationUnits 
     * property. 
     * 
     * @param	long	new Limit property value
     * @exception	Exception	
     */
    public void setLimit(long limit) {

    this.limit = limit;
    } // setLimit


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Weight. 
     */
    private int weight;
    /**
     * This method returns the ResourceAllocationSettingData.Weight property 
     * value. This property is described as follows: 
     * 
     * This property specifies a relative priority for this allocation in 
     * relation to other allocations from the same ResourcePool. This 
     * property has no unit of measure, and is only relevant when compared to 
     * other allocations vying for the same host resources. 
     * 
     * @return	int	current Weight property value
     * @exception	Exception	
     */
    public int getWeight(){

    return this.weight;
    } // getWeight

    /**
     * This method sets the ResourceAllocationSettingData.Weight property 
     * value. This property is described as follows: 
     * 
     * This property specifies a relative priority for this allocation in 
     * relation to other allocations from the same ResourcePool. This 
     * property has no unit of measure, and is only relevant when compared to 
     * other allocations vying for the same host resources. 
     * 
     * @param	int	new Weight property value
     * @exception	Exception	
     */
    public void setWeight(int weight) {

    this.weight = weight;
    } // setWeight


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AutomaticAllocation. 
     */
    private boolean automaticAllocation;
    /**
     * This method returns the 
     * ResourceAllocationSettingData.AutomaticAllocation property value. This 
     * property is described as follows: 
     * 
     * This property specifies if the resource will be automatically 
     * allocated. For example when set to true, when the consuming virtual 
     * computer system is powered on, this resource would be allocated. A 
     * value of false indicates the resource must be explicitly allocated. 
     * For example, the setting may represent removable media (cdrom, floppy, 
     * etc.) where at power on time, the media is not present. An explicit 
     * operation is required to allocate the resource. 
     * 
     * @return	boolean	current AutomaticAllocation property 
     * value 
     * @exception	Exception	
     */
    public boolean isAutomaticAllocation(){

    return this.automaticAllocation;
    } // getAutomaticAllocation

    /**
     * This method sets the ResourceAllocationSettingData.AutomaticAllocation 
     * property value. This property is described as follows: 
     * 
     * This property specifies if the resource will be automatically 
     * allocated. For example when set to true, when the consuming virtual 
     * computer system is powered on, this resource would be allocated. A 
     * value of false indicates the resource must be explicitly allocated. 
     * For example, the setting may represent removable media (cdrom, floppy, 
     * etc.) where at power on time, the media is not present. An explicit 
     * operation is required to allocate the resource. 
     * 
     * @param	boolean	new AutomaticAllocation property value
     * @exception	Exception	
     */
    public void setAutomaticAllocation(boolean automaticAllocation) {

    this.automaticAllocation = automaticAllocation;
    } // setAutomaticAllocation


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AutomaticDeallocation. 
     */
    private boolean automaticDeallocation;
    /**
     * This method returns the 
     * ResourceAllocationSettingData.AutomaticDeallocation property value. 
     * This property is described as follows: 
     * 
     * This property specifies if the resource will be automatically 
     * de-allocated. For example, when set to true, when the consuming 
     * virtual computer system is powered off, this resource would be 
     * de-allocated. When set to false, the resource will remain allocated 
     * and must be explicitly de-allocated. 
     * 
     * @return	boolean	current AutomaticDeallocation property 
     * value 
     * @exception	Exception	
     */
    public boolean isAutomaticDeallocation(){

    return this.automaticDeallocation;
    } // getAutomaticDeallocation

    /**
     * This method sets the 
     * ResourceAllocationSettingData.AutomaticDeallocation property value. 
     * This property is described as follows: 
     * 
     * This property specifies if the resource will be automatically 
     * de-allocated. For example, when set to true, when the consuming 
     * virtual computer system is powered off, this resource would be 
     * de-allocated. When set to false, the resource will remain allocated 
     * and must be explicitly de-allocated. 
     * 
     * @param	boolean	new AutomaticDeallocation property value
     * @exception	Exception	
     */
    public void setAutomaticDeallocation(boolean automaticDeallocation) {

    this.automaticDeallocation = automaticDeallocation;
    } // setAutomaticDeallocation


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Parent. 
     */
    private String parent;
    /**
     * This method returns the ResourceAllocationSettingData.Parent property 
     * value. This property is described as follows: 
     * 
     * The Parent of the resource. For example, a controller for the current 
     * allocation 
     * 
     * @return	String	current Parent property value
     * @exception	Exception	
     */
    public String getParent(){

    return this.parent;
    } // getParent

    /**
     * This method sets the ResourceAllocationSettingData.Parent property 
     * value. This property is described as follows: 
     * 
     * The Parent of the resource. For example, a controller for the current 
     * allocation 
     * 
     * @param	String	new Parent property value
     * @exception	Exception	
     */
    public void setParent(String parent) {

    this.parent = parent;
    } // setParent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Connection. 
     */
    private String[] connection;
    /**
     * This method returns the ResourceAllocationSettingData.Connection 
     * property value. This property is described as follows: 
     * 
     * The thing to which this resource is connected. For example, a named 
     * network or switch port. 
     * 
     * @return	String[]	current Connection property value
     * @exception	Exception	
     */
    public String[] getConnection(){

    return this.connection;
    } // getConnection

    /**
     * This method sets the ResourceAllocationSettingData.Connection property 
     * value. This property is described as follows: 
     * 
     * The thing to which this resource is connected. For example, a named 
     * network or switch port. 
     * 
     * @param	String[]	new Connection property value
     * @exception	Exception	
     */
    public void setConnection(String[] connection) {

    this.connection = connection;
    } // setConnection


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Address. 
     */
    private String address;
    /**
     * This method returns the ResourceAllocationSettingData.Address property 
     * value. This property is described as follows: 
     * 
     * The address of the resource. For example, the MAC address of a Ethernet 
     * port. 
     * 
     * @return	String	current Address property value
     * @exception	Exception	
     */
    public String getAddress(){

    return this.address;
    } // getAddress

    /**
     * This method sets the ResourceAllocationSettingData.Address property 
     * value. This property is described as follows: 
     * 
     * The address of the resource. For example, the MAC address of a Ethernet 
     * port. 
     * 
     * @param	String	new Address property value
     * @exception	Exception	
     */
    public void setAddress(String address) {

    this.address = address;
    } // setAddress


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MappingBehavior. 
     */

    public enum MappingBehavior{
    UNKNOWN,
    NOT_SUPPORTED,
    DEDICATED,
    SOFT_AFFINITY,
    HARD_AFFINITY,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }
 public MappingBehavior mappingBehavior;
    /**
     * This method returns the ResourceAllocationSettingData.MappingBehavior 
     * property value. This property is described as follows: 
     * 
     * Specifies how this resource maps to underlying resourcesIf the 
     * HostResource array contains any entries, this property reflects how 
     * the resource maps to those specific resources. 
     * 
     * @return	short	current MappingBehavior property value
     * @exception	Exception	
     */
    public MappingBehavior getMappingBehavior(){

    return this.mappingBehavior;
    } // getMappingBehavior

    /**
     * This method sets the ResourceAllocationSettingData.MappingBehavior 
     * property value. This property is described as follows: 
     * 
     * Specifies how this resource maps to underlying resourcesIf the 
     * HostResource array contains any entries, this property reflects how 
     * the resource maps to those specific resources. 
     * 
     * @param	short	new MappingBehavior property value
     * @exception	Exception	
     */
    public void setMappingBehavior(MappingBehavior mappingBehavior){

    this.mappingBehavior = mappingBehavior;
    } // setMappingBehavior


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AddressOnParent. 
     */
    private String addressOnParent;
    /**
     * This method returns the ResourceAllocationSettingData.AddressOnParent 
     * property value. This property is described as follows: 
     * 
     * Describes the address of this resource in the context of the Parent. 
     * The Parent/AddressOnParent properties are used to describe the 
     * controller relationship as well the ordering of devices on a 
     * controller.For example, if the parent is a PCI Controller, this 
     * property would specify the PCI slot of this child device. 
     * 
     * @return	String	current AddressOnParent property value
     * @exception	Exception	
     */
    public String getAddressOnParent(){

    return this.addressOnParent;
    } // getAddressOnParent

    /**
     * This method sets the ResourceAllocationSettingData.AddressOnParent 
     * property value. This property is described as follows: 
     * 
     * Describes the address of this resource in the context of the Parent. 
     * The Parent/AddressOnParent properties are used to describe the 
     * controller relationship as well the ordering of devices on a 
     * controller.For example, if the parent is a PCI Controller, this 
     * property would specify the PCI slot of this child device. 
     * 
     * @param	String	new AddressOnParent property value
     * @exception	Exception	
     */
    public void setAddressOnParent(String addressOnParent) {

    this.addressOnParent = addressOnParent;
    } // setAddressOnParent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property VirtualQuantityUnits. 
     */
    private String virtualQuantityUnits;
    /**
     * This method returns the 
     * ResourceAllocationSettingData.VirtualQuantityUnits property value. 
     * This property is described as follows: 
     * 
     * This property specifies the units used by the VirtualQuantity property. 
     * For example - if ResourceType=Processor, the value of the 
     * VirtualQuantityUnits property may be set to "count", indicating that 
     * the value of the VirtualQuantity property is expressed as a count. - 
     * if ResourceType=Memory, the value of the VirtualQuantityUnits property 
     * may be set to "bytes*10^3", indicating that the value of the 
     * VirtualQuantity property is expressed in kilobyte. It is expected that 
     * profiles constrain the units that apply in context of particular 
     * resource types. The value of this property shall be a legal value of 
     * the Programmatic Units qualifier as defined in Annex C.1 of DSP0004 
     * V2.5 or later. 
     * 
     * @return	String	current VirtualQuantityUnits property 
     * value 
     * @exception	Exception	
     */
    public String getVirtualQuantityUnits(){

    return this.virtualQuantityUnits;
    } // getVirtualQuantityUnits

    /**
     * This method sets the ResourceAllocationSettingData.VirtualQuantityUnits 
     * property value. This property is described as follows: 
     * 
     * This property specifies the units used by the VirtualQuantity property. 
     * For example - if ResourceType=Processor, the value of the 
     * VirtualQuantityUnits property may be set to "count", indicating that 
     * the value of the VirtualQuantity property is expressed as a count. - 
     * if ResourceType=Memory, the value of the VirtualQuantityUnits property 
     * may be set to "bytes*10^3", indicating that the value of the 
     * VirtualQuantity property is expressed in kilobyte. It is expected that 
     * profiles constrain the units that apply in context of particular 
     * resource types. The value of this property shall be a legal value of 
     * the Programmatic Units qualifier as defined in Annex C.1 of DSP0004 
     * V2.5 or later. 
     * 
     * @param	String	new VirtualQuantityUnits property value
     * @exception	Exception	
     */
    public void setVirtualQuantityUnits(String virtualQuantityUnits) {

    this.virtualQuantityUnits = virtualQuantityUnits;
    } // setVirtualQuantityUnits



} // Class ResourceAllocationSettingData
