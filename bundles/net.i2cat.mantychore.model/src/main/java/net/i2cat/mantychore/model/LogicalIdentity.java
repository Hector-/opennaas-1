/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Nov 29 
 * 11:50:57 CET 2010. 
 */

package net.i2cat.mantychore.model;

import javax.wbem.client.*;
import javax.wbem.cim.*;
import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class LogicalIdentity as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * LogicalIdentityBean Interface. The CIM class LogicalIdentity is described 
 * as follows: 
 * 
 * CIM_LogicalIdentity is an abstract and generic association, indicating that 
 * two ManagedElements represent different aspects of the same underlying 
 * entity. This relationship conveys what could be defined with multiple 
 * inheritance. In most scenarios, the Identity relationship is determined by 
 * the equivalence of Keys or some other identifying properties of the 
 * related Elements. This relationship is reasonable in several scenarios. 
 * For example, it could be used to represent that a LogicalDevice is both a 
 * 'bus' entity and a 'functional' entity. A Device could be both a USB (bus) 
 * and a Keyboard (functional) entity. 
 */
public class LogicalIdentity  implements Serializable {

    /**
     * This constructor creates a LogicalIdentityBeanImpl Class which 
     * implements the LogicalIdentityBean Interface, and encapsulates the CIM 
     * class LogicalIdentity in a Java Bean. The CIM class LogicalIdentity is 
     * described as follows: 
     * 
     * CIM_LogicalIdentity is an abstract and generic association, indicating 
     * that two ManagedElements represent different aspects of the same 
     * underlying entity. This relationship conveys what could be defined 
     * with multiple inheritance. In most scenarios, the Identity 
     * relationship is determined by the equivalence of Keys or some other 
     * identifying properties of the related Elements. This relationship is 
     * reasonable in several scenarios. For example, it could be used to 
     * represent that a LogicalDevice is both a 'bus' entity and a 
     * 'functional' entity. A Device could be both a USB (bus) and a Keyboard 
     * (functional) entity. 
     */
    protected LogicalIdentity(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SystemElement. 
     */
    private ManagedElement systemElement;
    /**
     * This method returns the LogicalIdentity.SystemElement property value. 
     * This property is described as follows: 
     * 
     * SystemElement represents one aspect of the Managed Element. The use of 
     * 'System' in the role name does not limit the scope of the association. 
     * The role name was defined in the original association, where the 
     * referenced elements were limited to LogicalElements. Since that time, 
     * it has been found valuable to instantiate these types of relationships 
     * for ManagedElements, such as Collections. So, the referenced elements 
     * of the association were redefined to be ManagedElements. 
     * Unfortunately, the role name could not be changed without deprecating 
     * the entire association. This was not deemed necessary just to correct 
     * the role name. 
     * 
     * @return	CIM_ManagedElement	current SystemElement property 
     * value 
     * @exception	Exception	
     */
    public ManagedElement getSystemElement(){

    return this.systemElement;
    } // getSystemElement

    /**
     * This method sets the LogicalIdentity.SystemElement property value. This 
     * property is described as follows: 
     * 
     * SystemElement represents one aspect of the Managed Element. The use of 
     * 'System' in the role name does not limit the scope of the association. 
     * The role name was defined in the original association, where the 
     * referenced elements were limited to LogicalElements. Since that time, 
     * it has been found valuable to instantiate these types of relationships 
     * for ManagedElements, such as Collections. So, the referenced elements 
     * of the association were redefined to be ManagedElements. 
     * Unfortunately, the role name could not be changed without deprecating 
     * the entire association. This was not deemed necessary just to correct 
     * the role name. 
     * 
     * @param	CIM_ManagedElement	new SystemElement property 
     * value 
     * @exception	Exception	
     */
    public void setSystemElement(ManagedElement systemElement) {

    this.systemElement = systemElement;
    } // setSystemElement


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SameElement. 
     */
    private ManagedElement sameElement;
    /**
     * This method returns the LogicalIdentity.SameElement property value. 
     * This property is described as follows: 
     * 
     * SameElement represents an alternate aspect of the ManagedElement.
     * 
     * @return	CIM_ManagedElement	current SameElement property 
     * value 
     * @exception	Exception	
     */
    public ManagedElement getSameElement(){

    return this.sameElement;
    } // getSameElement

    /**
     * This method sets the LogicalIdentity.SameElement property value. This 
     * property is described as follows: 
     * 
     * SameElement represents an alternate aspect of the ManagedElement.
     * 
     * @param	CIM_ManagedElement	new SameElement property value
     * @exception	Exception	
     */
    public void setSameElement(ManagedElement sameElement) {

    this.sameElement = sameElement;
    } // setSameElement



} // Class LogicalIdentity
