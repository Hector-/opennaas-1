/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class ISCSISession as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * ISCSISessionBean Interface. The CIM class ISCSISession is described as 
 * follows: 
 * 
 * iSCSISession is a network pipe between an initiator and target 
 * SCSIProtocolEndpoints. An iSCSISession is composed of one or more TCP 
 * connections which MUST be selected from a SystemSpecificCollection 
 * representing an iSCSI Portal Group. NetworkPipeComposition aggregates 
 * NetworkPipe instances representing iSCSI connections, which are associated 
 * to TCPProtocolEndpoints. Only an iSCSI initiator can create an iSCSI 
 * Session, an iSCSI Target MUST accept (or reject) a session request. 
 * EndOfNetworkPipe associates iSCSISession with SCSIProtocolEndpoint. 
 */
    @Entity
public class ISCSISession extends NetworkPipe implements Serializable {

    /**
     * This constructor creates a ISCSISessionBeanImpl Class which implements 
     * the ISCSISessionBean Interface, and encapsulates the CIM class 
     * ISCSISession in a Java Bean. The CIM class ISCSISession is described 
     * as follows: 
     * 
     * iSCSISession is a network pipe between an initiator and target 
     * SCSIProtocolEndpoints. An iSCSISession is composed of one or more TCP 
     * connections which MUST be selected from a SystemSpecificCollection 
     * representing an iSCSI Portal Group. NetworkPipeComposition aggregates 
     * NetworkPipe instances representing iSCSI connections, which are 
     * associated to TCPProtocolEndpoints. Only an iSCSI initiator can create 
     * an iSCSI Session, an iSCSI Target MUST accept (or reject) a session 
     * request. EndOfNetworkPipe associates iSCSISession with 
     * SCSIProtocolEndpoint. 
     */
    public ISCSISession(){};

    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SessionType. 
     */

    public enum SessionType{
    DISCOVERY,
    NORMAL
    }
    private SessionType sessionType;
    /**
     * This method returns the iSCSISession.SessionType property value. This 
     * property is described as follows: 
     * 
     * iSCSI Session type.
     * 
     * @return	int	current SessionType property value
     * @exception	Exception	
     */
    public SessionType getSessionType(){

    return this.sessionType;
    } // getSessionType

    /**
     * This method sets the iSCSISession.SessionType property value. This 
     * property is described as follows: 
     * 
     * iSCSI Session type.
     * 
     * @param	int	new SessionType property value
     * @exception	Exception	
     */
    public void setSessionType(SessionType sessionType){

    this.sessionType = sessionType;
    } // setSessionType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property TSIH. 
     */
    private long tSIH;
    /**
     * This method returns the iSCSISession.tSIH property value. This property 
     * is described as follows: 
     * 
     * The Target Session Identifying Handle (TSIH) for this session.
     * 
     * @return	long	current tSIH property value
     * @exception	Exception	
     */
    public long gettSIH(){

    return this.tSIH;
    } // gettSIH

    /**
     * This method sets the iSCSISession.tSIH property value. This property is 
     * described as follows: 
     * 
     * The Target Session Identifying Handle (TSIH) for this session.
     * 
     * @param	long	new tSIH property value
     * @exception	Exception	
     */
    public void settSIH(long tSIH) {

    this.tSIH = tSIH;
    } // settSIH


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property EndPointName. 
     */
    private String endPointName;
    /**
     * This method returns the iSCSISession.endPointName property value. This 
     * property is described as follows: 
     * 
     * The iSCSI Port Name (iSCSIProtocolEndPoint.Name), of the device at the 
     * other end of this iSCSISession. 
     * 
     * @return	String	current endPointName property value
     * @exception	Exception	
     */
    public String getendPointName(){

    return this.endPointName;
    } // getendPointName

    /**
     * This method sets the iSCSISession.endPointName property value. This 
     * property is described as follows: 
     * 
     * The iSCSI Port Name (iSCSIProtocolEndPoint.Name), of the device at the 
     * other end of this iSCSISession. 
     * 
     * @param	String	new endPointName property value
     * @exception	Exception	
     */
    public void setendPointName(String endPointName) {

    this.endPointName = endPointName;
    } // setendPointName


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CurrentConnections. 
     */
    private long currentConnections;
    /**
     * This method returns the iSCSISession.currentConnections property value. 
     * This property is described as follows: 
     * 
     * The number of transport protocol connections that currently belong to 
     * this session. 
     * 
     * @return	long	current currentConnections property value
     * @exception	Exception	
     */
    public long getcurrentConnections(){

    return this.currentConnections;
    } // getcurrentConnections

    /**
     * This method sets the iSCSISession.currentConnections property value. 
     * This property is described as follows: 
     * 
     * The number of transport protocol connections that currently belong to 
     * this session. 
     * 
     * @param	long	new currentConnections property value
     * @exception	Exception	
     */
    public void setcurrentConnections(long currentConnections) {

    this.currentConnections = currentConnections;
    } // setcurrentConnections


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property InitialR2T. 
     */
    private boolean initialR2T;
    /**
     * This method returns the iSCSISession.initialR2T property value. This 
     * property is described as follows: 
     * 
     * If set to true, indicates that the initiator MUST wait for an R2T 
     * before sending to the target. If set to false, the initiator MAY send 
     * data immediately, within limits set by iscsiSsnFirstBurstLength and 
     * the expected data transfer length of the request. 
     * 
     * @return	boolean	current initialR2T property value
     * @exception	Exception	
     */
    public boolean isinitialR2T(){

    return this.initialR2T;
    } // getinitialR2T

    /**
     * This method sets the iSCSISession.initialR2T property value. This 
     * property is described as follows: 
     * 
     * If set to true, indicates that the initiator MUST wait for an R2T 
     * before sending to the target. If set to false, the initiator MAY send 
     * data immediately, within limits set by iscsiSsnFirstBurstLength and 
     * the expected data transfer length of the request. 
     * 
     * @param	boolean	new initialR2T property value
     * @exception	Exception	
     */
    public void setinitialR2T(boolean initialR2T) {

    this.initialR2T = initialR2T;
    } // setinitialR2T


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ImmediateData. 
     */
    private boolean immediateData;
    /**
     * This method returns the iSCSISession.immediateData property value. This 
     * property is described as follows: 
     * 
     * Indicates whether the initiator and target have agreed to support 
     * immediate data on this session. 
     * 
     * @return	boolean	current immediateData property value
     * @exception	Exception	
     */
    public boolean isimmediateData(){

    return this.immediateData;
    } // getimmediateData

    /**
     * This method sets the iSCSISession.immediateData property value. This 
     * property is described as follows: 
     * 
     * Indicates whether the initiator and target have agreed to support 
     * immediate data on this session. 
     * 
     * @param	boolean	new immediateData property value
     * @exception	Exception	
     */
    public void setimmediateData(boolean immediateData) {

    this.immediateData = immediateData;
    } // setimmediateData


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MaxOutstandingR2T. 
     */
    private long maxOutstandingR2T;
    /**
     * This method returns the iSCSISession.maxOutstandingR2T property value. 
     * This property is described as follows: 
     * 
     * The maximum number of outstanding request-to-transmit (R2T)s per iSCSI 
     * task within this session. 
     * 
     * @return	long	current maxOutstandingR2T property value
     * @exception	Exception	
     */
    public long getmaxOutstandingR2T(){

    return this.maxOutstandingR2T;
    } // getmaxOutstandingR2T

    /**
     * This method sets the iSCSISession.maxOutstandingR2T property value. 
     * This property is described as follows: 
     * 
     * The maximum number of outstanding request-to-transmit (R2T)s per iSCSI 
     * task within this session. 
     * 
     * @param	long	new maxOutstandingR2T property value
     * @exception	Exception	
     */
    public void setmaxOutstandingR2T(long maxOutstandingR2T) {

    this.maxOutstandingR2T = maxOutstandingR2T;
    } // setmaxOutstandingR2T


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MaxUnsolicitedFirstDataBurstLength. 
     */
    private long maxUnsolicitedFirstDataBurstLength;
    /**
     * This method returns the iSCSISession.maxUnsolicitedFirstDataBurstLength 
     * property value. This property is described as follows: 
     * 
     * The maximum length supported for unsolicited data sent within this 
     * session. 
     * 
     * @return	long	current maxUnsolicitedFirstDataBurstLength 
     * property value 
     * @exception	Exception	
     */
    public long getmaxUnsolicitedFirstDataBurstLength(){

    return this.maxUnsolicitedFirstDataBurstLength;
    } // getmaxUnsolicitedFirstDataBurstLength

    /**
     * This method sets the iSCSISession.maxUnsolicitedFirstDataBurstLength 
     * property value. This property is described as follows: 
     * 
     * The maximum length supported for unsolicited data sent within this 
     * session. 
     * 
     * @param	long	new maxUnsolicitedFirstDataBurstLength 
     * property value 
     * @exception	Exception	
     */
    public void setmaxUnsolicitedFirstDataBurstLength(long 
	maxUnsolicitedFirstDataBurstLength) {

    this.maxUnsolicitedFirstDataBurstLength = 
	maxUnsolicitedFirstDataBurstLength;
    } // setmaxUnsolicitedFirstDataBurstLength


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MaxDataBurstLength. 
     */
    private long maxDataBurstLength;
    /**
     * This method returns the iSCSISession.maxDataBurstLength property value. 
     * This property is described as follows: 
     * 
     * The maximum number of bytes which can be sent within a single sequence 
     * of Data-In or Data-Out PDUs. 
     * 
     * @return	long	current maxDataBurstLength property value
     * @exception	Exception	
     */
    public long getmaxDataBurstLength(){

    return this.maxDataBurstLength;
    } // getmaxDataBurstLength

    /**
     * This method sets the iSCSISession.maxDataBurstLength property value. 
     * This property is described as follows: 
     * 
     * The maximum number of bytes which can be sent within a single sequence 
     * of Data-In or Data-Out PDUs. 
     * 
     * @param	long	new maxDataBurstLength property value
     * @exception	Exception	
     */
    public void setmaxDataBurstLength(long maxDataBurstLength) {

    this.maxDataBurstLength = maxDataBurstLength;
    } // setmaxDataBurstLength


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DataSequenceInOrder. 
     */
    private boolean dataSequenceInOrder;
    /**
     * This method returns the iSCSISession.dataSequenceInOrder property 
     * value. This property is described as follows: 
     * 
     * False indicates that iSCSI data PDU sequences MAY be transferred in any 
     * order. True indicates that data PDU sequences MUST be transferred 
     * using continuously increasing offsets, except during error recovery. 
     * 
     * @return	boolean	current dataSequenceInOrder property 
     * value 
     * @exception	Exception	
     */
    public boolean isdataSequenceInOrder(){

    return this.dataSequenceInOrder;
    } // getdataSequenceInOrder

    /**
     * This method sets the iSCSISession.dataSequenceInOrder property value. 
     * This property is described as follows: 
     * 
     * False indicates that iSCSI data PDU sequences MAY be transferred in any 
     * order. True indicates that data PDU sequences MUST be transferred 
     * using continuously increasing offsets, except during error recovery. 
     * 
     * @param	boolean	new dataSequenceInOrder property value
     * @exception	Exception	
     */
    public void setdataSequenceInOrder(boolean dataSequenceInOrder) {

    this.dataSequenceInOrder = dataSequenceInOrder;
    } // setdataSequenceInOrder


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DataPDUInOrder. 
     */
    private boolean dataPDUInOrder;
    /**
     * This method returns the iSCSISession.dataPDUInOrder property value. 
     * This property is described as follows: 
     * 
     * False indicates that iSCSI data PDUs within sequences MAY be in any 
     * order. True indicates that data PDUs within sequences MUST be at 
     * continuously increasing addresses, with no gaps or overlay between 
     * PDUs. Default is true. 
     * 
     * @return	boolean	current dataPDUInOrder property value
     * @exception	Exception	
     */
    public boolean isdataPDUInOrder(){

    return this.dataPDUInOrder;
    } // getdataPDUInOrder

    /**
     * This method sets the iSCSISession.dataPDUInOrder property value. This 
     * property is described as follows: 
     * 
     * False indicates that iSCSI data PDUs within sequences MAY be in any 
     * order. True indicates that data PDUs within sequences MUST be at 
     * continuously increasing addresses, with no gaps or overlay between 
     * PDUs. Default is true. 
     * 
     * @param	boolean	new dataPDUInOrder property value
     * @exception	Exception	
     */
    public void setdataPDUInOrder(boolean dataPDUInOrder) {

    this.dataPDUInOrder = dataPDUInOrder;
    } // setdataPDUInOrder


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ErrorRecoveryLevel. 
     */
    private long errorRecoveryLevel;
    /**
     * This method returns the iSCSISession.errorRecoveryLevel property value. 
     * This property is described as follows: 
     * 
     * The level of error recovery negotiated between the initiator and the 
     * target. Higher numbers represent more detailed recovery schemes. 
     * 
     * @return	long	current errorRecoveryLevel property value
     * @exception	Exception	
     */
    public long geterrorRecoveryLevel(){

    return this.errorRecoveryLevel;
    } // geterrorRecoveryLevel

    /**
     * This method sets the iSCSISession.errorRecoveryLevel property value. 
     * This property is described as follows: 
     * 
     * The level of error recovery negotiated between the initiator and the 
     * target. Higher numbers represent more detailed recovery schemes. 
     * 
     * @param	long	new errorRecoveryLevel property value
     * @exception	Exception	
     */
    public void seterrorRecoveryLevel(long errorRecoveryLevel) {

    this.errorRecoveryLevel = errorRecoveryLevel;
    } // seterrorRecoveryLevel


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MaxConnectionsPerSession. 
     */
    private long maxConnectionsPerSession;
    /**
     * This method returns the iSCSISession.maxConnectionsPerSession property 
     * value. This property is described as follows: 
     * 
     * The maximum number of connections allowed in this session.
     * 
     * @return	long	current maxConnectionsPerSession property 
     * value 
     * @exception	Exception	
     */
    public long getmaxConnectionsPerSession(){

    return this.maxConnectionsPerSession;
    } // getmaxConnectionsPerSession

    /**
     * This method sets the iSCSISession.maxConnectionsPerSession property 
     * value. This property is described as follows: 
     * 
     * The maximum number of connections allowed in this session.
     * 
     * @param	long	new maxConnectionsPerSession property value
     * @exception	Exception	
     */
    public void setmaxConnectionsPerSession(long maxConnectionsPerSession) {

    this.maxConnectionsPerSession = maxConnectionsPerSession;
    } // setmaxConnectionsPerSession


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DefaultTimeToWait. 
     */
    private long defaultTimeToWait;
    /**
     * This method returns the iSCSISession.defaultTimeToWait property value. 
     * This property is described as follows: 
     * 
     * The DefaultTime2Wait negotiated for this Session. This is the minimum 
     * time, in seconds, to wait before attempting an explicit/implicit 
     * logout or active iSCSI task reassignment after an unexpected 
     * connection termination or a connection reset. 
     * 
     * @return	long	current defaultTimeToWait property value
     * @exception	Exception	
     */
    public long getdefaultTimeToWait(){

    return this.defaultTimeToWait;
    } // getdefaultTimeToWait

    /**
     * This method sets the iSCSISession.defaultTimeToWait property value. 
     * This property is described as follows: 
     * 
     * The DefaultTime2Wait negotiated for this Session. This is the minimum 
     * time, in seconds, to wait before attempting an explicit/implicit 
     * logout or active iSCSI task reassignment after an unexpected 
     * connection termination or a connection reset. 
     * 
     * @param	long	new defaultTimeToWait property value
     * @exception	Exception	
     */
    public void setdefaultTimeToWait(long defaultTimeToWait) {

    this.defaultTimeToWait = defaultTimeToWait;
    } // setdefaultTimeToWait


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DefaultTimeToRetain. 
     */
    private long defaultTimeToRetain;
    /**
     * This method returns the iSCSISession.defaultTimeToRetain property 
     * value. This property is described as follows: 
     * 
     * The DefaultTime2Retain negotiated for this Session. This is the maximum 
     * time, in seconds after an initial wait (Time2Wait), before which an 
     * active iSCSI task reassignment is still possible after an unexpected 
     * connection termination or a connection reset. 
     * 
     * @return	long	current defaultTimeToRetain property value
     * @exception	Exception	
     */
    public long getdefaultTimeToRetain(){

    return this.defaultTimeToRetain;
    } // getdefaultTimeToRetain

    /**
     * This method sets the iSCSISession.defaultTimeToRetain property value. 
     * This property is described as follows: 
     * 
     * The DefaultTime2Retain negotiated for this Session. This is the maximum 
     * time, in seconds after an initial wait (Time2Wait), before which an 
     * active iSCSI task reassignment is still possible after an unexpected 
     * connection termination or a connection reset. 
     * 
     * @param	long	new defaultTimeToRetain property value
     * @exception	Exception	
     */
    public void setdefaultTimeToRetain(long defaultTimeToRetain) {

    this.defaultTimeToRetain = defaultTimeToRetain;
    } // setdefaultTimeToRetain



} // Class ISCSISession
