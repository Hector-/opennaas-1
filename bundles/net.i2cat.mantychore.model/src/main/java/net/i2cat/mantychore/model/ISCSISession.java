/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 03 
 * 14:18:55 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class ISCSISession as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * ISCSISessionBean Interface. The CIM class ISCSISession is described as 
 * follows: 
 * 
 * iSCSISession is a network pipe between an initiator and target 
 * SCSIProtocolEndpoints. An iSCSISession is composed of one or more TCP 
 * connections which MUST be selected from a SystemSpecificCollection 
 * representing an iSCSI Portal Group. NetworkPipeComposition aggregates 
 * NetworkPipe instances representing iSCSI connections, which are associated 
 * to TCPProtocolEndpoints. Only an iSCSI initiator can create an iSCSI 
 * Session, an iSCSI Target MUST accept (or reject) a session request. 
 * EndOfNetworkPipe associates iSCSISession with SCSIProtocolEndpoint. 
 */
public class ISCSISession extends NetworkPipe implements Serializable {

    /**
     * This constructor creates a ISCSISessionBeanImpl Class which implements 
     * the ISCSISessionBean Interface, and encapsulates the CIM class 
     * ISCSISession in a Java Bean. The CIM class ISCSISession is described 
     * as follows: 
     * 
     * iSCSISession is a network pipe between an initiator and target 
     * SCSIProtocolEndpoints. An iSCSISession is composed of one or more TCP 
     * connections which MUST be selected from a SystemSpecificCollection 
     * representing an iSCSI Portal Group. NetworkPipeComposition aggregates 
     * NetworkPipe instances representing iSCSI connections, which are 
     * associated to TCPProtocolEndpoints. Only an iSCSI initiator can create 
     * an iSCSI Session, an iSCSI Target MUST accept (or reject) a session 
     * request. EndOfNetworkPipe associates iSCSISession with 
     * SCSIProtocolEndpoint. 
     */
    public ISCSISession(){};

    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SessionType. 
     */

    public enum SessionType{
    DISCOVERY,
    NORMAL
    }
 public SessionType sessionType;
    /**
     * This method returns the iSCSISession.SessionType property value. This 
     * property is described as follows: 
     * 
     * iSCSI Session type.
     * 
     * @return	short	current SessionType property value
     * @exception	Exception	
     */
    public SessionType getSessionType(){

    return this.sessionType;
    } // getSessionType

    /**
     * This method sets the iSCSISession.SessionType property value. This 
     * property is described as follows: 
     * 
     * iSCSI Session type.
     * 
     * @param	short	new SessionType property value
     * @exception	Exception	
     */
    public void setSessionType(SessionType sessionType){

    this.sessionType = sessionType;
    } // setSessionType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property TSIH. 
     */
    private int tSIH;
    /**
     * This method returns the iSCSISession.TSIH property value. This property 
     * is described as follows: 
     * 
     * The Target Session Identifying Handle (TSIH) for this session.
     * 
     * @return	int	current TSIH property value
     * @exception	Exception	
     */
    public int getTSIH(){

    return this.tSIH;
    } // getTSIH

    /**
     * This method sets the iSCSISession.TSIH property value. This property is 
     * described as follows: 
     * 
     * The Target Session Identifying Handle (TSIH) for this session.
     * 
     * @param	int	new TSIH property value
     * @exception	Exception	
     */
    public void setTSIH(int tSIH) {

    this.tSIH = tSIH;
    } // setTSIH


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property EndPointName. 
     */
    private String endPointName;
    /**
     * This method returns the iSCSISession.EndPointName property value. This 
     * property is described as follows: 
     * 
     * The iSCSI Port Name (iSCSIProtocolEndPoint.Name), of the device at the 
     * other end of this iSCSISession. 
     * 
     * @return	String	current EndPointName property value
     * @exception	Exception	
     */
    public String getEndPointName(){

    return this.endPointName;
    } // getEndPointName

    /**
     * This method sets the iSCSISession.EndPointName property value. This 
     * property is described as follows: 
     * 
     * The iSCSI Port Name (iSCSIProtocolEndPoint.Name), of the device at the 
     * other end of this iSCSISession. 
     * 
     * @param	String	new EndPointName property value
     * @exception	Exception	
     */
    public void setEndPointName(String endPointName) {

    this.endPointName = endPointName;
    } // setEndPointName


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CurrentConnections. 
     */
    private int currentConnections;
    /**
     * This method returns the iSCSISession.CurrentConnections property value. 
     * This property is described as follows: 
     * 
     * The number of transport protocol connections that currently belong to 
     * this session. 
     * 
     * @return	int	current CurrentConnections property value
     * @exception	Exception	
     */
    public int getCurrentConnections(){

    return this.currentConnections;
    } // getCurrentConnections

    /**
     * This method sets the iSCSISession.CurrentConnections property value. 
     * This property is described as follows: 
     * 
     * The number of transport protocol connections that currently belong to 
     * this session. 
     * 
     * @param	int	new CurrentConnections property value
     * @exception	Exception	
     */
    public void setCurrentConnections(int currentConnections) {

    this.currentConnections = currentConnections;
    } // setCurrentConnections


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property InitialR2T. 
     */
    private boolean initialR2T;
    /**
     * This method returns the iSCSISession.InitialR2T property value. This 
     * property is described as follows: 
     * 
     * If set to true, indicates that the initiator MUST wait for an R2T 
     * before sending to the target. If set to false, the initiator MAY send 
     * data immediately, within limits set by iscsiSsnFirstBurstLength and 
     * the expected data transfer length of the request. 
     * 
     * @return	boolean	current InitialR2T property value
     * @exception	Exception	
     */
    public boolean isInitialR2T(){

    return this.initialR2T;
    } // getInitialR2T

    /**
     * This method sets the iSCSISession.InitialR2T property value. This 
     * property is described as follows: 
     * 
     * If set to true, indicates that the initiator MUST wait for an R2T 
     * before sending to the target. If set to false, the initiator MAY send 
     * data immediately, within limits set by iscsiSsnFirstBurstLength and 
     * the expected data transfer length of the request. 
     * 
     * @param	boolean	new InitialR2T property value
     * @exception	Exception	
     */
    public void setInitialR2T(boolean initialR2T) {

    this.initialR2T = initialR2T;
    } // setInitialR2T


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ImmediateData. 
     */
    private boolean immediateData;
    /**
     * This method returns the iSCSISession.ImmediateData property value. This 
     * property is described as follows: 
     * 
     * Indicates whether the initiator and target have agreed to support 
     * immediate data on this session. 
     * 
     * @return	boolean	current ImmediateData property value
     * @exception	Exception	
     */
    public boolean isImmediateData(){

    return this.immediateData;
    } // getImmediateData

    /**
     * This method sets the iSCSISession.ImmediateData property value. This 
     * property is described as follows: 
     * 
     * Indicates whether the initiator and target have agreed to support 
     * immediate data on this session. 
     * 
     * @param	boolean	new ImmediateData property value
     * @exception	Exception	
     */
    public void setImmediateData(boolean immediateData) {

    this.immediateData = immediateData;
    } // setImmediateData


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MaxOutstandingR2T. 
     */
    private int maxOutstandingR2T;
    /**
     * This method returns the iSCSISession.MaxOutstandingR2T property value. 
     * This property is described as follows: 
     * 
     * The maximum number of outstanding request-to-transmit (R2T)s per iSCSI 
     * task within this session. 
     * 
     * @return	int	current MaxOutstandingR2T property value
     * @exception	Exception	
     */
    public int getMaxOutstandingR2T(){

    return this.maxOutstandingR2T;
    } // getMaxOutstandingR2T

    /**
     * This method sets the iSCSISession.MaxOutstandingR2T property value. 
     * This property is described as follows: 
     * 
     * The maximum number of outstanding request-to-transmit (R2T)s per iSCSI 
     * task within this session. 
     * 
     * @param	int	new MaxOutstandingR2T property value
     * @exception	Exception	
     */
    public void setMaxOutstandingR2T(int maxOutstandingR2T) {

    this.maxOutstandingR2T = maxOutstandingR2T;
    } // setMaxOutstandingR2T


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MaxUnsolicitedFirstDataBurstLength. 
     */
    private int maxUnsolicitedFirstDataBurstLength;
    /**
     * This method returns the iSCSISession.MaxUnsolicitedFirstDataBurstLength 
     * property value. This property is described as follows: 
     * 
     * The maximum length supported for unsolicited data sent within this 
     * session. 
     * 
     * @return	int	current MaxUnsolicitedFirstDataBurstLength 
     * property value 
     * @exception	Exception	
     */
    public int getMaxUnsolicitedFirstDataBurstLength(){

    return this.maxUnsolicitedFirstDataBurstLength;
    } // getMaxUnsolicitedFirstDataBurstLength

    /**
     * This method sets the iSCSISession.MaxUnsolicitedFirstDataBurstLength 
     * property value. This property is described as follows: 
     * 
     * The maximum length supported for unsolicited data sent within this 
     * session. 
     * 
     * @param	int	new MaxUnsolicitedFirstDataBurstLength 
     * property value 
     * @exception	Exception	
     */
    public void setMaxUnsolicitedFirstDataBurstLength(int 
	maxUnsolicitedFirstDataBurstLength) {

    this.maxUnsolicitedFirstDataBurstLength = 
	maxUnsolicitedFirstDataBurstLength;
    } // setMaxUnsolicitedFirstDataBurstLength


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MaxDataBurstLength. 
     */
    private int maxDataBurstLength;
    /**
     * This method returns the iSCSISession.MaxDataBurstLength property value. 
     * This property is described as follows: 
     * 
     * The maximum number of bytes which can be sent within a single sequence 
     * of Data-In or Data-Out PDUs. 
     * 
     * @return	int	current MaxDataBurstLength property value
     * @exception	Exception	
     */
    public int getMaxDataBurstLength(){

    return this.maxDataBurstLength;
    } // getMaxDataBurstLength

    /**
     * This method sets the iSCSISession.MaxDataBurstLength property value. 
     * This property is described as follows: 
     * 
     * The maximum number of bytes which can be sent within a single sequence 
     * of Data-In or Data-Out PDUs. 
     * 
     * @param	int	new MaxDataBurstLength property value
     * @exception	Exception	
     */
    public void setMaxDataBurstLength(int maxDataBurstLength) {

    this.maxDataBurstLength = maxDataBurstLength;
    } // setMaxDataBurstLength


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DataSequenceInOrder. 
     */
    private boolean dataSequenceInOrder;
    /**
     * This method returns the iSCSISession.DataSequenceInOrder property 
     * value. This property is described as follows: 
     * 
     * False indicates that iSCSI data PDU sequences MAY be transferred in any 
     * order. True indicates that data PDU sequences MUST be transferred 
     * using continuously increasing offsets, except during error recovery. 
     * 
     * @return	boolean	current DataSequenceInOrder property 
     * value 
     * @exception	Exception	
     */
    public boolean isDataSequenceInOrder(){

    return this.dataSequenceInOrder;
    } // getDataSequenceInOrder

    /**
     * This method sets the iSCSISession.DataSequenceInOrder property value. 
     * This property is described as follows: 
     * 
     * False indicates that iSCSI data PDU sequences MAY be transferred in any 
     * order. True indicates that data PDU sequences MUST be transferred 
     * using continuously increasing offsets, except during error recovery. 
     * 
     * @param	boolean	new DataSequenceInOrder property value
     * @exception	Exception	
     */
    public void setDataSequenceInOrder(boolean dataSequenceInOrder) {

    this.dataSequenceInOrder = dataSequenceInOrder;
    } // setDataSequenceInOrder


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DataPDUInOrder. 
     */
    private boolean dataPDUInOrder;
    /**
     * This method returns the iSCSISession.DataPDUInOrder property value. 
     * This property is described as follows: 
     * 
     * False indicates that iSCSI data PDUs within sequences MAY be in any 
     * order. True indicates that data PDUs within sequences MUST be at 
     * continuously increasing addresses, with no gaps or overlay between 
     * PDUs. Default is true. 
     * 
     * @return	boolean	current DataPDUInOrder property value
     * @exception	Exception	
     */
    public boolean isDataPDUInOrder(){

    return this.dataPDUInOrder;
    } // getDataPDUInOrder

    /**
     * This method sets the iSCSISession.DataPDUInOrder property value. This 
     * property is described as follows: 
     * 
     * False indicates that iSCSI data PDUs within sequences MAY be in any 
     * order. True indicates that data PDUs within sequences MUST be at 
     * continuously increasing addresses, with no gaps or overlay between 
     * PDUs. Default is true. 
     * 
     * @param	boolean	new DataPDUInOrder property value
     * @exception	Exception	
     */
    public void setDataPDUInOrder(boolean dataPDUInOrder) {

    this.dataPDUInOrder = dataPDUInOrder;
    } // setDataPDUInOrder


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ErrorRecoveryLevel. 
     */
    private int errorRecoveryLevel;
    /**
     * This method returns the iSCSISession.ErrorRecoveryLevel property value. 
     * This property is described as follows: 
     * 
     * The level of error recovery negotiated between the initiator and the 
     * target. Higher numbers represent more detailed recovery schemes. 
     * 
     * @return	int	current ErrorRecoveryLevel property value
     * @exception	Exception	
     */
    public int getErrorRecoveryLevel(){

    return this.errorRecoveryLevel;
    } // getErrorRecoveryLevel

    /**
     * This method sets the iSCSISession.ErrorRecoveryLevel property value. 
     * This property is described as follows: 
     * 
     * The level of error recovery negotiated between the initiator and the 
     * target. Higher numbers represent more detailed recovery schemes. 
     * 
     * @param	int	new ErrorRecoveryLevel property value
     * @exception	Exception	
     */
    public void setErrorRecoveryLevel(int errorRecoveryLevel) {

    this.errorRecoveryLevel = errorRecoveryLevel;
    } // setErrorRecoveryLevel


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MaxConnectionsPerSession. 
     */
    private int maxConnectionsPerSession;
    /**
     * This method returns the iSCSISession.MaxConnectionsPerSession property 
     * value. This property is described as follows: 
     * 
     * The maximum number of connections allowed in this session.
     * 
     * @return	int	current MaxConnectionsPerSession property 
     * value 
     * @exception	Exception	
     */
    public int getMaxConnectionsPerSession(){

    return this.maxConnectionsPerSession;
    } // getMaxConnectionsPerSession

    /**
     * This method sets the iSCSISession.MaxConnectionsPerSession property 
     * value. This property is described as follows: 
     * 
     * The maximum number of connections allowed in this session.
     * 
     * @param	int	new MaxConnectionsPerSession property value
     * @exception	Exception	
     */
    public void setMaxConnectionsPerSession(int maxConnectionsPerSession) {

    this.maxConnectionsPerSession = maxConnectionsPerSession;
    } // setMaxConnectionsPerSession


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DefaultTimeToWait. 
     */
    private int defaultTimeToWait;
    /**
     * This method returns the iSCSISession.DefaultTimeToWait property value. 
     * This property is described as follows: 
     * 
     * The DefaultTime2Wait negotiated for this Session. This is the minimum 
     * time, in seconds, to wait before attempting an explicit/implicit 
     * logout or active iSCSI task reassignment after an unexpected 
     * connection termination or a connection reset. 
     * 
     * @return	int	current DefaultTimeToWait property value
     * @exception	Exception	
     */
    public int getDefaultTimeToWait(){

    return this.defaultTimeToWait;
    } // getDefaultTimeToWait

    /**
     * This method sets the iSCSISession.DefaultTimeToWait property value. 
     * This property is described as follows: 
     * 
     * The DefaultTime2Wait negotiated for this Session. This is the minimum 
     * time, in seconds, to wait before attempting an explicit/implicit 
     * logout or active iSCSI task reassignment after an unexpected 
     * connection termination or a connection reset. 
     * 
     * @param	int	new DefaultTimeToWait property value
     * @exception	Exception	
     */
    public void setDefaultTimeToWait(int defaultTimeToWait) {

    this.defaultTimeToWait = defaultTimeToWait;
    } // setDefaultTimeToWait


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DefaultTimeToRetain. 
     */
    private int defaultTimeToRetain;
    /**
     * This method returns the iSCSISession.DefaultTimeToRetain property 
     * value. This property is described as follows: 
     * 
     * The DefaultTime2Retain negotiated for this Session. This is the maximum 
     * time, in seconds after an initial wait (Time2Wait), before which an 
     * active iSCSI task reassignment is still possible after an unexpected 
     * connection termination or a connection reset. 
     * 
     * @return	int	current DefaultTimeToRetain property value
     * @exception	Exception	
     */
    public int getDefaultTimeToRetain(){

    return this.defaultTimeToRetain;
    } // getDefaultTimeToRetain

    /**
     * This method sets the iSCSISession.DefaultTimeToRetain property value. 
     * This property is described as follows: 
     * 
     * The DefaultTime2Retain negotiated for this Session. This is the maximum 
     * time, in seconds after an initial wait (Time2Wait), before which an 
     * active iSCSI task reassignment is still possible after an unexpected 
     * connection termination or a connection reset. 
     * 
     * @param	int	new DefaultTimeToRetain property value
     * @exception	Exception	
     */
    public void setDefaultTimeToRetain(int defaultTimeToRetain) {

    this.defaultTimeToRetain = defaultTimeToRetain;
    } // setDefaultTimeToRetain



} // Class ISCSISession
