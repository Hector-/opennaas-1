/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 17 
 * 13:56:59 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class RouteForwardedByService as well as methods comparable to 
 * the invokeMethods defined for this class. This Class implements the 
 * RouteForwardedByServiceBean Interface. The CIM class 
 * RouteForwardedByService is described as follows: 
 * 
 * This assocation makes explicit the next hops that are forwarded by a 
 * specific ForwardingService, to reach the destination. Every 
 * ForwardingService can have its own unique set of routing destinations and 
 * next hops. The association is deprecated since it is incorrect to mandate 
 * the existence of a ForwardingService in order to define the existence of a 
 * route. 
 */
public class RouteForwardedByService extends Dependency implements 
    Serializable {

    /**
     * This constructor creates a RouteForwardedByServiceBeanImpl Class which 
     * implements the RouteForwardedByServiceBean Interface, and encapsulates 
     * the CIM class RouteForwardedByService in a Java Bean. The CIM class 
     * RouteForwardedByService is described as follows: 
     * 
     * This assocation makes explicit the next hops that are forwarded by a 
     * specific ForwardingService, to reach the destination. Every 
     * ForwardingService can have its own unique set of routing destinations 
     * and next hops. The association is deprecated since it is incorrect to 
     * mandate the existence of a ForwardingService in order to define the 
     * existence of a route. 
     */
    public RouteForwardedByService(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Antecedent. 
     */
    @Deprecated    private ForwardingService antecedent;
    /**
     * This method returns the RouteForwardedByService.Antecedent property 
     * value. This property is described as follows: 
     * 
     * The forwarding service for the route.
     * 
     * @return	CIM_ForwardingService	current Antecedent property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public ForwardingService getAntecedent(){

    return (ForwardingService)antecedent;
    } // getAntecedent

    /**
     * This method sets the RouteForwardedByService.Antecedent property value. 
     * This property is described as follows: 
     * 
     * The forwarding service for the route.
     * 
     * @param	CIM_ForwardingService	new Antecedent property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public void setAntecedent(ForwardingService antecedent) {

    this.antecedent = antecedent;
    } // setAntecedent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Dependent. 
     */
    @Deprecated    private NextHopRouting dependent;
    /**
     * This method returns the RouteForwardedByService.Dependent property 
     * value. This property is described as follows: 
     * 
     * The route being forwarded.
     * 
     * @return	CIM_NextHopRouting	current Dependent property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public NextHopRouting getDependent(){

    return (NextHopRouting)dependent;
    } // getDependent

    /**
     * This method sets the RouteForwardedByService.Dependent property value. 
     * This property is described as follows: 
     * 
     * The route being forwarded.
     * 
     * @param	CIM_NextHopRouting	new Dependent property value
     * @exception	Exception	
     */
    @Deprecated
    public void setDependent(NextHopRouting dependent) {

    this.dependent = dependent;
    } // setDependent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AdminDistance. 
     */
    @Deprecated    private short adminDistance;
    /**
     * This method returns the RouteForwardedByService.AdminDistance property 
     * value. This property is described as follows: 
     * 
     * This property contains the current administrative distance of this 
     * route, for the ForwardingService. Note that this property indicates 
     * current, specific values - whereas an instance of the 
     * CIM_AdministrativeDistance class defines default distances. 
     * 
     * @return	short	current AdminDistance property value
     * @exception	Exception	
     */
    @Deprecated
    public short getAdminDistance(){

    return this.adminDistance;
    } // getAdminDistance

    /**
     * This method sets the RouteForwardedByService.AdminDistance property 
     * value. This property is described as follows: 
     * 
     * This property contains the current administrative distance of this 
     * route, for the ForwardingService. Note that this property indicates 
     * current, specific values - whereas an instance of the 
     * CIM_AdministrativeDistance class defines default distances. 
     * 
     * @param	short	new AdminDistance property value
     * @exception	Exception	
     */
    @Deprecated
    public void setAdminDistance(short adminDistance) {

    this.adminDistance = adminDistance;
    } // setAdminDistance


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PathMetric. 
     */
    @Deprecated    private short pathMetric;
    /**
     * This method returns the RouteForwardedByService.PathMetric property 
     * value. This property is described as follows: 
     * 
     * PathMetric provides a numeric indication as to the preference of this 
     * route compared to other routes that reach the same destination. 
     * 
     * @return	short	current PathMetric property value
     * @exception	Exception	
     */
    @Deprecated
    public short getPathMetric(){

    return this.pathMetric;
    } // getPathMetric

    /**
     * This method sets the RouteForwardedByService.PathMetric property value. 
     * This property is described as follows: 
     * 
     * PathMetric provides a numeric indication as to the preference of this 
     * route compared to other routes that reach the same destination. 
     * 
     * @param	short	new PathMetric property value
     * @exception	Exception	
     */
    @Deprecated
    public void setPathMetric(short pathMetric) {

    this.pathMetric = pathMetric;
    } // setPathMetric



} // Class RouteForwardedByService
