/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 10:54:51 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class IKESAEndpoint as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * IKESAEndpointBean Interface. The CIM class IKESAEndpoint is described as 
 * follows: 
 * 
 * IKESAEndpoint is created in the first phase of SA negotiation and protects 
 * the key negotiation traffic. This endpoint is only created when IKE is the 
 * key exchange protocol. Other protocols and their endpoints will be defined 
 * in a future release. 
 */
public class IKESAEndpoint extends SecurityAssociationEndpoint implements 
    Serializable {

    /**
     * This constructor creates a IKESAEndpointBeanImpl Class which implements 
     * the IKESAEndpointBean Interface, and encapsulates the CIM class 
     * IKESAEndpoint in a Java Bean. The CIM class IKESAEndpoint is described 
     * as follows: 
     * 
     * IKESAEndpoint is created in the first phase of SA negotiation and 
     * protects the key negotiation traffic. This endpoint is only created 
     * when IKE is the key exchange protocol. Other protocols and their 
     * endpoints will be defined in a future release. 
     */
    public IKESAEndpoint(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property InitiatorCookie. 
     */
    private long initiatorCookie;
    /**
     * This method returns the IKESAEndpoint.InitiatorCookie property value. 
     * This property is described as follows: 
     * 
     * Identifier of the IKE phase 1 negotiation initiator. Combined with the 
     * ResponderCookie, this value, in string form, may be used to construct 
     * the value of the key field 'Name', inherited from ServiceAccessPoint. 
     * 
     * @return	long	current InitiatorCookie property value
     * @exception	Exception	
     */
    public long getInitiatorCookie(){

    return this.initiatorCookie;
    } // getInitiatorCookie

    /**
     * This method sets the IKESAEndpoint.InitiatorCookie property value. This 
     * property is described as follows: 
     * 
     * Identifier of the IKE phase 1 negotiation initiator. Combined with the 
     * ResponderCookie, this value, in string form, may be used to construct 
     * the value of the key field 'Name', inherited from ServiceAccessPoint. 
     * 
     * @param	long	new InitiatorCookie property value
     * @exception	Exception	
     */
    public void setInitiatorCookie(long initiatorCookie) {

    this.initiatorCookie = initiatorCookie;
    } // setInitiatorCookie


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ResponderCookie. 
     */
    private long responderCookie;
    /**
     * This method returns the IKESAEndpoint.ResponderCookie property value. 
     * This property is described as follows: 
     * 
     * Identifier of the IKE phase 1 negotiation responder. Combined with the 
     * InitiatorCookie, this value, in string form, may be used to construct 
     * the value of the key field 'Name', inherited from ServiceAccessPoint. 
     * 
     * @return	long	current ResponderCookie property value
     * @exception	Exception	
     */
    public long getResponderCookie(){

    return this.responderCookie;
    } // getResponderCookie

    /**
     * This method sets the IKESAEndpoint.ResponderCookie property value. This 
     * property is described as follows: 
     * 
     * Identifier of the IKE phase 1 negotiation responder. Combined with the 
     * InitiatorCookie, this value, in string form, may be used to construct 
     * the value of the key field 'Name', inherited from ServiceAccessPoint. 
     * 
     * @param	long	new ResponderCookie property value
     * @exception	Exception	
     */
    public void setResponderCookie(long responderCookie) {

    this.responderCookie = responderCookie;
    } // setResponderCookie


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CipherAlgorithm. 
     */

    public enum CipherAlgorithm{
    UNKNOWN,
    OTHER,
    DES,
    IDEA,
    BLOWFISH,
    RC5,
    _3DES,
    CAST,
    DMTF_IANA_RESERVED,
    VENDOR_RESERVED
    }CipherAlgorithm cipherAlgorithm;
    /**
     * This method returns the IKESAEndpoint.CipherAlgorithm property value. 
     * This property is described as follows: 
     * 
     * CipherAlgorithm is an enumeration that specifies the encryption 
     * algorithm used by the IKESAEndpoint. The list of algorithms was 
     * generated from Appendix A of RFC2409. Note that the enumeration is 
     * different than the RFC list, since the values of Unknown and Other are 
     * taken into account. 
     * 
     * @return	short	current CipherAlgorithm property value
     * @exception	Exception	
     */
    public CipherAlgorithm getCipherAlgorithm(){

    return this.cipherAlgorithm;
    } // getCipherAlgorithm

    /**
     * This method sets the IKESAEndpoint.CipherAlgorithm property value. This 
     * property is described as follows: 
     * 
     * CipherAlgorithm is an enumeration that specifies the encryption 
     * algorithm used by the IKESAEndpoint. The list of algorithms was 
     * generated from Appendix A of RFC2409. Note that the enumeration is 
     * different than the RFC list, since the values of Unknown and Other are 
     * taken into account. 
     * 
     * @param	short	new CipherAlgorithm property value
     * @exception	Exception	
     */
    public void setCipherAlgorithm(CipherAlgorithm cipherAlgorithm){

    this.cipherAlgorithm = cipherAlgorithm;
    } // setCipherAlgorithm


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherCipherAlgorithm. 
     */
    private String otherCipherAlgorithm;
    /**
     * This method returns the IKESAEndpoint.OtherCipherAlgorithm property 
     * value. This property is described as follows: 
     * 
     * Description of the encryption algorithm when the value 1 ("Other") is 
     * specified for the property, CipherAlgorithm. 
     * 
     * @return	String	current OtherCipherAlgorithm property 
     * value 
     * @exception	Exception	
     */
    public String getOtherCipherAlgorithm(){

    return this.otherCipherAlgorithm;
    } // getOtherCipherAlgorithm

    /**
     * This method sets the IKESAEndpoint.OtherCipherAlgorithm property value. 
     * This property is described as follows: 
     * 
     * Description of the encryption algorithm when the value 1 ("Other") is 
     * specified for the property, CipherAlgorithm. 
     * 
     * @param	String	new OtherCipherAlgorithm property value
     * @exception	Exception	
     */
    public void setOtherCipherAlgorithm(String otherCipherAlgorithm) {

    this.otherCipherAlgorithm = otherCipherAlgorithm;
    } // setOtherCipherAlgorithm


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HashAlgorithm. 
     */

    public enum HashAlgorithm{
    UNKNOWN,
    OTHER,
    MD5,
    SHA_1,
    TIGER,
    DMTF_IANA_RESERVED,
    VENDOR_RESERVED
    }HashAlgorithm hashAlgorithm;
    /**
     * This method returns the IKESAEndpoint.HashAlgorithm property value. 
     * This property is described as follows: 
     * 
     * HashAlgorithm is an enumeration that specifies the hash function used 
     * by the IKESAEndpoint. The list of algorithms was generated from 
     * Appendix A of RFC2409. Note that the enumeration is different than the 
     * RFC list, since the values of Unknown and Other are taken into 
     * account. 
     * 
     * @return	short	current HashAlgorithm property value
     * @exception	Exception	
     */
    public HashAlgorithm getHashAlgorithm(){

    return this.hashAlgorithm;
    } // getHashAlgorithm

    /**
     * This method sets the IKESAEndpoint.HashAlgorithm property value. This 
     * property is described as follows: 
     * 
     * HashAlgorithm is an enumeration that specifies the hash function used 
     * by the IKESAEndpoint. The list of algorithms was generated from 
     * Appendix A of RFC2409. Note that the enumeration is different than the 
     * RFC list, since the values of Unknown and Other are taken into 
     * account. 
     * 
     * @param	short	new HashAlgorithm property value
     * @exception	Exception	
     */
    public void setHashAlgorithm(HashAlgorithm hashAlgorithm){

    this.hashAlgorithm = hashAlgorithm;
    } // setHashAlgorithm


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherHashAlgorithm. 
     */
    private String otherHashAlgorithm;
    /**
     * This method returns the IKESAEndpoint.OtherHashAlgorithm property 
     * value. This property is described as follows: 
     * 
     * Description of the hash function when the value 1 ("Other") is 
     * specified for the property, HashAlgorithm. 
     * 
     * @return	String	current OtherHashAlgorithm property value
     * @exception	Exception	
     */
    public String getOtherHashAlgorithm(){

    return this.otherHashAlgorithm;
    } // getOtherHashAlgorithm

    /**
     * This method sets the IKESAEndpoint.OtherHashAlgorithm property value. 
     * This property is described as follows: 
     * 
     * Description of the hash function when the value 1 ("Other") is 
     * specified for the property, HashAlgorithm. 
     * 
     * @param	String	new OtherHashAlgorithm property value
     * @exception	Exception	
     */
    public void setOtherHashAlgorithm(String otherHashAlgorithm) {

    this.otherHashAlgorithm = otherHashAlgorithm;
    } // setOtherHashAlgorithm


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AuthenticationMethod. 
     */

    public enum AuthenticationMethod{
    UNKNOWN,
    OTHER,
    PRE_SHARED_KEY,
    DSS_SIGNATURES,
    RSA_SIGNATURES,
    ENCRYPTION_WITH_RSA,
    REVISED_ENCRYPTION_WITH_RSA,
    DMTF_IANA_RESERVED,
    VENDOR_RESERVED
    }AuthenticationMethod authenticationMethod;
    /**
     * This method returns the IKESAEndpoint.AuthenticationMethod property 
     * value. This property is described as follows: 
     * 
     * AuthenticationMethod is an enumeration that specifies the operation of 
     * the IKESAEndpoint. The list of methods was generated from Appendix A 
     * of RFC2409. Note that the enumeration is different than the RFC list, 
     * since the values of Unknown and Other are taken into account. 
     * 
     * @return	short	current AuthenticationMethod property value
     * @exception	Exception	
     */
    public AuthenticationMethod getAuthenticationMethod(){

    return this.authenticationMethod;
    } // getAuthenticationMethod

    /**
     * This method sets the IKESAEndpoint.AuthenticationMethod property value. 
     * This property is described as follows: 
     * 
     * AuthenticationMethod is an enumeration that specifies the operation of 
     * the IKESAEndpoint. The list of methods was generated from Appendix A 
     * of RFC2409. Note that the enumeration is different than the RFC list, 
     * since the values of Unknown and Other are taken into account. 
     * 
     * @param	short	new AuthenticationMethod property value
     * @exception	Exception	
     */
    public void setAuthenticationMethod(AuthenticationMethod 
	authenticationMethod){

    this.authenticationMethod = authenticationMethod;
    } // setAuthenticationMethod


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherAuthenticationMethod. 
     */
    private String otherAuthenticationMethod;
    /**
     * This method returns the IKESAEndpoint.OtherAuthenticationMethod 
     * property value. This property is described as follows: 
     * 
     * Description of the method when the value 1 ("Other") is specified for 
     * the property, AuthenticationMethod. 
     * 
     * @return	String	current OtherAuthenticationMethod property 
     * value 
     * @exception	Exception	
     */
    public String getOtherAuthenticationMethod(){

    return this.otherAuthenticationMethod;
    } // getOtherAuthenticationMethod

    /**
     * This method sets the IKESAEndpoint.OtherAuthenticationMethod property 
     * value. This property is described as follows: 
     * 
     * Description of the method when the value 1 ("Other") is specified for 
     * the property, AuthenticationMethod. 
     * 
     * @param	String	new OtherAuthenticationMethod property 
     * value 
     * @exception	Exception	
     */
    public void setOtherAuthenticationMethod(String otherAuthenticationMethod) 
	{

    this.otherAuthenticationMethod = otherAuthenticationMethod;
    } // setOtherAuthenticationMethod


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property GroupId. 
     */

    public enum GroupId{
    NO_GROUP_NON_DIFFIE_HELLMAN_EXCHANGE,
    DH_768_BIT_PRIME,
    DH_1024_BIT_PRIME,
    EC2N_155_BIT_FIELD_ELEMENT,
    EC2N_185_BIT_FIELD_ELEMENT,
    DH_1536_BIT_PRIME,
    STANDARD_GROUP_RESERVED,
    VENDOR_RESERVED
    }GroupId groupId;
    /**
     * This method returns the IKESAEndpoint.GroupId property value. This 
     * property is described as follows: 
     * 
     * GroupId specifies the key exchange group ID. If the GroupID number is 
     * from the vendor-specific range (32768-65535), the VendorID qualifies 
     * the group number. Well-known group identifiers from RFC2412, Appendix 
     * E, are: Group 1='768 bit prime', Group 2='1024 bit prime', Group 3= 
     * 'Elliptic Curve Group with 155 bit field element', Group 4= 'Large 
     * Elliptic Curve Group with 185 bit field element', and Group 5='1536 
     * bit prime'. 
     * 
     * @return	short	current GroupId property value
     * @exception	Exception	
     */
    public GroupId getGroupId(){

    return this.groupId;
    } // getGroupId

    /**
     * This method sets the IKESAEndpoint.GroupId property value. This 
     * property is described as follows: 
     * 
     * GroupId specifies the key exchange group ID. If the GroupID number is 
     * from the vendor-specific range (32768-65535), the VendorID qualifies 
     * the group number. Well-known group identifiers from RFC2412, Appendix 
     * E, are: Group 1='768 bit prime', Group 2='1024 bit prime', Group 3= 
     * 'Elliptic Curve Group with 155 bit field element', Group 4= 'Large 
     * Elliptic Curve Group with 185 bit field element', and Group 5='1536 
     * bit prime'. 
     * 
     * @param	short	new GroupId property value
     * @exception	Exception	
     */
    public void setGroupId(GroupId groupId){

    this.groupId = groupId;
    } // setGroupId


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property VendorID. 
     */
    private String vendorID;
    /**
     * This method returns the IKESAEndpoint.VendorID property value. This 
     * property is described as follows: 
     * 
     * VendorID identifies the vendor when the value of GroupID is in the 
     * vendor-specific range, 32768 to 65535. 
     * 
     * @return	String	current VendorID property value
     * @exception	Exception	
     */
    public String getVendorID(){

    return this.vendorID;
    } // getVendorID

    /**
     * This method sets the IKESAEndpoint.VendorID property value. This 
     * property is described as follows: 
     * 
     * VendorID identifies the vendor when the value of GroupID is in the 
     * vendor-specific range, 32768 to 65535. 
     * 
     * @param	String	new VendorID property value
     * @exception	Exception	
     */
    public void setVendorID(String vendorID) {

    this.vendorID = vendorID;
    } // setVendorID



} // Class IKESAEndpoint
