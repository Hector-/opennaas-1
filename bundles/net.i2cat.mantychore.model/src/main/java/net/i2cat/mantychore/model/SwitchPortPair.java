/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 10:54:51 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class SwitchPortPair as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * SwitchPortPairBean Interface. The CIM class SwitchPortPair is described as 
 * follows: 
 * 
 * This association represents information regarding port pairings that is 
 * used by the SourceRoutingService of a switch. 
 */
public class SwitchPortPair extends SAPSAPDependency implements Serializable 
    {

    /**
     * This constructor creates a SwitchPortPairBeanImpl Class which 
     * implements the SwitchPortPairBean Interface, and encapsulates the CIM 
     * class SwitchPortPair in a Java Bean. The CIM class SwitchPortPair is 
     * described as follows: 
     * 
     * This association represents information regarding port pairings that is 
     * used by the SourceRoutingService of a switch. 
     */
    public SwitchPortPair(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Antecedent. 
     */
    private SwitchPort antecedent;
    /**
     * This method returns the SwitchPortPair.Antecedent property value. This 
     * property is described as follows: 
     * 
     * The lower numbered port.
     * 
     * @return	CIM_SwitchPort	current Antecedent property value
     * @exception	Exception	
     */
    public SwitchPort getAntecedent(){

    return (SwitchPort)antecedent;
    } // getAntecedent

    /**
     * This method sets the SwitchPortPair.Antecedent property value. This 
     * property is described as follows: 
     * 
     * The lower numbered port.
     * 
     * @param	CIM_SwitchPort	new Antecedent property value
     * @exception	Exception	
     */
    public void setAntecedent(SwitchPort antecedent) {

    this.antecedent = antecedent;
    } // setAntecedent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Dependent. 
     */
    private SwitchPort dependent;
    /**
     * This method returns the SwitchPortPair.Dependent property value. This 
     * property is described as follows: 
     * 
     * The higher numbered port.
     * 
     * @return	CIM_SwitchPort	current Dependent property value
     * @exception	Exception	
     */
    public SwitchPort getDependent(){

    return (SwitchPort)dependent;
    } // getDependent

    /**
     * This method sets the SwitchPortPair.Dependent property value. This 
     * property is described as follows: 
     * 
     * The higher numbered port.
     * 
     * @param	CIM_SwitchPort	new Dependent property value
     * @exception	Exception	
     */
    public void setDependent(SwitchPort dependent) {

    this.dependent = dependent;
    } // setDependent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property BridgeNum. 
     */
    private short bridgeNum;
    /**
     * This method returns the SwitchPortPair.BridgeNum property value. This 
     * property is described as follows: 
     * 
     * A bridge number that uniquely identifies the path provided by this 
     * source routing bridge between the segments connected to high and low 
     * ports. The purpose of bridge number is to disambiguate between 
     * multiple paths connecting the same two LANs. 
     * 
     * @return	short	current BridgeNum property value
     * @exception	Exception	
     */
    public short getBridgeNum(){

    return this.bridgeNum;
    } // getBridgeNum

    /**
     * This method sets the SwitchPortPair.BridgeNum property value. This 
     * property is described as follows: 
     * 
     * A bridge number that uniquely identifies the path provided by this 
     * source routing bridge between the segments connected to high and low 
     * ports. The purpose of bridge number is to disambiguate between 
     * multiple paths connecting the same two LANs. 
     * 
     * @param	short	new BridgeNum property value
     * @exception	Exception	
     */
    public void setBridgeNum(short bridgeNum) {

    this.bridgeNum = bridgeNum;
    } // setBridgeNum


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property BridgeState. 
     */

    public enum BridgeState{
    ENABLED,
    DISABLED,
    INVALID
    }BridgeState bridgeState;
    /**
     * This method returns the SwitchPortPair.BridgeState property value. This 
     * property is described as follows: 
     * 
     * The state of the pairing. Writing 'invalid(3)' to this property removes 
     * the association instance. 
     * 
     * @return	short	current BridgeState property value
     * @exception	Exception	
     */
    public BridgeState getBridgeState(){

    return this.bridgeState;
    } // getBridgeState

    /**
     * This method sets the SwitchPortPair.BridgeState property value. This 
     * property is described as follows: 
     * 
     * The state of the pairing. Writing 'invalid(3)' to this property removes 
     * the association instance. 
     * 
     * @param	short	new BridgeState property value
     * @exception	Exception	
     */
    public void setBridgeState(BridgeState bridgeState){

    this.bridgeState = bridgeState;
    } // setBridgeState



} // Class SwitchPortPair
