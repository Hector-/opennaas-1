/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class DNSProtocolEndpoint as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * DNSProtocolEndpointBean Interface. The CIM class DNSProtocolEndpoint is 
 * described as follows: 
 * 
 * A class derived from CIM_ProtocolEndpoint which represents the DNS client 
 * and DNS configuration for a single IP endpoint. The DNS server addresses 
 * can be determined by querying the AccessInfo property of associated 
 * CIM_RemoteServiceAccessPoint instances which have an AccessContext of 
 * "DNS Server". The order in which the DNS servers will be queried can be 
 * determined by the relative values of the OrderOfAccess property on each 
 * CIM_RemoteAccessAvailableToElement association which associated the 
 * CIM_RemoteServiceAccessPoint with the CIM_DNSProtocolEndpoint. 
 */
    @Entity
public class DNSProtocolEndpoint extends ProtocolEndpoint implements 
    Serializable {

    /**
     * This constructor creates a DNSProtocolEndpointBeanImpl Class which 
     * implements the DNSProtocolEndpointBean Interface, and encapsulates the 
     * CIM class DNSProtocolEndpoint in a Java Bean. The CIM class 
     * DNSProtocolEndpoint is described as follows: 
     * 
     * A class derived from CIM_ProtocolEndpoint which represents the DNS 
     * client and DNS configuration for a single IP endpoint. The DNS server 
     * addresses can be determined by querying the AccessInfo property of 
     * associated CIM_RemoteServiceAccessPoint instances which have an 
     * AccessContext of "DNS Server". The order in which the DNS servers will 
     * be queried can be determined by the relative values of the 
     * OrderOfAccess property on each CIM_RemoteAccessAvailableToElement 
     * association which associated the CIM_RemoteServiceAccessPoint with the 
     * CIM_DNSProtocolEndpoint. 
     */
    public DNSProtocolEndpoint(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Hostname. 
     */
    private String hostname;
    /**
     * This method returns the DNSProtocolEndpoint.hostname property value. 
     * This property is described as follows: 
     * 
     * The Hostname actually in use for this client connection.
     * 
     * @return	String	current hostname property value
     * @exception	Exception	
     */
    public String gethostname(){

    return this.hostname;
    } // gethostname

    /**
     * This method sets the DNSProtocolEndpoint.hostname property value. This 
     * property is described as follows: 
     * 
     * The Hostname actually in use for this client connection.
     * 
     * @param	String	new hostname property value
     * @exception	Exception	
     */
    public void sethostname(String hostname) {

    this.hostname = hostname;
    } // sethostname


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DHCPOptionsToUse. 
     */

    public enum DHCPOptionsToUse{
    DOMAIN_NAME_SERVER,
    HOST_NAME,
    DOMAIN_NAME,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }
    private DHCPOptionsToUse dHCPOptionsToUse;
    /**
     * This method returns the DNSProtocolEndpoint.DHCPOptionsToUse property 
     * value. This property is described as follows: 
     * 
     * One or more DHCP options that the DNS client is utilizing if they were 
     * returned during a DHCP bind operation. 
     * 
     * @return	int	current DHCPOptionsToUse property value
     * @exception	Exception	
     */
    public DHCPOptionsToUse getDHCPOptionsToUse(){

    return this.dHCPOptionsToUse;
    } // getDHCPOptionsToUse

    /**
     * This method sets the DNSProtocolEndpoint.DHCPOptionsToUse property 
     * value. This property is described as follows: 
     * 
     * One or more DHCP options that the DNS client is utilizing if they were 
     * returned during a DHCP bind operation. 
     * 
     * @param	int	new DHCPOptionsToUse property value
     * @exception	Exception	
     */
    public void setDHCPOptionsToUse(DHCPOptionsToUse dHCPOptionsToUse){

    this.dHCPOptionsToUse = dHCPOptionsToUse;
    } // setDHCPOptionsToUse


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AppendParentSuffixes. 
     */
    private boolean appendParentSuffixes;
    /**
     * This method returns the DNSProtocolEndpoint.appendParentSuffixes 
     * property value. This property is described as follows: 
     * 
     * Whether or not the client appends the parent domain suffix to target 
     * names prior to attempting to resolve. 
     * 
     * @return	boolean	current appendParentSuffixes property 
     * value 
     * @exception	Exception	
     */
    public boolean isappendParentSuffixes(){

    return this.appendParentSuffixes;
    } // getappendParentSuffixes

    /**
     * This method sets the DNSProtocolEndpoint.appendParentSuffixes property 
     * value. This property is described as follows: 
     * 
     * Whether or not the client appends the parent domain suffix to target 
     * names prior to attempting to resolve. 
     * 
     * @param	boolean	new appendParentSuffixes property value
     * @exception	Exception	
     */
    public void setappendParentSuffixes(boolean appendParentSuffixes) {

    this.appendParentSuffixes = appendParentSuffixes;
    } // setappendParentSuffixes


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AppendPrimarySuffixes. 
     */
    private boolean appendPrimarySuffixes;
    /**
     * This method returns the DNSProtocolEndpoint.appendPrimarySuffixes 
     * property value. This property is described as follows: 
     * 
     * Whether or not the client appends the primary domain suffix to target 
     * names prior to attempting to resolve. 
     * 
     * @return	boolean	current appendPrimarySuffixes property 
     * value 
     * @exception	Exception	
     */
    public boolean isappendPrimarySuffixes(){

    return this.appendPrimarySuffixes;
    } // getappendPrimarySuffixes

    /**
     * This method sets the DNSProtocolEndpoint.appendPrimarySuffixes property 
     * value. This property is described as follows: 
     * 
     * Whether or not the client appends the primary domain suffix to target 
     * names prior to attempting to resolve. 
     * 
     * @param	boolean	new appendPrimarySuffixes property value
     * @exception	Exception	
     */
    public void setappendPrimarySuffixes(boolean appendPrimarySuffixes) {

    this.appendPrimarySuffixes = appendPrimarySuffixes;
    } // setappendPrimarySuffixes


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DNSSuffixesToAppend. 
     */
    private String[] dNSSuffixesToAppend;
    /**
     * This method returns the DNSProtocolEndpoint.dNSSuffixesToAppend 
     * property value. This property is described as follows: 
     * 
     * The DNS suffixes to append when attempting to resolve a hostname.
     * 
     * @return	String[]	current dNSSuffixesToAppend property 
     * value 
     * @exception	Exception	
     */
    public String[] getdNSSuffixesToAppend(){

    return this.dNSSuffixesToAppend;
    } // getdNSSuffixesToAppend

    /**
     * This method sets the DNSProtocolEndpoint.dNSSuffixesToAppend property 
     * value. This property is described as follows: 
     * 
     * The DNS suffixes to append when attempting to resolve a hostname.
     * 
     * @param	String[]	new dNSSuffixesToAppend property value
     * @exception	Exception	
     */
    public void setdNSSuffixesToAppend(String[] dNSSuffixesToAppend) {

    this.dNSSuffixesToAppend = dNSSuffixesToAppend;
    } // setdNSSuffixesToAppend


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DomainName. 
     */
    private String domainName;
    /**
     * This method returns the DNSProtocolEndpoint.domainName property value. 
     * This property is described as follows: 
     * 
     * The domain to use for this client connection.
     * 
     * @return	String	current domainName property value
     * @exception	Exception	
     */
    public String getdomainName(){

    return this.domainName;
    } // getdomainName

    /**
     * This method sets the DNSProtocolEndpoint.domainName property value. 
     * This property is described as follows: 
     * 
     * The domain to use for this client connection.
     * 
     * @param	String	new domainName property value
     * @exception	Exception	
     */
    public void setdomainName(String domainName) {

    this.domainName = domainName;
    } // setdomainName


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RegisterThisConnectionsAddress. 
     */
    private boolean registerThisConnectionsAddress;
    /**
     * This method returns the 
     * DNSProtocolEndpoint.registerThisConnectionsAddress property value. 
     * This property is described as follows: 
     * 
     * Whether or not the client attempted to register this connection's 
     * address in DNS. 
     * 
     * @return	boolean	current registerThisConnectionsAddress 
     * property value 
     * @exception	Exception	
     */
    public boolean isregisterThisConnectionsAddress(){

    return this.registerThisConnectionsAddress;
    } // getregisterThisConnectionsAddress

    /**
     * This method sets the DNSProtocolEndpoint.registerThisConnectionsAddress 
     * property value. This property is described as follows: 
     * 
     * Whether or not the client attempted to register this connection's 
     * address in DNS. 
     * 
     * @param	boolean	new registerThisConnectionsAddress 
     * property value 
     * @exception	Exception	
     */
    public void setregisterThisConnectionsAddress(boolean 
	registerThisConnectionsAddress) {

    this.registerThisConnectionsAddress = registerThisConnectionsAddress;
    } // setregisterThisConnectionsAddress


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property UseSuffixWhenRegistering. 
     */
    private boolean useSuffixWhenRegistering;
    /**
     * This method returns the DNSProtocolEndpoint.useSuffixWhenRegistering 
     * property value. This property is described as follows: 
     * 
     * Whether or not the suffix is appended before registering the client 
     * name with the DNS server. 
     * 
     * @return	boolean	current useSuffixWhenRegistering property 
     * value 
     * @exception	Exception	
     */
    public boolean isuseSuffixWhenRegistering(){

    return this.useSuffixWhenRegistering;
    } // getuseSuffixWhenRegistering

    /**
     * This method sets the DNSProtocolEndpoint.useSuffixWhenRegistering 
     * property value. This property is described as follows: 
     * 
     * Whether or not the suffix is appended before registering the client 
     * name with the DNS server. 
     * 
     * @param	boolean	new useSuffixWhenRegistering property 
     * value 
     * @exception	Exception	
     */
    public void setuseSuffixWhenRegistering(boolean useSuffixWhenRegistering) 
	{

    this.useSuffixWhenRegistering = useSuffixWhenRegistering;
    } // setuseSuffixWhenRegistering



} // Class DNSProtocolEndpoint
