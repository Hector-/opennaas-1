/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 03 
 * 14:18:55 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class ConcreteDependency as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * ConcreteDependencyBean Interface. The CIM class ConcreteDependency is 
 * described as follows: 
 * 
 * CIM_ConcreteDependency is a generic association used to establish 
 * dependency relationships between ManagedElements. It is defined as a 
 * concrete subclass of the abstract CIM_Dependency class, to be used in 
 * place of many specific subclasses of Dependency that add no semantics, 
 * that is subclasses that do not clarify the type of dependency, update 
 * cardinalities, or add or remove qualifiers. Note that when you define 
 * additional semantics for Dependency, this class must not be subclassed. 
 * Specific semantics continue to be defined as subclasses of the abstract 
 * CIM_Dependency. ConcreteDependency is limited in its use as a concrete 
 * form of a general dependency. It was deemed more prudent to create this 
 * concrete subclass than to change Dependency from an abstract to a concrete 
 * class. Dependency already had multiple abstract subclasses in the CIM 
 * Schema, and wider industry usage and impact could not be anticipated. 
 */
public class ConcreteDependency extends Dependency implements Serializable {

    /**
     * This constructor creates a ConcreteDependencyBeanImpl Class which 
     * implements the ConcreteDependencyBean Interface, and encapsulates the 
     * CIM class ConcreteDependency in a Java Bean. The CIM class 
     * ConcreteDependency is described as follows: 
     * 
     * CIM_ConcreteDependency is a generic association used to establish 
     * dependency relationships between ManagedElements. It is defined as a 
     * concrete subclass of the abstract CIM_Dependency class, to be used in 
     * place of many specific subclasses of Dependency that add no semantics, 
     * that is subclasses that do not clarify the type of dependency, update 
     * cardinalities, or add or remove qualifiers. Note that when you define 
     * additional semantics for Dependency, this class must not be 
     * subclassed. Specific semantics continue to be defined as subclasses of 
     * the abstract CIM_Dependency. ConcreteDependency is limited in its use 
     * as a concrete form of a general dependency. It was deemed more prudent 
     * to create this concrete subclass than to change Dependency from an 
     * abstract to a concrete class. Dependency already had multiple abstract 
     * subclasses in the CIM Schema, and wider industry usage and impact 
     * could not be anticipated. 
     */
    public ConcreteDependency(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Antecedent. 
     */
    private ManagedElement antecedent;
    /**
     * This method returns the ConcreteDependency.Antecedent property value. 
     * This property is described as follows: 
     * 
     * Antecedent represents the independent object in this association.
     * 
     * @return	CIM_ManagedElement	current Antecedent property 
     * value 
     * @exception	Exception	
     */
    public ManagedElement getAntecedent(){

    return (ManagedElement)antecedent;
    } // getAntecedent

    /**
     * This method sets the ConcreteDependency.Antecedent property value. This 
     * property is described as follows: 
     * 
     * Antecedent represents the independent object in this association.
     * 
     * @param	CIM_ManagedElement	new Antecedent property value
     * @exception	Exception	
     */
    public void setAntecedent(ManagedElement antecedent) {

    this.antecedent = antecedent;
    } // setAntecedent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Dependent. 
     */
    private ManagedElement dependent;
    /**
     * This method returns the ConcreteDependency.Dependent property value. 
     * This property is described as follows: 
     * 
     * Dependent represents the object that is dependent on the Antecedent.
     * 
     * @return	CIM_ManagedElement	current Dependent property 
     * value 
     * @exception	Exception	
     */
    public ManagedElement getDependent(){

    return (ManagedElement)dependent;
    } // getDependent

    /**
     * This method sets the ConcreteDependency.Dependent property value. This 
     * property is described as follows: 
     * 
     * Dependent represents the object that is dependent on the Antecedent.
     * 
     * @param	CIM_ManagedElement	new Dependent property value
     * @exception	Exception	
     */
    public void setDependent(ManagedElement dependent) {

    this.dependent = dependent;
    } // setDependent



} // Class ConcreteDependency
