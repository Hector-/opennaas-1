/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Nov 29 
 * 11:50:57 CET 2010. 
 */

package net.i2cat.mantychore.model;

import javax.wbem.client.*;
import javax.wbem.cim.*;
import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class ElementSoftwareIdentity as well as methods comparable to 
 * the invokeMethods defined for this class. This Class implements the 
 * ElementSoftwareIdentityBean Interface. The CIM class 
 * ElementSoftwareIdentity is described as follows: 
 * 
 * ElementSoftwareIdentity allows a Managed Element to report its software 
 * related asset information (firmware, drivers, configuration software, and 
 * etc.) 
 */
public class ElementSoftwareIdentity extends Dependency implements 
    Serializable {

    /**
     * This constructor creates a ElementSoftwareIdentityBeanImpl Class which 
     * implements the ElementSoftwareIdentityBean Interface, and encapsulates 
     * the CIM class ElementSoftwareIdentity in a Java Bean. The CIM class 
     * ElementSoftwareIdentity is described as follows: 
     * 
     * ElementSoftwareIdentity allows a Managed Element to report its software 
     * related asset information (firmware, drivers, configuration software, 
     * and etc.) 
     */
    public ElementSoftwareIdentity(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Antecedent. 
     */
    private SoftwareIdentity antecedent;
    /**
     * This method returns the ElementSoftwareIdentity.Antecedent property 
     * value. This property is described as follows: 
     * 
     * A LogicalElement's Software Asset.
     * 
     * @return	CIM_SoftwareIdentity	current Antecedent property 
     * value 
     * @exception	Exception	
     */
    public SoftwareIdentity getAntecedent(){

    return (SoftwareIdentity)antecedent;
    } // getAntecedent

    /**
     * This method sets the ElementSoftwareIdentity.Antecedent property value. 
     * This property is described as follows: 
     * 
     * A LogicalElement's Software Asset.
     * 
     * @param	CIM_SoftwareIdentity	new Antecedent property value
     * @exception	Exception	
     */
    public void setAntecedent(SoftwareIdentity antecedent) {

    this.antecedent = antecedent;
    } // setAntecedent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Dependent. 
     */
    private ManagedElement dependent;
    /**
     * This method returns the ElementSoftwareIdentity.Dependent property 
     * value. This property is described as follows: 
     * 
     * The ManagedElement that requires or uses the software.
     * 
     * @return	CIM_ManagedElement	current Dependent property 
     * value 
     * @exception	Exception	
     */
    public ManagedElement getDependent(){

    return (ManagedElement)dependent;
    } // getDependent

    /**
     * This method sets the ElementSoftwareIdentity.Dependent property value. 
     * This property is described as follows: 
     * 
     * The ManagedElement that requires or uses the software.
     * 
     * @param	CIM_ManagedElement	new Dependent property value
     * @exception	Exception	
     */
    public void setDependent(ManagedElement dependent) {

    this.dependent = dependent;
    } // setDependent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property UpgradeCondition. 
     */

    public enum UpgradeCondition{
    UNKNOWN,
    OTHER,
    RESIDES_OFF_DEVICE,
    OWNER_UPGRADEABLE,
    FACTORY_UPGRADEABLE,
    NOT_UPGRADEABLE,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }UpgradeCondition upgradeCondition;
    /**
     * This method returns the ElementSoftwareIdentity.UpgradeCondition 
     * property value. This property is described as follows: 
     * 
     * Indicates the element's ability to upgrade this software asset. 
     * 'Resides off element'(2), indicates the persistence of the software is 
     * outside of the element. Typically for a element this software is part 
     * of the OperatingSystem is typically upgradeable. 'Owner Upgradeable' 
     * (3), indicates the persistence of the software is on the element and 
     * is upgradeable by the owner. 'FactoryUpgradeable' (4),indicates the 
     * persistence of the software is on the element and is upgradeable by 
     * the manufacturer. 'Not Upgradeable' (5), indicates the presistence of 
     * the software is on the element and is not upgradeable. (i.e. burned 
     * into a non replaceable ROM chip. 
     * 
     * @return	short	current UpgradeCondition property value
     * @exception	Exception	
     */
    public UpgradeCondition getUpgradeCondition(){

    return this.upgradeCondition;
    } // getUpgradeCondition

    /**
     * This method sets the ElementSoftwareIdentity.UpgradeCondition property 
     * value. This property is described as follows: 
     * 
     * Indicates the element's ability to upgrade this software asset. 
     * 'Resides off element'(2), indicates the persistence of the software is 
     * outside of the element. Typically for a element this software is part 
     * of the OperatingSystem is typically upgradeable. 'Owner Upgradeable' 
     * (3), indicates the persistence of the software is on the element and 
     * is upgradeable by the owner. 'FactoryUpgradeable' (4),indicates the 
     * persistence of the software is on the element and is upgradeable by 
     * the manufacturer. 'Not Upgradeable' (5), indicates the presistence of 
     * the software is on the element and is not upgradeable. (i.e. burned 
     * into a non replaceable ROM chip. 
     * 
     * @param	short	new UpgradeCondition property value
     * @exception	Exception	
     */
    public void setUpgradeCondition(UpgradeCondition upgradeCondition){

    this.upgradeCondition = upgradeCondition;
    } // setUpgradeCondition


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherUpgradeCondition. 
     */
    private String otherUpgradeCondition;
    /**
     * This method returns the ElementSoftwareIdentity.OtherUpgradeCondition 
     * property value. This property is described as follows: 
     * 
     * Describes the upgrade condition, when UpgradeCondition is set to 1 
     * ("Other"). 
     * 
     * @return	String	current OtherUpgradeCondition property 
     * value 
     * @exception	Exception	
     */
    public String getOtherUpgradeCondition(){

    return this.otherUpgradeCondition;
    } // getOtherUpgradeCondition

    /**
     * This method sets the ElementSoftwareIdentity.OtherUpgradeCondition 
     * property value. This property is described as follows: 
     * 
     * Describes the upgrade condition, when UpgradeCondition is set to 1 
     * ("Other"). 
     * 
     * @param	String	new OtherUpgradeCondition property value
     * @exception	Exception	
     */
    public void setOtherUpgradeCondition(String otherUpgradeCondition) {

    this.otherUpgradeCondition = otherUpgradeCondition;
    } // setOtherUpgradeCondition


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ElementSoftwareStatus. 
     */

    public enum ElementSoftwareStatus{
    UNKNOWN,
    CURRENT,
    NEXT,
    FALLBACK,
    DEFAULT,
    INSTALLED,
    SINGLE_USE,
    AVAILABLE,
    SUPPORTS,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }ElementSoftwareStatus elementSoftwareStatus;
    /**
     * This method returns the ElementSoftwareIdentity.ElementSoftwareStatus 
     * property value. This property is described as follows: 
     * 
     * A collection of properties describing the status of the software on the 
     * managed element. Multiple properties could be set at the same time. 
     * For example a ElementSoftwareStatus could have "Installed", "Default", 
     * "Current" and "FallBack" set at the same time. "Current" indicates 
     * that the software is currently running on or for the Managed Element. 
     * "Next" indicates that the software will run after the next reset or 
     * reboot unless superseded by a software with a status of "SingleUse". 
     * "FallBack" indicates that the software will be run if the software 
     * which has a status of "Next" or "SingleUse" fails to run. "Default" 
     * indicates the default version of the software that was originally 
     * shipped by the manufacturer. "Installed" indicates that the software 
     * is persistently located and is available for use on the Managed 
     * Element. "SingleUse" indicates that the software will run only after 
     * the next reset or reboot but will not run after the subsequent reset 
     * or reboot. "Available" indicates that the software is available for 
     * installation on the Managed Element. "Supports"indicates that the 
     * software will work with or operate the Managed Element but is or will 
     * be installed on a different Managed Element. 
     * 
     * @return	short	current ElementSoftwareStatus property 
     * value 
     * @exception	Exception	
     */
    public ElementSoftwareStatus getElementSoftwareStatus(){

    return this.elementSoftwareStatus;
    } // getElementSoftwareStatus

    /**
     * This method sets the ElementSoftwareIdentity.ElementSoftwareStatus 
     * property value. This property is described as follows: 
     * 
     * A collection of properties describing the status of the software on the 
     * managed element. Multiple properties could be set at the same time. 
     * For example a ElementSoftwareStatus could have "Installed", "Default", 
     * "Current" and "FallBack" set at the same time. "Current" indicates 
     * that the software is currently running on or for the Managed Element. 
     * "Next" indicates that the software will run after the next reset or 
     * reboot unless superseded by a software with a status of "SingleUse". 
     * "FallBack" indicates that the software will be run if the software 
     * which has a status of "Next" or "SingleUse" fails to run. "Default" 
     * indicates the default version of the software that was originally 
     * shipped by the manufacturer. "Installed" indicates that the software 
     * is persistently located and is available for use on the Managed 
     * Element. "SingleUse" indicates that the software will run only after 
     * the next reset or reboot but will not run after the subsequent reset 
     * or reboot. "Available" indicates that the software is available for 
     * installation on the Managed Element. "Supports"indicates that the 
     * software will work with or operate the Managed Element but is or will 
     * be installed on a different Managed Element. 
     * 
     * @param	short	new ElementSoftwareStatus property value
     * @exception	Exception	
     */
    public void setElementSoftwareStatus(ElementSoftwareStatus 
	elementSoftwareStatus){

    this.elementSoftwareStatus = elementSoftwareStatus;
    } // setElementSoftwareStatus



} // Class ElementSoftwareIdentity
