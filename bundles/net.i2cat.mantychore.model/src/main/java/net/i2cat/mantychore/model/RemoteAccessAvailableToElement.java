/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class RemoteAccessAvailableToElement as well as methods 
 * comparable to the invokeMethods defined for this class. This Class 
 * implements the RemoteAccessAvailableToElementBean Interface. The CIM class 
 * RemoteAccessAvailableToElement is described as follows: 
 * 
 * Describes an element's knowledge regarding accessing other (i.e., remote) 
 * Servers and Systems. 
 */
    @Entity
public class RemoteAccessAvailableToElement extends Dependency implements 
    Serializable {

    /**
     * This constructor creates a RemoteAccessAvailableToElementBeanImpl Class 
     * which implements the RemoteAccessAvailableToElementBean Interface, and 
     * encapsulates the CIM class RemoteAccessAvailableToElement in a Java 
     * Bean. The CIM class RemoteAccessAvailableToElement is described as 
     * follows: 
     * 
     * Describes an element's knowledge regarding accessing other (i.e., 
     * remote) Servers and Systems. 
     */
    public RemoteAccessAvailableToElement(){};
    /**
     * This method create an Association of the type 
     * RemoteAccessAvailableToElement between one RemoteServiceAccessPoint 
     * object and EnabledLogicalElement object 
     */
    public Association link(RemoteServiceAccessPoint 
	antecedent,EnabledLogicalElement dependent){

    return 
	super.link(RemoteAccessAvailableToElement.class,antecedent,dependent);
    }//link
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property IsDefault. 
     */
    private boolean isDefault;
    /**
     * This method returns the RemoteAccessAvailableToElement.isDefault 
     * property value. This property is described as follows: 
     * 
     * Indicates that this access information is defined as a default 
     * configuration for the system. 
     * 
     * @return	boolean	current isDefault property value
     * @exception	Exception	
     */
    public boolean isisDefault(){

    return this.isDefault;
    } // getisDefault

    /**
     * This method sets the RemoteAccessAvailableToElement.isDefault property 
     * value. This property is described as follows: 
     * 
     * Indicates that this access information is defined as a default 
     * configuration for the system. 
     * 
     * @param	boolean	new isDefault property value
     * @exception	Exception	
     */
    public void setisDefault(boolean isDefault) {

    this.isDefault = isDefault;
    } // setisDefault


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OrderOfAccess. 
     */
    private int orderOfAccess;
    /**
     * This method returns the RemoteAccessAvailableToElement.orderOfAccess 
     * property value. This property is described as follows: 
     * 
     * When an element is accessing remote services and systems, it MAY be 
     * necessary to order those accesses. This property defines that ordering 
     * - where lower numbers indicate a higher priority for access. A value 
     * of 0 (default) indicates that ordering does not apply. If multiple 
     * RemoteAccessPoint instances have the same value for OrderOfAccess, 
     * then these AccessPoints MAY be used in any sequence defined by the 
     * implementation. 
     * 
     * @return	int	current orderOfAccess property value
     * @exception	Exception	
     */
    public int getorderOfAccess(){

    return this.orderOfAccess;
    } // getorderOfAccess

    /**
     * This method sets the RemoteAccessAvailableToElement.orderOfAccess 
     * property value. This property is described as follows: 
     * 
     * When an element is accessing remote services and systems, it MAY be 
     * necessary to order those accesses. This property defines that ordering 
     * - where lower numbers indicate a higher priority for access. A value 
     * of 0 (default) indicates that ordering does not apply. If multiple 
     * RemoteAccessPoint instances have the same value for OrderOfAccess, 
     * then these AccessPoints MAY be used in any sequence defined by the 
     * implementation. 
     * 
     * @param	int	new orderOfAccess property value
     * @exception	Exception	
     */
    public void setorderOfAccess(int orderOfAccess) {

    this.orderOfAccess = orderOfAccess;
    } // setorderOfAccess



} // Class RemoteAccessAvailableToElement
