/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 17 
 * 13:56:59 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class RemoteAccessAvailableToElement as well as methods 
 * comparable to the invokeMethods defined for this class. This Class 
 * implements the RemoteAccessAvailableToElementBean Interface. The CIM class 
 * RemoteAccessAvailableToElement is described as follows: 
 * 
 * Describes an element's knowledge regarding accessing other (i.e., remote) 
 * Servers and Systems. 
 */
public class RemoteAccessAvailableToElement extends Dependency implements 
    Serializable {

    /**
     * This constructor creates a RemoteAccessAvailableToElementBeanImpl Class 
     * which implements the RemoteAccessAvailableToElementBean Interface, and 
     * encapsulates the CIM class RemoteAccessAvailableToElement in a Java 
     * Bean. The CIM class RemoteAccessAvailableToElement is described as 
     * follows: 
     * 
     * Describes an element's knowledge regarding accessing other (i.e., 
     * remote) Servers and Systems. 
     */
    public RemoteAccessAvailableToElement(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Antecedent. 
     */
    private RemoteServiceAccessPoint antecedent;
    /**
     * This method returns the RemoteAccessAvailableToElement.Antecedent 
     * property value. This property is described as follows: 
     * 
     * The remote server or system.
     * 
     * @return	CIM_RemoteServiceAccessPoint	current Antecedent 
     * property value 
     * @exception	Exception	
     */
    public RemoteServiceAccessPoint getAntecedent(){

    return (RemoteServiceAccessPoint)antecedent;
    } // getAntecedent

    /**
     * This method sets the RemoteAccessAvailableToElement.Antecedent property 
     * value. This property is described as follows: 
     * 
     * The remote server or system.
     * 
     * @param	CIM_RemoteServiceAccessPoint	new Antecedent 
     * property value 
     * @exception	Exception	
     */
    public void setAntecedent(RemoteServiceAccessPoint antecedent) {

    this.antecedent = antecedent;
    } // setAntecedent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Dependent. 
     */
    private EnabledLogicalElement dependent;
    /**
     * This method returns the RemoteAccessAvailableToElement.Dependent 
     * property value. This property is described as follows: 
     * 
     * The EnabledLogicalElement which has knowledge of the remote server or 
     * system. 
     * 
     * @return	CIM_EnabledLogicalElement	current Dependent 
     * property value 
     * @exception	Exception	
     */
    public EnabledLogicalElement getDependent(){

    return (EnabledLogicalElement)dependent;
    } // getDependent

    /**
     * This method sets the RemoteAccessAvailableToElement.Dependent property 
     * value. This property is described as follows: 
     * 
     * The EnabledLogicalElement which has knowledge of the remote server or 
     * system. 
     * 
     * @param	CIM_EnabledLogicalElement	new Dependent property 
     * value 
     * @exception	Exception	
     */
    public void setDependent(EnabledLogicalElement dependent) {

    this.dependent = dependent;
    } // setDependent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property IsDefault. 
     */
    private boolean isDefault;
    /**
     * This method returns the RemoteAccessAvailableToElement.IsDefault 
     * property value. This property is described as follows: 
     * 
     * Indicates that this access information is defined as a default 
     * configuration for the system. 
     * 
     * @return	boolean	current IsDefault property value
     * @exception	Exception	
     */
    public boolean isIsDefault(){

    return this.isDefault;
    } // getIsDefault

    /**
     * This method sets the RemoteAccessAvailableToElement.IsDefault property 
     * value. This property is described as follows: 
     * 
     * Indicates that this access information is defined as a default 
     * configuration for the system. 
     * 
     * @param	boolean	new IsDefault property value
     * @exception	Exception	
     */
    public void setIsDefault(boolean isDefault) {

    this.isDefault = isDefault;
    } // setIsDefault


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OrderOfAccess. 
     */
    private short orderOfAccess;
    /**
     * This method returns the RemoteAccessAvailableToElement.OrderOfAccess 
     * property value. This property is described as follows: 
     * 
     * When an element is accessing remote services and systems, it MAY be 
     * necessary to order those accesses. This property defines that ordering 
     * - where lower numbers indicate a higher priority for access. A value 
     * of 0 (default) indicates that ordering does not apply. If multiple 
     * RemoteAccessPoint instances have the same value for OrderOfAccess, 
     * then these AccessPoints MAY be used in any sequence defined by the 
     * implementation. 
     * 
     * @return	short	current OrderOfAccess property value
     * @exception	Exception	
     */
    public short getOrderOfAccess(){

    return this.orderOfAccess;
    } // getOrderOfAccess

    /**
     * This method sets the RemoteAccessAvailableToElement.OrderOfAccess 
     * property value. This property is described as follows: 
     * 
     * When an element is accessing remote services and systems, it MAY be 
     * necessary to order those accesses. This property defines that ordering 
     * - where lower numbers indicate a higher priority for access. A value 
     * of 0 (default) indicates that ordering does not apply. If multiple 
     * RemoteAccessPoint instances have the same value for OrderOfAccess, 
     * then these AccessPoints MAY be used in any sequence defined by the 
     * implementation. 
     * 
     * @param	short	new OrderOfAccess property value
     * @exception	Exception	
     */
    public void setOrderOfAccess(short orderOfAccess) {

    this.orderOfAccess = orderOfAccess;
    } // setOrderOfAccess



} // Class RemoteAccessAvailableToElement
