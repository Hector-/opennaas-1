/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 15:29:20 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class EGPRouteCalcDependency as well as methods comparable to 
 * the invokeMethods defined for this class. This Class implements the 
 * EGPRouteCalcDependencyBean Interface. The CIM class EGPRouteCalcDependency 
 * is described as follows: 
 * 
 * This is a specialization of ServiceServiceDependency, and captures the 
 * dependency that external gateway protocols (such as BGP) have on interior 
 * gateway protocols (such as OSPF). 
 */
public class EGPRouteCalcDependency extends ServiceServiceDependency 
    implements Serializable {

    /**
     * This constructor creates a EGPRouteCalcDependencyBeanImpl Class which 
     * implements the EGPRouteCalcDependencyBean Interface, and encapsulates 
     * the CIM class EGPRouteCalcDependency in a Java Bean. The CIM class 
     * EGPRouteCalcDependency is described as follows: 
     * 
     * This is a specialization of ServiceServiceDependency, and captures the 
     * dependency that external gateway protocols (such as BGP) have on 
     * interior gateway protocols (such as OSPF). 
     */
    public EGPRouteCalcDependency(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Antecedent. 
     */
    private RouteCalculationService antecedent;
    /**
     * This method returns the EGPRouteCalcDependency.Antecedent property 
     * value. This property is described as follows: 
     * 
     * The independent RouteCalculationService that provides routing 
     * information from the AS, for the EGP to use. 
     * 
     * @return	CIM_RouteCalculationService	current Antecedent 
     * property value 
     * @exception	Exception	
     */
    public RouteCalculationService getAntecedent(){

    return (RouteCalculationService)antecedent;
    } // getAntecedent

    /**
     * This method sets the EGPRouteCalcDependency.Antecedent property value. 
     * This property is described as follows: 
     * 
     * The independent RouteCalculationService that provides routing 
     * information from the AS, for the EGP to use. 
     * 
     * @param	CIM_RouteCalculationService	new Antecedent 
     * property value 
     * @exception	Exception	
     */
    public void setAntecedent(RouteCalculationService antecedent) {

    this.antecedent = antecedent;
    } // setAntecedent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Dependent. 
     */
    private RouteCalculationService dependent;
    /**
     * This method returns the EGPRouteCalcDependency.Dependent property 
     * value. This property is described as follows: 
     * 
     * The dependent RouteCalculationService (e.g., the Route 
     * CalculationService) that is functioning as an EGP. 
     * 
     * @return	CIM_RouteCalculationService	current Dependent 
     * property value 
     * @exception	Exception	
     */
    public RouteCalculationService getDependent(){

    return (RouteCalculationService)dependent;
    } // getDependent

    /**
     * This method sets the EGPRouteCalcDependency.Dependent property value. 
     * This property is described as follows: 
     * 
     * The dependent RouteCalculationService (e.g., the Route 
     * CalculationService) that is functioning as an EGP. 
     * 
     * @param	CIM_RouteCalculationService	new Dependent property 
     * value 
     * @exception	Exception	
     */
    public void setDependent(RouteCalculationService dependent) {

    this.dependent = dependent;
    } // setDependent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property IGPInjection. 
     */

    public enum IGPInjection{
    NONE,
    PARTIAL,
    FULL
    }
 public IGPInjection iGPInjection;
    /**
     * This method returns the EGPRouteCalcDependency.IGPInjection property 
     * value. This property is described as follows: 
     * 
     * Sometimes it is necessary to inject EGP information, such as that from 
     * BGP, into IGPs. This attribute defines whether this should be done for 
     * the two routing protocols that are defined by this association. The 
     * values below mean that no, partial, and full EGP information is 
     * injected into the IGP, respectively. 
     * 
     * @return	short	current IGPInjection property value
     * @exception	Exception	
     */
    public IGPInjection getIGPInjection(){

    return this.iGPInjection;
    } // getIGPInjection

    /**
     * This method sets the EGPRouteCalcDependency.IGPInjection property 
     * value. This property is described as follows: 
     * 
     * Sometimes it is necessary to inject EGP information, such as that from 
     * BGP, into IGPs. This attribute defines whether this should be done for 
     * the two routing protocols that are defined by this association. The 
     * values below mean that no, partial, and full EGP information is 
     * injected into the IGP, respectively. 
     * 
     * @param	short	new IGPInjection property value
     * @exception	Exception	
     */
    public void setIGPInjection(IGPInjection iGPInjection){

    this.iGPInjection = iGPInjection;
    } // setIGPInjection



} // Class EGPRouteCalcDependency
