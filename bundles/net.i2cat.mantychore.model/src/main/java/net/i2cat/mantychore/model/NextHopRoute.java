/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 10:54:51 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class NextHopRoute as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * NextHopRouteBean Interface. The CIM class NextHopRoute is described as 
 * follows: 
 * 
 * NextHopRoute represents one of a series of 'hops' to reach a network 
 * destination. A route is administratively defined, or calculated/learned by 
 * a particular routing process. A ConcreteDependency associaton may be 
 * instantiated between a route and its routing service to indicate this. (In 
 * this scenario, the route is dependent on the service.) 
 */
public class NextHopRoute extends ManagedElement implements Serializable {

    /**
     * This constructor creates a NextHopRouteBeanImpl Class which implements 
     * the NextHopRouteBean Interface, and encapsulates the CIM class 
     * NextHopRoute in a Java Bean. The CIM class NextHopRoute is described 
     * as follows: 
     * 
     * NextHopRoute represents one of a series of 'hops' to reach a network 
     * destination. A route is administratively defined, or 
     * calculated/learned by a particular routing process. A 
     * ConcreteDependency associaton may be instantiated between a route and 
     * its routing service to indicate this. (In this scenario, the route is 
     * dependent on the service.) 
     */
    public NextHopRoute(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property InstanceID. 
     */
    private String instanceID;
    /**
     * This method returns the NextHopRoute.InstanceID property value. This 
     * property is described as follows: 
     * 
     * Within the scope of the instantiating Namespace, InstanceID opaquely 
     * and uniquely identifies an instance of this class. In order to ensure 
     * uniqueness within the NameSpace, the value of InstanceID SHOULD be 
     * constructed using the following 'preferred' algorithm: 
     * <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon 
     * ':', and where <OrgID> MUST include a copyrighted, trademarked or 
     * otherwise unique name that is owned by the business entity 
     * creating/defining the InstanceID, or is a registered ID that is 
     * assigned to the business entity by a recognized global authority. 
     * (This is similar to the <Schema Name>_<Class Name> structure of Schema 
     * class names.) In addition, to ensure uniqueness <OrgID> MUST NOT 
     * contain a colon (':'). When using this algorithm, the first colon to 
     * appear in InstanceID MUST appear between <OrgID> and <LocalID>. 
     * <LocalID> is chosen by the business entity and SHOULD not be re-used 
     * to identify different underlying (real-world) elements. If the above 
     * 'preferred' algorithm is not used, the defining entity MUST assure 
     * that the resultant InstanceID is not re-used across any InstanceIDs 
     * produced by this or other providers for this instance's NameSpace. For 
     * DMTF defined instances, the 'preferred' algorithm MUST be used with 
     * the <OrgID> set to 'CIM'. 
     * 
     * @return	String	current InstanceID property value
     * @exception	Exception	
     */
    public String getInstanceID(){

    return (String)instanceID;
    } // getInstanceID

    /**
     * This method sets the NextHopRoute.InstanceID property value. This 
     * property is described as follows: 
     * 
     * Within the scope of the instantiating Namespace, InstanceID opaquely 
     * and uniquely identifies an instance of this class. In order to ensure 
     * uniqueness within the NameSpace, the value of InstanceID SHOULD be 
     * constructed using the following 'preferred' algorithm: 
     * <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon 
     * ':', and where <OrgID> MUST include a copyrighted, trademarked or 
     * otherwise unique name that is owned by the business entity 
     * creating/defining the InstanceID, or is a registered ID that is 
     * assigned to the business entity by a recognized global authority. 
     * (This is similar to the <Schema Name>_<Class Name> structure of Schema 
     * class names.) In addition, to ensure uniqueness <OrgID> MUST NOT 
     * contain a colon (':'). When using this algorithm, the first colon to 
     * appear in InstanceID MUST appear between <OrgID> and <LocalID>. 
     * <LocalID> is chosen by the business entity and SHOULD not be re-used 
     * to identify different underlying (real-world) elements. If the above 
     * 'preferred' algorithm is not used, the defining entity MUST assure 
     * that the resultant InstanceID is not re-used across any InstanceIDs 
     * produced by this or other providers for this instance's NameSpace. For 
     * DMTF defined instances, the 'preferred' algorithm MUST be used with 
     * the <OrgID> set to 'CIM'. 
     * 
     * @param	String	new InstanceID property value
     * @exception	Exception	
     */
    public void setInstanceID(String instanceID) {

    this.instanceID = instanceID;
    } // setInstanceID


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DestinationAddress. 
     */
    private String destinationAddress;
    /**
     * This method returns the NextHopRoute.DestinationAddress property value. 
     * This property is described as follows: 
     * 
     * The address which serves as the destination to be reached.
     * 
     * @return	String	current DestinationAddress property value
     * @exception	Exception	
     */
    public String getDestinationAddress(){

    return this.destinationAddress;
    } // getDestinationAddress

    /**
     * This method sets the NextHopRoute.DestinationAddress property value. 
     * This property is described as follows: 
     * 
     * The address which serves as the destination to be reached.
     * 
     * @param	String	new DestinationAddress property value
     * @exception	Exception	
     */
    public void setDestinationAddress(String destinationAddress) {

    this.destinationAddress = destinationAddress;
    } // setDestinationAddress


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AdminDistance. 
     */
    private short adminDistance;
    /**
     * This method returns the NextHopRoute.AdminDistance property value. This 
     * property is described as follows: 
     * 
     * The specific administrative distance of this route, overriding any 
     * default distances specified by the system or routing service. 
     * 
     * @return	short	current AdminDistance property value
     * @exception	Exception	
     */
    public short getAdminDistance(){

    return this.adminDistance;
    } // getAdminDistance

    /**
     * This method sets the NextHopRoute.AdminDistance property value. This 
     * property is described as follows: 
     * 
     * The specific administrative distance of this route, overriding any 
     * default distances specified by the system or routing service. 
     * 
     * @param	short	new AdminDistance property value
     * @exception	Exception	
     */
    public void setAdminDistance(short adminDistance) {

    this.adminDistance = adminDistance;
    } // setAdminDistance


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RouteMetric. 
     */
    private short routeMetric;
    /**
     * This method returns the NextHopRoute.RouteMetric property value. This 
     * property is described as follows: 
     * 
     * RouteMetric provides a numeric indication as to the preference of this 
     * route, compared to other routes that reach the same destination. 
     * 
     * @return	short	current RouteMetric property value
     * @exception	Exception	
     */
    public short getRouteMetric(){

    return this.routeMetric;
    } // getRouteMetric

    /**
     * This method sets the NextHopRoute.RouteMetric property value. This 
     * property is described as follows: 
     * 
     * RouteMetric provides a numeric indication as to the preference of this 
     * route, compared to other routes that reach the same destination. 
     * 
     * @param	short	new RouteMetric property value
     * @exception	Exception	
     */
    public void setRouteMetric(short routeMetric) {

    this.routeMetric = routeMetric;
    } // setRouteMetric


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property IsStatic. 
     */
    private boolean isStatic;
    /**
     * This method returns the NextHopRoute.IsStatic property value. This 
     * property is described as follows: 
     * 
     * TRUE indicates that this is a static route, and FALSE indicates a 
     * dynamically-learned route. 
     * 
     * @return	boolean	current IsStatic property value
     * @exception	Exception	
     */
    public boolean isIsStatic(){

    return this.isStatic;
    } // getIsStatic

    /**
     * This method sets the NextHopRoute.IsStatic property value. This 
     * property is described as follows: 
     * 
     * TRUE indicates that this is a static route, and FALSE indicates a 
     * dynamically-learned route. 
     * 
     * @param	boolean	new IsStatic property value
     * @exception	Exception	
     */
    public void setIsStatic(boolean isStatic) {

    this.isStatic = isStatic;
    } // setIsStatic


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property TypeOfRoute. 
     */

    public enum TypeOfRoute{
    ADMINISTRATOR_DEFINED_ROUTE,
    COMPUTED_ROUTE,
    ACTUAL_ROUTE
    }TypeOfRoute typeOfRoute;
    /**
     * This method returns the NextHopRoute.TypeOfRoute property value. This 
     * property is described as follows: 
     * 
     * An enumerated integer indicating whether the route is 
     * administrator-defined (value=2), computed (via a routing 
     * protocol/algorithm, value=3) or the actual route implemented in the 
     * network (value=4). The default is a computed route. 
     * 
     * @return	short	current TypeOfRoute property value
     * @exception	Exception	
     */
    public TypeOfRoute getTypeOfRoute(){

    return this.typeOfRoute;
    } // getTypeOfRoute

    /**
     * This method sets the NextHopRoute.TypeOfRoute property value. This 
     * property is described as follows: 
     * 
     * An enumerated integer indicating whether the route is 
     * administrator-defined (value=2), computed (via a routing 
     * protocol/algorithm, value=3) or the actual route implemented in the 
     * network (value=4). The default is a computed route. 
     * 
     * @param	short	new TypeOfRoute property value
     * @exception	Exception	
     */
    public void setTypeOfRoute(TypeOfRoute typeOfRoute){

    this.typeOfRoute = typeOfRoute;
    } // setTypeOfRoute



} // Class NextHopRoute
