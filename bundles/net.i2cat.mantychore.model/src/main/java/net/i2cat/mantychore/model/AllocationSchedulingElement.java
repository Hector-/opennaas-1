/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Nov 29 
 * 11:50:57 CET 2010. 
 */

package net.i2cat.mantychore.model;

import javax.wbem.client.*;
import javax.wbem.cim.*;
import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class AllocationSchedulingElement as well as methods comparable 
 * to the invokeMethods defined for this class. This Class implements the 
 * AllocationSchedulingElementBean Interface. The CIM class 
 * AllocationSchedulingElement is described as follows: 
 * 
 * This class is a subclass of the abstract class SchedulingElement. It 
 * introduces five new properties to support bandwidth-based scheduling. As 
 * is the case with all subclasses of SchedulingElement, the input associated 
 * with an instance of AllocationSchedulingElement is of one of two types: 
 * either a queue, or another scheduler. 
 */
public class AllocationSchedulingElement extends SchedulingElement implements 
    Serializable {

    /**
     * This constructor creates a AllocationSchedulingElementBeanImpl Class 
     * which implements the AllocationSchedulingElementBean Interface, and 
     * encapsulates the CIM class AllocationSchedulingElement in a Java Bean. 
     * The CIM class AllocationSchedulingElement is described as follows: 
     * 
     * This class is a subclass of the abstract class SchedulingElement. It 
     * introduces five new properties to support bandwidth-based scheduling. 
     * As is the case with all subclasses of SchedulingElement, the input 
     * associated with an instance of AllocationSchedulingElement is of one 
     * of two types: either a queue, or another scheduler. 
     */
    public AllocationSchedulingElement(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AllocationUnits. 
     */

    public enum AllocationUnits{
    BYTES,
    PACKETS,
    CELLS
    }AllocationUnits allocationUnits;
    /**
     * This method returns the AllocationSchedulingElement.AllocationUnits 
     * property value. This property is described as follows: 
     * 
     * A 16-bit unsigned integer enumeration that identifies the units in 
     * which the BandwidthAllocation and BurstAllocation properties are 
     * expressed. The following values are defined: - Bytes(1) - Packets(2) - 
     * Cells(3) (fixed-size, for example, ATM) If no value is specified, 1 
     * ("Bytes") should be assumed. 
     * 
     * @return	short	current AllocationUnits property value
     * @exception	Exception	
     */
    public AllocationUnits getAllocationUnits(){

    return this.allocationUnits;
    } // getAllocationUnits

    /**
     * This method sets the AllocationSchedulingElement.AllocationUnits 
     * property value. This property is described as follows: 
     * 
     * A 16-bit unsigned integer enumeration that identifies the units in 
     * which the BandwidthAllocation and BurstAllocation properties are 
     * expressed. The following values are defined: - Bytes(1) - Packets(2) - 
     * Cells(3) (fixed-size, for example, ATM) If no value is specified, 1 
     * ("Bytes") should be assumed. 
     * 
     * @param	short	new AllocationUnits property value
     * @exception	Exception	
     */
    public void setAllocationUnits(AllocationUnits allocationUnits){

    this.allocationUnits = allocationUnits;
    } // setAllocationUnits


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property BandwidthAllocation. 
     */
    private int bandwidthAllocation;
    /**
     * This method returns the AllocationSchedulingElement.BandwidthAllocation 
     * property value. This property is described as follows: 
     * 
     * A 32-bit bit unsigned integer defining the number of 'units' per second 
     * that should be allocated to the associated input. 'Units' are 
     * identified by the AllocationUnits property. 
     * 
     * @return	int	current BandwidthAllocation property value
     * @exception	Exception	
     */
    public int getBandwidthAllocation(){

    return this.bandwidthAllocation;
    } // getBandwidthAllocation

    /**
     * This method sets the AllocationSchedulingElement.BandwidthAllocation 
     * property value. This property is described as follows: 
     * 
     * A 32-bit bit unsigned integer defining the number of 'units' per second 
     * that should be allocated to the associated input. 'Units' are 
     * identified by the AllocationUnits property. 
     * 
     * @param	int	new BandwidthAllocation property value
     * @exception	Exception	
     */
    public void setBandwidthAllocation(int bandwidthAllocation) {

    this.bandwidthAllocation = bandwidthAllocation;
    } // setBandwidthAllocation


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property BurstAllocation. 
     */
    private int burstAllocation;
    /**
     * This method returns the AllocationSchedulingElement.BurstAllocation 
     * property value. This property is described as follows: 
     * 
     * A 32-bit bit unsigned integer specifying the amount of temporary or 
     * short-term bandwidth (in 'units' per second) that can be allocated to 
     * an input, beyond the amount of bandwidth allocated through the 
     * BandwidthAllocation property. If the maximum actual bandwidth 
     * allocation for the input were to be measured, it would be the sum of 
     * the BurstAllocation and the BandwidthAllocation properties. 'Units' 
     * are identified by the AllocationUnits property. 
     * 
     * @return	int	current BurstAllocation property value
     * @exception	Exception	
     */
    public int getBurstAllocation(){

    return this.burstAllocation;
    } // getBurstAllocation

    /**
     * This method sets the AllocationSchedulingElement.BurstAllocation 
     * property value. This property is described as follows: 
     * 
     * A 32-bit bit unsigned integer specifying the amount of temporary or 
     * short-term bandwidth (in 'units' per second) that can be allocated to 
     * an input, beyond the amount of bandwidth allocated through the 
     * BandwidthAllocation property. If the maximum actual bandwidth 
     * allocation for the input were to be measured, it would be the sum of 
     * the BurstAllocation and the BandwidthAllocation properties. 'Units' 
     * are identified by the AllocationUnits property. 
     * 
     * @param	int	new BurstAllocation property value
     * @exception	Exception	
     */
    public void setBurstAllocation(int burstAllocation) {

    this.burstAllocation = burstAllocation;
    } // setBurstAllocation


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CanShare. 
     */
    private boolean canShare;
    /**
     * This method returns the AllocationSchedulingElement.CanShare property 
     * value. This property is described as follows: 
     * 
     * A boolean property that, if TRUE, enables unused bandwidth from the 
     * associated input to be allocated to other inputs serviced by the 
     * Scheduler. 
     * 
     * @return	boolean	current CanShare property value
     * @exception	Exception	
     */
    public boolean isCanShare(){

    return this.canShare;
    } // getCanShare

    /**
     * This method sets the AllocationSchedulingElement.CanShare property 
     * value. This property is described as follows: 
     * 
     * A boolean property that, if TRUE, enables unused bandwidth from the 
     * associated input to be allocated to other inputs serviced by the 
     * Scheduler. 
     * 
     * @param	boolean	new CanShare property value
     * @exception	Exception	
     */
    public void setCanShare(boolean canShare) {

    this.canShare = canShare;
    } // setCanShare


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property WorkFlexible. 
     */
    private boolean workFlexible;
    /**
     * This method returns the AllocationSchedulingElement.WorkFlexible 
     * property value. This property is described as follows: 
     * 
     * A boolean property that, if TRUE, indicates that the behavior of the 
     * scheduler relative to this input can be altered by changing the value 
     * of the inherited property, WorkConserving. 
     * 
     * @return	boolean	current WorkFlexible property value
     * @exception	Exception	
     */
    public boolean isWorkFlexible(){

    return this.workFlexible;
    } // getWorkFlexible

    /**
     * This method sets the AllocationSchedulingElement.WorkFlexible property 
     * value. This property is described as follows: 
     * 
     * A boolean property that, if TRUE, indicates that the behavior of the 
     * scheduler relative to this input can be altered by changing the value 
     * of the inherited property, WorkConserving. 
     * 
     * @param	boolean	new WorkFlexible property value
     * @exception	Exception	
     */
    public void setWorkFlexible(boolean workFlexible) {

    this.workFlexible = workFlexible;
    } // setWorkFlexible



} // Class AllocationSchedulingElement
