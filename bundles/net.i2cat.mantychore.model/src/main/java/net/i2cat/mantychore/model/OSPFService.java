/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class OSPFService as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * OSPFServiceBean Interface. The CIM class OSPFService is described as 
 * follows: 
 * 
 * This class is used to represent the basic operation of OSPF. It is derived 
 * from the RouteCalculationService, the superclass of all routing protocols. 
 */
    @Entity
public class OSPFService extends RouteCalculationService implements 
    Serializable {

    /**
     * This constructor creates a OSPFServiceBeanImpl Class which implements 
     * the OSPFServiceBean Interface, and encapsulates the CIM class 
     * OSPFService in a Java Bean. The CIM class OSPFService is described as 
     * follows: 
     * 
     * This class is used to represent the basic operation of OSPF. It is 
     * derived from the RouteCalculationService, the superclass of all 
     * routing protocols. 
     */
    public OSPFService(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RunningMOSPF. 
     */
    private boolean runningMOSPF;
    /**
     * This method returns the OSPFService.runningMOSPF property value. This 
     * property is described as follows: 
     * 
     * This attribute indicates whether this router is running MOSPF 
     * (multicast enhancements to OSPF) or not, see B.1 in RFC 1584. This 
     * attribute only can be true, when the SupportMOSPF property in 
     * OSPFService Capabilities is also true. If SupportMOSPF is false, then 
     * this property has no meaning. 
     * 
     * @return	boolean	current runningMOSPF property value
     * @exception	Exception	
     */
    public boolean isrunningMOSPF(){

    return this.runningMOSPF;
    } // getrunningMOSPF

    /**
     * This method sets the OSPFService.runningMOSPF property value. This 
     * property is described as follows: 
     * 
     * This attribute indicates whether this router is running MOSPF 
     * (multicast enhancements to OSPF) or not, see B.1 in RFC 1584. This 
     * attribute only can be true, when the SupportMOSPF property in 
     * OSPFService Capabilities is also true. If SupportMOSPF is false, then 
     * this property has no meaning. 
     * 
     * @param	boolean	new runningMOSPF property value
     * @exception	Exception	
     */
    public void setrunningMOSPF(boolean runningMOSPF) {

    this.runningMOSPF = runningMOSPF;
    } // setrunningMOSPF


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property IsInterAreaMulticastForwarder. 
     */
    private boolean isInterAreaMulticastForwarder;
    /**
     * This method returns the OSPFService.isInterAreaMulticastForwarder 
     * property value. This property is described as follows: 
     * 
     * This attribute indicates whether this router will forward multicast 
     * datagrams between OSPF areas or not, see B.1 in RFC 1584. 
     * 
     * @return	boolean	current isInterAreaMulticastForwarder 
     * property value 
     * @exception	Exception	
     */
    public boolean isisInterAreaMulticastForwarder(){

    return this.isInterAreaMulticastForwarder;
    } // getisInterAreaMulticastForwarder

    /**
     * This method sets the OSPFService.isInterAreaMulticastForwarder property 
     * value. This property is described as follows: 
     * 
     * This attribute indicates whether this router will forward multicast 
     * datagrams between OSPF areas or not, see B.1 in RFC 1584. 
     * 
     * @param	boolean	new isInterAreaMulticastForwarder property 
     * value 
     * @exception	Exception	
     */
    public void setisInterAreaMulticastForwarder(boolean 
	isInterAreaMulticastForwarder) {

    this.isInterAreaMulticastForwarder = isInterAreaMulticastForwarder;
    } // setisInterAreaMulticastForwarder


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property IsInterAsMulticastForwarder. 
     */
    private boolean isInterAsMulticastForwarder;
    /**
     * This method returns the OSPFService.isInterAsMulticastForwarder 
     * property value. This property is described as follows: 
     * 
     * This attribute indicates whether this router will forward multicast 
     * datagrams between Autonomous Systems or not, see B.1 in RFC 1584. 
     * 
     * @return	boolean	current isInterAsMulticastForwarder 
     * property value 
     * @exception	Exception	
     */
    public boolean isisInterAsMulticastForwarder(){

    return this.isInterAsMulticastForwarder;
    } // getisInterAsMulticastForwarder

    /**
     * This method sets the OSPFService.isInterAsMulticastForwarder property 
     * value. This property is described as follows: 
     * 
     * This attribute indicates whether this router will forward multicast 
     * datagrams between Autonomous Systems or not, see B.1 in RFC 1584. 
     * 
     * @param	boolean	new isInterAsMulticastForwarder property 
     * value 
     * @exception	Exception	
     */
    public void setisInterAsMulticastForwarder(boolean 
	isInterAsMulticastForwarder) {

    this.isInterAsMulticastForwarder = isInterAsMulticastForwarder;
    } // setisInterAsMulticastForwarder


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ExitOverflowInterval. 
     */
    private long exitOverflowInterval;
    /**
     * This method returns the OSPFService.exitOverflowInterval property 
     * value. This property is described as follows: 
     * 
     * The number of seconds that, after entering OverflowState, a router will 
     * attempt to leave OverflowState. When set to 0, the router will not 
     * leave OverflowState until restarted, see 2.1 in RFC 1765. 
     * 
     * @return	long	current exitOverflowInterval property value
     * @exception	Exception	
     */
    public long getexitOverflowInterval(){

    return this.exitOverflowInterval;
    } // getexitOverflowInterval

    /**
     * This method sets the OSPFService.exitOverflowInterval property value. 
     * This property is described as follows: 
     * 
     * The number of seconds that, after entering OverflowState, a router will 
     * attempt to leave OverflowState. When set to 0, the router will not 
     * leave OverflowState until restarted, see 2.1 in RFC 1765. 
     * 
     * @param	long	new exitOverflowInterval property value
     * @exception	Exception	
     */
    public void setexitOverflowInterval(long exitOverflowInterval) {

    this.exitOverflowInterval = exitOverflowInterval;
    } // setexitOverflowInterval


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RFC1583Compatibility. 
     */
    private boolean rFC1583Compatibility;
    /**
     * This method returns the OSPFService.rFC1583Compatibility property 
     * value. This property is described as follows: 
     * 
     * Controls the preference rules used in choosing among multiple 
     * AS-external-LSAs advertising the same destination. When set to TRUE, 
     * the preference rules remain those specified by RFC 1583. When set to 
     * FALSE, the preference rules are those stated in RFC 2328, which 
     * prevent routing loops when AS-external-LSAs for the same destination 
     * have been originated from different areas. See C.1 in RFC2328. 
     * 
     * @return	boolean	current rFC1583Compatibility property 
     * value 
     * @exception	Exception	
     */
    public boolean isrFC1583Compatibility(){

    return this.rFC1583Compatibility;
    } // getrFC1583Compatibility

    /**
     * This method sets the OSPFService.rFC1583Compatibility property value. 
     * This property is described as follows: 
     * 
     * Controls the preference rules used in choosing among multiple 
     * AS-external-LSAs advertising the same destination. When set to TRUE, 
     * the preference rules remain those specified by RFC 1583. When set to 
     * FALSE, the preference rules are those stated in RFC 2328, which 
     * prevent routing loops when AS-external-LSAs for the same destination 
     * have been originated from different areas. See C.1 in RFC2328. 
     * 
     * @param	boolean	new rFC1583Compatibility property value
     * @exception	Exception	
     */
    public void setrFC1583Compatibility(boolean rFC1583Compatibility) {

    this.rFC1583Compatibility = rFC1583Compatibility;
    } // setrFC1583Compatibility



} // Class OSPFService
