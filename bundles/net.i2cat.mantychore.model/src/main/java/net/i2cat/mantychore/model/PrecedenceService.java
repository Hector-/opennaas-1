/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Nov 29 
 * 11:50:57 CET 2010. 
 */

package net.i2cat.mantychore.model;

import javax.wbem.client.*;
import javax.wbem.cim.*;
import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class PrecedenceService as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * PrecedenceServiceBean Interface. The CIM class PrecedenceService is 
 * described as follows: 
 * 
 * This class represents a specialization of the general concept of forwarding 
 * network traffic by adding specific semantics that define how traffic is 
 * forwarded based on the value of the ToS byte of a packet. This class is 
 * used to enable DiffServ devices and non- DiffServ devices to exchange 
 * traffic. This is done by defining a sibling class, DiffServService, to 
 * represent devices that forward traffic based on the DiffServ code point. 
 * This enables the administrator to define mappings between devices that do 
 * not support DiffServ (and instead use IP Precedence) and those that do 
 * support DiffServ. PrecedenceService is deprecated since forwarding based 
 * on the value of the ToS byte is specified using a FilterList, which is 
 * associated with a ClassifierElement. If there is a need to distinguish a 
 * higher-level set of coordinated QoS services, the QoSService class can be 
 * instantiated directly. 
 */
public class PrecedenceService extends QoSService implements Serializable {

    /**
     * This constructor creates a PrecedenceServiceBeanImpl Class which 
     * implements the PrecedenceServiceBean Interface, and encapsulates the 
     * CIM class PrecedenceService in a Java Bean. The CIM class 
     * PrecedenceService is described as follows: 
     * 
     * This class represents a specialization of the general concept of 
     * forwarding network traffic by adding specific semantics that define 
     * how traffic is forwarded based on the value of the ToS byte of a 
     * packet. This class is used to enable DiffServ devices and non- 
     * DiffServ devices to exchange traffic. This is done by defining a 
     * sibling class, DiffServService, to represent devices that forward 
     * traffic based on the DiffServ code point. This enables the 
     * administrator to define mappings between devices that do not support 
     * DiffServ (and instead use IP Precedence) and those that do support 
     * DiffServ. PrecedenceService is deprecated since forwarding based on 
     * the value of the ToS byte is specified using a FilterList, which is 
     * associated with a ClassifierElement. If there is a need to distinguish 
     * a higher-level set of coordinated QoS services, the QoSService class 
     * can be instantiated directly. 
     */
    public PrecedenceService(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PrecedenceValue. 
     */
    @Deprecated    private Byte precedenceValue;
    /**
     * This method returns the PrecedenceService.PrecedenceValue property 
     * value. This property is described as follows: 
     * 
     * This property is an 8-bit unsigned integer that defines the notion of 
     * precedence for different types of traffic. 
     * 
     * @return	Byte	current PrecedenceValue property value
     * @exception	Exception	
     */
    @Deprecated
    public Byte getPrecedenceValue(){

    return this.precedenceValue;
    } // getPrecedenceValue

    /**
     * This method sets the PrecedenceService.PrecedenceValue property value. 
     * This property is described as follows: 
     * 
     * This property is an 8-bit unsigned integer that defines the notion of 
     * precedence for different types of traffic. 
     * 
     * @param	Byte	new PrecedenceValue property value
     * @exception	Exception	
     */
    @Deprecated
    public void setPrecedenceValue(Byte precedenceValue) {

    this.precedenceValue = precedenceValue;
    } // setPrecedenceValue



} // Class PrecedenceService
