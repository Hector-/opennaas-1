/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 03 
 * 14:18:55 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class SoftwareIdentity as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * SoftwareIdentityBean Interface. The CIM class SoftwareIdentity is 
 * described as follows: 
 * 
 * SoftwareIdentity provides descriptive information about a software 
 * component for asset tracking and/or installation dependency management. 
 * When the IsEntity property has the value TRUE, the instance of 
 * SoftwareIdentity represents an individually identifiable entity similar to 
 * Physical Element. SoftwareIdentity does NOT indicate whether the software 
 * is installed, executing, etc. This extra information may be provided 
 * through specialized associations to Software Identity. For instance, both 
 * InstalledSoftwareIdentity and ElementSoftwareIdentity may be used to 
 * indicate that the software identified by this class is installed. 
 * SoftwareIdentity is used when managing the software components of a 
 * ManagedElement that is the management focus. Since software may be 
 * acquired, SoftwareIdentity can be associated with a Product using the 
 * ProductSoftwareComponent relationship. The Application Model manages the 
 * deployment and installation of software via the classes, SoftwareFeatures 
 * and SoftwareElements. SoftwareFeature and SoftwareElement are used when 
 * the software component is the management focus. The 
 * deployment/installation concepts are related to the asset/identity one. In 
 * fact, a SoftwareIdentity may correspond to a Product, or to one or more 
 * SoftwareFeatures or SoftwareElements - depending on the granularity of 
 * these classes and the deployment model. The correspondence of Software 
 * Identity to Product, SoftwareFeature or SoftwareElement is indicated using 
 * the ConcreteIdentity association. Note that there may not be sufficient 
 * detail or instrumentation to instantiate ConcreteIdentity. And, if the 
 * association is instantiated, some duplication of information may result. 
 * For example, the Vendor described in the instances of Product and 
 * SoftwareIdentity MAY be the same. However, this is not necessarily true, 
 * and it is why vendor and similar information are duplicated in this class. 
 * Note that ConcreteIdentity can also be used to describe the relationship 
 * of the software to any LogicalFiles that result from installing it. As 
 * above, there may not be sufficient detail or instrumentation to 
 * instantiate this association. 
 */
public class SoftwareIdentity extends LogicalElement implements Serializable 
    {

    /**
     * This constructor creates a SoftwareIdentityBeanImpl Class which 
     * implements the SoftwareIdentityBean Interface, and encapsulates the 
     * CIM class SoftwareIdentity in a Java Bean. The CIM class 
     * SoftwareIdentity is described as follows: 
     * 
     * SoftwareIdentity provides descriptive information about a software 
     * component for asset tracking and/or installation dependency 
     * management. When the IsEntity property has the value TRUE, the 
     * instance of SoftwareIdentity represents an individually identifiable 
     * entity similar to Physical Element. SoftwareIdentity does NOT indicate 
     * whether the software is installed, executing, etc. This extra 
     * information may be provided through specialized associations to 
     * Software Identity. For instance, both InstalledSoftwareIdentity and 
     * ElementSoftwareIdentity may be used to indicate that the software 
     * identified by this class is installed. SoftwareIdentity is used when 
     * managing the software components of a ManagedElement that is the 
     * management focus. Since software may be acquired, SoftwareIdentity can 
     * be associated with a Product using the ProductSoftwareComponent 
     * relationship. The Application Model manages the deployment and 
     * installation of software via the classes, SoftwareFeatures and 
     * SoftwareElements. SoftwareFeature and SoftwareElement are used when 
     * the software component is the management focus. The 
     * deployment/installation concepts are related to the asset/identity 
     * one. In fact, a SoftwareIdentity may correspond to a Product, or to 
     * one or more SoftwareFeatures or SoftwareElements - depending on the 
     * granularity of these classes and the deployment model. The 
     * correspondence of Software Identity to Product, SoftwareFeature or 
     * SoftwareElement is indicated using the ConcreteIdentity association. 
     * Note that there may not be sufficient detail or instrumentation to 
     * instantiate ConcreteIdentity. And, if the association is instantiated, 
     * some duplication of information may result. For example, the Vendor 
     * described in the instances of Product and SoftwareIdentity MAY be the 
     * same. However, this is not necessarily true, and it is why vendor and 
     * similar information are duplicated in this class. Note that 
     * ConcreteIdentity can also be used to describe the relationship of the 
     * software to any LogicalFiles that result from installing it. As above, 
     * there may not be sufficient detail or instrumentation to instantiate 
     * this association. 
     */
    public SoftwareIdentity(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property InstanceID. 
     */
    private String instanceID;
    /**
     * This method returns the SoftwareIdentity.InstanceID property value. 
     * This property is described as follows: 
     * 
     * Within the scope of the instantiating Namespace, InstanceID opaquely 
     * and uniquely identifies an instance of this class. In order to ensure 
     * uniqueness within the NameSpace, the value of InstanceID SHOULD be 
     * constructed using the following 'preferred' algorithm: 
     * <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon 
     * ':', and where <OrgID> MUST include a copyrighted, trademarked or 
     * otherwise unique name that is owned by the business entity 
     * creating/defining the InstanceID, or is a registered ID that is 
     * assigned to the business entity by a recognized global authority (This 
     * is similar to the <Schema Name>_<Class Name> structure of Schema class 
     * names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a 
     * colon (':'). When using this algorithm, the first colon to appear in 
     * InstanceID MUST appear between <OrgID> and <LocalID>. <LocalID> is 
     * chosen by the business entity and SHOULD not be re-used to identify 
     * different underlying (real-world) elements. If the above 'preferred' 
     * algorithm is not used, the defining entity MUST assure that the 
     * resultant InstanceID is not re-used across any InstanceIDs produced by 
     * this or other providers for this instance's NameSpace. For DMTF 
     * defined instances, the 'preferred' algorithm MUST be used with the 
     * <OrgID> set to 'CIM'. 
     * 
     * @return	String	current InstanceID property value
     * @exception	Exception	
     */
    public String getInstanceID(){

    return (String)instanceID;
    } // getInstanceID

    /**
     * This method sets the SoftwareIdentity.InstanceID property value. This 
     * property is described as follows: 
     * 
     * Within the scope of the instantiating Namespace, InstanceID opaquely 
     * and uniquely identifies an instance of this class. In order to ensure 
     * uniqueness within the NameSpace, the value of InstanceID SHOULD be 
     * constructed using the following 'preferred' algorithm: 
     * <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon 
     * ':', and where <OrgID> MUST include a copyrighted, trademarked or 
     * otherwise unique name that is owned by the business entity 
     * creating/defining the InstanceID, or is a registered ID that is 
     * assigned to the business entity by a recognized global authority (This 
     * is similar to the <Schema Name>_<Class Name> structure of Schema class 
     * names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a 
     * colon (':'). When using this algorithm, the first colon to appear in 
     * InstanceID MUST appear between <OrgID> and <LocalID>. <LocalID> is 
     * chosen by the business entity and SHOULD not be re-used to identify 
     * different underlying (real-world) elements. If the above 'preferred' 
     * algorithm is not used, the defining entity MUST assure that the 
     * resultant InstanceID is not re-used across any InstanceIDs produced by 
     * this or other providers for this instance's NameSpace. For DMTF 
     * defined instances, the 'preferred' algorithm MUST be used with the 
     * <OrgID> set to 'CIM'. 
     * 
     * @param	String	new InstanceID property value
     * @exception	Exception	
     */
    public void setInstanceID(String instanceID) {

    this.instanceID = instanceID;
    } // setInstanceID


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MajorVersion. 
     */
    private short majorVersion;
    /**
     * This method returns the SoftwareIdentity.MajorVersion property value. 
     * This property is described as follows: 
     * 
     * The major number component of the software's version information - for 
     * example, '12' from version 12.1(3)T. This property is defined as a 
     * numeric value to allow the determination of 'newer' vs. 'older' 
     * releases. A 'newer' major release is indicated by a larger numeric 
     * value. 
     * 
     * @return	short	current MajorVersion property value
     * @exception	Exception	
     */
    public short getMajorVersion(){

    return this.majorVersion;
    } // getMajorVersion

    /**
     * This method sets the SoftwareIdentity.MajorVersion property value. This 
     * property is described as follows: 
     * 
     * The major number component of the software's version information - for 
     * example, '12' from version 12.1(3)T. This property is defined as a 
     * numeric value to allow the determination of 'newer' vs. 'older' 
     * releases. A 'newer' major release is indicated by a larger numeric 
     * value. 
     * 
     * @param	short	new MajorVersion property value
     * @exception	Exception	
     */
    public void setMajorVersion(short majorVersion) {

    this.majorVersion = majorVersion;
    } // setMajorVersion


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MinorVersion. 
     */
    private short minorVersion;
    /**
     * This method returns the SoftwareIdentity.MinorVersion property value. 
     * This property is described as follows: 
     * 
     * The minor number component of the software's version information - for 
     * example, '1' from version 12.1(3)T. This property is defined as a 
     * numeric value to allow the determination of 'newer' vs. 'older' 
     * releases. A 'newer' minor release is indicated by a larger numeric 
     * value. 
     * 
     * @return	short	current MinorVersion property value
     * @exception	Exception	
     */
    public short getMinorVersion(){

    return this.minorVersion;
    } // getMinorVersion

    /**
     * This method sets the SoftwareIdentity.MinorVersion property value. This 
     * property is described as follows: 
     * 
     * The minor number component of the software's version information - for 
     * example, '1' from version 12.1(3)T. This property is defined as a 
     * numeric value to allow the determination of 'newer' vs. 'older' 
     * releases. A 'newer' minor release is indicated by a larger numeric 
     * value. 
     * 
     * @param	short	new MinorVersion property value
     * @exception	Exception	
     */
    public void setMinorVersion(short minorVersion) {

    this.minorVersion = minorVersion;
    } // setMinorVersion


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RevisionNumber. 
     */
    private short revisionNumber;
    /**
     * This method returns the SoftwareIdentity.RevisionNumber property value. 
     * This property is described as follows: 
     * 
     * The revision or maintenance release component of the software's version 
     * information - for example, '3' from version 12.1(3)T. This property is 
     * defined as a numeric value to allow the determination of 'newer' vs. 
     * 'older' releases. A 'newer' revision is indicated by a larger numeric 
     * value. 
     * 
     * @return	short	current RevisionNumber property value
     * @exception	Exception	
     */
    public short getRevisionNumber(){

    return this.revisionNumber;
    } // getRevisionNumber

    /**
     * This method sets the SoftwareIdentity.RevisionNumber property value. 
     * This property is described as follows: 
     * 
     * The revision or maintenance release component of the software's version 
     * information - for example, '3' from version 12.1(3)T. This property is 
     * defined as a numeric value to allow the determination of 'newer' vs. 
     * 'older' releases. A 'newer' revision is indicated by a larger numeric 
     * value. 
     * 
     * @param	short	new RevisionNumber property value
     * @exception	Exception	
     */
    public void setRevisionNumber(short revisionNumber) {

    this.revisionNumber = revisionNumber;
    } // setRevisionNumber


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property BuildNumber. 
     */
    private short buildNumber;
    /**
     * This method returns the SoftwareIdentity.BuildNumber property value. 
     * This property is described as follows: 
     * 
     * The build number of the software.
     * 
     * @return	short	current BuildNumber property value
     * @exception	Exception	
     */
    public short getBuildNumber(){

    return this.buildNumber;
    } // getBuildNumber

    /**
     * This method sets the SoftwareIdentity.BuildNumber property value. This 
     * property is described as follows: 
     * 
     * The build number of the software.
     * 
     * @param	short	new BuildNumber property value
     * @exception	Exception	
     */
    public void setBuildNumber(short buildNumber) {

    this.buildNumber = buildNumber;
    } // setBuildNumber


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property LargeBuildNumber. 
     */
    private long largeBuildNumber;
    /**
     * This method returns the SoftwareIdentity.LargeBuildNumber property 
     * value. This property is described as follows: 
     * 
     * The build number of the software if IsLargeBuildNumber is TRUE. 
     * TheLargeBuildNumber property should be used for all future 
     * implementations. 
     * 
     * @return	long	current LargeBuildNumber property value
     * @exception	Exception	
     */
    public long getLargeBuildNumber(){

    return this.largeBuildNumber;
    } // getLargeBuildNumber

    /**
     * This method sets the SoftwareIdentity.LargeBuildNumber property value. 
     * This property is described as follows: 
     * 
     * The build number of the software if IsLargeBuildNumber is TRUE. 
     * TheLargeBuildNumber property should be used for all future 
     * implementations. 
     * 
     * @param	long	new LargeBuildNumber property value
     * @exception	Exception	
     */
    public void setLargeBuildNumber(long largeBuildNumber) {

    this.largeBuildNumber = largeBuildNumber;
    } // setLargeBuildNumber


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property IsLargeBuildNumber. 
     */
    private boolean isLargeBuildNumber;
    /**
     * This method returns the SoftwareIdentity.IsLargeBuildNumber property 
     * value. This property is described as follows: 
     * 
     * The IsLargeBuildNumber property is used to indicate if the BuildNumber 
     * of LargeBuildNumber property contains the value of the software build. 
     * A value of TRUE shall indicate that the build number is represented by 
     * the LargeBuildNumber property. A value of FALSE shall indicate that 
     * the build number is represented by the BuildNumber property. 
     * 
     * @return	boolean	current IsLargeBuildNumber property value
     * @exception	Exception	
     */
    public boolean isIsLargeBuildNumber(){

    return this.isLargeBuildNumber;
    } // getIsLargeBuildNumber

    /**
     * This method sets the SoftwareIdentity.IsLargeBuildNumber property 
     * value. This property is described as follows: 
     * 
     * The IsLargeBuildNumber property is used to indicate if the BuildNumber 
     * of LargeBuildNumber property contains the value of the software build. 
     * A value of TRUE shall indicate that the build number is represented by 
     * the LargeBuildNumber property. A value of FALSE shall indicate that 
     * the build number is represented by the BuildNumber property. 
     * 
     * @param	boolean	new IsLargeBuildNumber property value
     * @exception	Exception	
     */
    public void setIsLargeBuildNumber(boolean isLargeBuildNumber) {

    this.isLargeBuildNumber = isLargeBuildNumber;
    } // setIsLargeBuildNumber


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property VersionString. 
     */
    private String versionString;
    /**
     * This method returns the SoftwareIdentity.VersionString property value. 
     * This property is described as follows: 
     * 
     * A string representing the complete software version information - for 
     * example, '12.1(3)T'. This string and the numeric 
     * major/minor/revision/build properties are complementary. Since vastly 
     * different representations and semantics exist for versions, it is not 
     * assumed that one representation is sufficient to permit a client to 
     * perform computations (i.e., the values are numeric) and a user to 
     * recognize the software's version (i.e., the values are understandable 
     * and readable). Hence, both numeric and string representations of 
     * version are provided. 
     * 
     * @return	String	current VersionString property value
     * @exception	Exception	
     */
    public String getVersionString(){

    return this.versionString;
    } // getVersionString

    /**
     * This method sets the SoftwareIdentity.VersionString property value. 
     * This property is described as follows: 
     * 
     * A string representing the complete software version information - for 
     * example, '12.1(3)T'. This string and the numeric 
     * major/minor/revision/build properties are complementary. Since vastly 
     * different representations and semantics exist for versions, it is not 
     * assumed that one representation is sufficient to permit a client to 
     * perform computations (i.e., the values are numeric) and a user to 
     * recognize the software's version (i.e., the values are understandable 
     * and readable). Hence, both numeric and string representations of 
     * version are provided. 
     * 
     * @param	String	new VersionString property value
     * @exception	Exception	
     */
    public void setVersionString(String versionString) {

    this.versionString = versionString;
    } // setVersionString


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property TargetOperatingSystems. 
     */
    private String[] targetOperatingSystems;
    /**
     * This method returns the SoftwareIdentity.TargetOperatingSystems 
     * property value. This property is described as follows: 
     * 
     * Specifies the target operating systems of the software. This property 
     * should be used when a target operating system is not listed in the 
     * TargetOSTypes array values. 
     * 
     * @return	String[]	current TargetOperatingSystems property 
     * value 
     * @exception	Exception	
     */
    public String[] getTargetOperatingSystems(){

    return this.targetOperatingSystems;
    } // getTargetOperatingSystems

    /**
     * This method sets the SoftwareIdentity.TargetOperatingSystems property 
     * value. This property is described as follows: 
     * 
     * Specifies the target operating systems of the software. This property 
     * should be used when a target operating system is not listed in the 
     * TargetOSTypes array values. 
     * 
     * @param	String[]	new TargetOperatingSystems property value
     * @exception	Exception	
     */
    public void setTargetOperatingSystems(String[] targetOperatingSystems) {

    this.targetOperatingSystems = targetOperatingSystems;
    } // setTargetOperatingSystems


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Manufacturer. 
     */
    private String manufacturer;
    /**
     * This method returns the SoftwareIdentity.Manufacturer property value. 
     * This property is described as follows: 
     * 
     * Manufacturer of this software.
     * 
     * @return	String	current Manufacturer property value
     * @exception	Exception	
     */
    public String getManufacturer(){

    return this.manufacturer;
    } // getManufacturer

    /**
     * This method sets the SoftwareIdentity.Manufacturer property value. This 
     * property is described as follows: 
     * 
     * Manufacturer of this software.
     * 
     * @param	String	new Manufacturer property value
     * @exception	Exception	
     */
    public void setManufacturer(String manufacturer) {

    this.manufacturer = manufacturer;
    } // setManufacturer


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Languages. 
     */
    private String[] languages;
    /**
     * This method returns the SoftwareIdentity.Languages property value. This 
     * property is described as follows: 
     * 
     * The language editions supported by the software. The language codes 
     * defined in ISO 639 should be used. 
     * 
     * @return	String[]	current Languages property value
     * @exception	Exception	
     */
    public String[] getLanguages(){

    return this.languages;
    } // getLanguages

    /**
     * This method sets the SoftwareIdentity.Languages property value. This 
     * property is described as follows: 
     * 
     * The language editions supported by the software. The language codes 
     * defined in ISO 639 should be used. 
     * 
     * @param	String[]	new Languages property value
     * @exception	Exception	
     */
    public void setLanguages(String[] languages) {

    this.languages = languages;
    } // setLanguages


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Classifications. 
     */

    public enum Classifications{
    UNKNOWN,
    OTHER,
    DRIVER,
    CONFIGURATION_SOFTWARE,
    APPLICATION_SOFTWARE,
    INSTRUMENTATION,
    FIRMWARE_BIOS,
    DIAGNOSTIC_SOFTWARE,
    OPERATING_SYSTEM,
    MIDDLEWARE,
    FIRMWARE,
    BIOS_FCODE,
    SUPPORT_SERVICE_PACK,
    SOFTWARE_BUNDLE,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }
 public Classifications classifications;
    /**
     * This method returns the SoftwareIdentity.Classifications property 
     * value. This property is described as follows: 
     * 
     * An array of enumerated integers that classify this software. For 
     * example, the software MAY be instrumentation (value=5) or firmware and 
     * diagnostic software (10 and 7). The use of value 6, Firmware/BIOS, is 
     * being deprecated. Instead, either the value 10 (Firmware) and/or 11 
     * (BIOS/FCode) SHOULD be used. The value 13, Software Bundle, identifies 
     * a software package consisting of multiple discrete software instances 
     * that can be installed individually or together. Each contained 
     * software instance is represented by an instance of SoftwareIdentity 
     * that is associated to this instance of SoftwareIdentityinstance via a 
     * Component association. 
     * 
     * @return	short	current Classifications property value
     * @exception	Exception	
     */
    public Classifications getClassifications(){

    return this.classifications;
    } // getClassifications

    /**
     * This method sets the SoftwareIdentity.Classifications property value. 
     * This property is described as follows: 
     * 
     * An array of enumerated integers that classify this software. For 
     * example, the software MAY be instrumentation (value=5) or firmware and 
     * diagnostic software (10 and 7). The use of value 6, Firmware/BIOS, is 
     * being deprecated. Instead, either the value 10 (Firmware) and/or 11 
     * (BIOS/FCode) SHOULD be used. The value 13, Software Bundle, identifies 
     * a software package consisting of multiple discrete software instances 
     * that can be installed individually or together. Each contained 
     * software instance is represented by an instance of SoftwareIdentity 
     * that is associated to this instance of SoftwareIdentityinstance via a 
     * Component association. 
     * 
     * @param	short	new Classifications property value
     * @exception	Exception	
     */
    public void setClassifications(Classifications classifications){

    this.classifications = classifications;
    } // setClassifications


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ClassificationDescriptions. 
     */
    private String[] classificationDescriptions;
    /**
     * This method returns the SoftwareIdentity.ClassificationDescriptions 
     * property value. This property is described as follows: 
     * 
     * An array of free-form strings providing more detailed explanations for 
     * any of the entries in the Classifications array. Note that each entry 
     * is related to one in the Classifications array located at the same 
     * index. 
     * 
     * @return	String[]	current ClassificationDescriptions 
     * property value 
     * @exception	Exception	
     */
    public String[] getClassificationDescriptions(){

    return this.classificationDescriptions;
    } // getClassificationDescriptions

    /**
     * This method sets the SoftwareIdentity.ClassificationDescriptions 
     * property value. This property is described as follows: 
     * 
     * An array of free-form strings providing more detailed explanations for 
     * any of the entries in the Classifications array. Note that each entry 
     * is related to one in the Classifications array located at the same 
     * index. 
     * 
     * @param	String[]	new ClassificationDescriptions property 
     * value 
     * @exception	Exception	
     */
    public void setClassificationDescriptions(String[] 
	classificationDescriptions) {

    this.classificationDescriptions = classificationDescriptions;
    } // setClassificationDescriptions


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SerialNumber. 
     */
    private String serialNumber;
    /**
     * This method returns the SoftwareIdentity.SerialNumber property value. 
     * This property is described as follows: 
     * 
     * A manufacturer-allocated number used to identify the software.
     * 
     * @return	String	current SerialNumber property value
     * @exception	Exception	
     */
    public String getSerialNumber(){

    return this.serialNumber;
    } // getSerialNumber

    /**
     * This method sets the SoftwareIdentity.SerialNumber property value. This 
     * property is described as follows: 
     * 
     * A manufacturer-allocated number used to identify the software.
     * 
     * @param	String	new SerialNumber property value
     * @exception	Exception	
     */
    public void setSerialNumber(String serialNumber) {

    this.serialNumber = serialNumber;
    } // setSerialNumber


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property TargetTypes. 
     */
    private String[] targetTypes;
    /**
     * This method returns the SoftwareIdentity.TargetTypes property value. 
     * This property is described as follows: 
     * 
     * An array of strings that describes the compatible installer(s). The 
     * purpose of the array elements is to establish compatibility between a 
     * SoftwareIdentity and a SoftwareInstallationService that can install 
     * the SoftwareIdentity by comparing the values of the array elements of 
     * this property to the values of 
     * SoftwareInstallationServiceCapabilities.SupportedTargetTypes[] 
     * property's array elements. 
     * 
     * @return	String[]	current TargetTypes property value
     * @exception	Exception	
     */
    public String[] getTargetTypes(){

    return this.targetTypes;
    } // getTargetTypes

    /**
     * This method sets the SoftwareIdentity.TargetTypes property value. This 
     * property is described as follows: 
     * 
     * An array of strings that describes the compatible installer(s). The 
     * purpose of the array elements is to establish compatibility between a 
     * SoftwareIdentity and a SoftwareInstallationService that can install 
     * the SoftwareIdentity by comparing the values of the array elements of 
     * this property to the values of 
     * SoftwareInstallationServiceCapabilities.SupportedTargetTypes[] 
     * property's array elements. 
     * 
     * @param	String[]	new TargetTypes property value
     * @exception	Exception	
     */
    public void setTargetTypes(String[] targetTypes) {

    this.targetTypes = targetTypes;
    } // setTargetTypes


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property IdentityInfoValue. 
     */
    private String[] identityInfoValue;
    /**
     * This method returns the SoftwareIdentity.IdentityInfoValue property 
     * value. This property is described as follows: 
     * 
     * IdentityInfoValue captures additional information that MAY be used by 
     * an organization to describe or identify a software instance within the 
     * context of the organization. For example, large organizations may have 
     * several ways to address or identify a particular instance of software 
     * depending on where it is stored; a catalog, a web site, or for whom it 
     * is intended; development, customer service, etc. The indexed array 
     * property IdentityInfoValue contains 0 or more strings that contain a 
     * specific identity info string value. IdentityInfoValue is mapped and 
     * indexed to IdentityInfoType. When the IdentityInfoValue property is 
     * implemented, the IdentityInfoType property MUST be implemented and 
     * shall be formatted using the algorithm provided in the 
     * IdentityInfoType property Description. 
     * 
     * @return	String[]	current IdentityInfoValue property value
     * @exception	Exception	
     */
    public String[] getIdentityInfoValue(){

    return this.identityInfoValue;
    } // getIdentityInfoValue

    /**
     * This method sets the SoftwareIdentity.IdentityInfoValue property value. 
     * This property is described as follows: 
     * 
     * IdentityInfoValue captures additional information that MAY be used by 
     * an organization to describe or identify a software instance within the 
     * context of the organization. For example, large organizations may have 
     * several ways to address or identify a particular instance of software 
     * depending on where it is stored; a catalog, a web site, or for whom it 
     * is intended; development, customer service, etc. The indexed array 
     * property IdentityInfoValue contains 0 or more strings that contain a 
     * specific identity info string value. IdentityInfoValue is mapped and 
     * indexed to IdentityInfoType. When the IdentityInfoValue property is 
     * implemented, the IdentityInfoType property MUST be implemented and 
     * shall be formatted using the algorithm provided in the 
     * IdentityInfoType property Description. 
     * 
     * @param	String[]	new IdentityInfoValue property value
     * @exception	Exception	
     */
    public void setIdentityInfoValue(String[] identityInfoValue) {

    this.identityInfoValue = identityInfoValue;
    } // setIdentityInfoValue


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property IdentityInfoType. 
     */
    private String[] identityInfoType;
    /**
     * This method returns the SoftwareIdentity.IdentityInfoType property 
     * value. This property is described as follows: 
     * 
     * An indexed array of fixed-form strings that provide the description of 
     * the type of information that is stored in the corresponding component 
     * of the IdentityInfoValue array. The elements of this property array 
     * describe the type of the value in the corresponding elements of the 
     * IndetityInfoValue array. When the IdentityInfoValue property is 
     * implemented, the IdentityInfoType property MUST be implemented. To 
     * insure uniqueness the IdentityInfoType property SHOULD be formatted 
     * using the following algorithm: < OrgID > : < LocalID > Where < OrgID > 
     * and < LocalID > are separated by a colon (:), and where < OrgID > MUST 
     * include a copyrighted, trademarked, or otherwise unique name that is 
     * owned by the business entity that is creating or defining the 
     * IdentityInfoType or that is a registered ID assigned to the business 
     * entity by a recognized global authority. (This requirement is similar 
     * to the < Schema Name > _ < Class Name > structure of Schema class 
     * names.) In addition, to ensure uniqueness, < OrgID > MUST NOT contain 
     * a colon (:). When using this algorithm, the first colon to appear in 
     * IdentityInfoType MUST appear between < OrgID > and < LocalID > . < 
     * LocalID > is chosen by the business entity and SHOULD NOT be reused to 
     * identify different underlying software elements. 
     * 
     * @return	String[]	current IdentityInfoType property value
     * @exception	Exception	
     */
    public String[] getIdentityInfoType(){

    return this.identityInfoType;
    } // getIdentityInfoType

    /**
     * This method sets the SoftwareIdentity.IdentityInfoType property value. 
     * This property is described as follows: 
     * 
     * An indexed array of fixed-form strings that provide the description of 
     * the type of information that is stored in the corresponding component 
     * of the IdentityInfoValue array. The elements of this property array 
     * describe the type of the value in the corresponding elements of the 
     * IndetityInfoValue array. When the IdentityInfoValue property is 
     * implemented, the IdentityInfoType property MUST be implemented. To 
     * insure uniqueness the IdentityInfoType property SHOULD be formatted 
     * using the following algorithm: < OrgID > : < LocalID > Where < OrgID > 
     * and < LocalID > are separated by a colon (:), and where < OrgID > MUST 
     * include a copyrighted, trademarked, or otherwise unique name that is 
     * owned by the business entity that is creating or defining the 
     * IdentityInfoType or that is a registered ID assigned to the business 
     * entity by a recognized global authority. (This requirement is similar 
     * to the < Schema Name > _ < Class Name > structure of Schema class 
     * names.) In addition, to ensure uniqueness, < OrgID > MUST NOT contain 
     * a colon (:). When using this algorithm, the first colon to appear in 
     * IdentityInfoType MUST appear between < OrgID > and < LocalID > . < 
     * LocalID > is chosen by the business entity and SHOULD NOT be reused to 
     * identify different underlying software elements. 
     * 
     * @param	String[]	new IdentityInfoType property value
     * @exception	Exception	
     */
    public void setIdentityInfoType(String[] identityInfoType) {

    this.identityInfoType = identityInfoType;
    } // setIdentityInfoType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ReleaseDate. 
     */
    private Date releaseDate;
    /**
     * This method returns the SoftwareIdentity.ReleaseDate property value. 
     * This property is described as follows: 
     * 
     * The date the software was released.
     * 
     * @return	CIMDateTime	current ReleaseDate property value
     * @exception	Exception	
     */
    public Date getReleaseDate(){

    return this.releaseDate;
    } // getReleaseDate

    /**
     * This method sets the SoftwareIdentity.ReleaseDate property value. This 
     * property is described as follows: 
     * 
     * The date the software was released.
     * 
     * @param	CIMDateTime	new ReleaseDate property value
     * @exception	Exception	
     */
    public void setReleaseDate(Date releaseDate) {

    this.releaseDate = releaseDate;
    } // setReleaseDate


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property IsEntity. 
     */
    private boolean isEntity;
    /**
     * This method returns the SoftwareIdentity.IsEntity property value. This 
     * property is described as follows: 
     * 
     * The IsEntity property is used to indicate whether the SoftwareIdentity 
     * corresponds to a discrete copy of the software component or is being 
     * used to convey descriptive and identifying information about software 
     * that is not present in the management domain.A value of TRUE shall 
     * indicate that the SoftwareIdentity instance corresponds to a discrete 
     * copy of the software component. A value of FALSE shall indicate that 
     * the SoftwareIdentity instance does not correspond to a discrete copy 
     * of the Software. 
     * 
     * @return	boolean	current IsEntity property value
     * @exception	Exception	
     */
    public boolean isIsEntity(){

    return this.isEntity;
    } // getIsEntity

    /**
     * This method sets the SoftwareIdentity.IsEntity property value. This 
     * property is described as follows: 
     * 
     * The IsEntity property is used to indicate whether the SoftwareIdentity 
     * corresponds to a discrete copy of the software component or is being 
     * used to convey descriptive and identifying information about software 
     * that is not present in the management domain.A value of TRUE shall 
     * indicate that the SoftwareIdentity instance corresponds to a discrete 
     * copy of the software component. A value of FALSE shall indicate that 
     * the SoftwareIdentity instance does not correspond to a discrete copy 
     * of the Software. 
     * 
     * @param	boolean	new IsEntity property value
     * @exception	Exception	
     */
    public void setIsEntity(boolean isEntity) {

    this.isEntity = isEntity;
    } // setIsEntity


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ExtendedResourceType. 
     */

    public enum ExtendedResourceType{
    UNKNOWN,
    OTHER,
    NOT_APPLICABLE,
    LINUX_RPM,
    HP_UX_DEPOT,
    WINDOWS_MSI,
    SOLARIS_PACKAGE,
    MACINTOSH_DISK_IMAGE,
    DEBIAN_LINUX_PACKAGE,
    VMWARE_VSPHERE_INSTALLATION_BUNDLE,
    VMWARE_SOFTWARE_BULLETIN,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }
 public ExtendedResourceType extendedResourceType;
    /**
     * This method returns the SoftwareIdentity.ExtendedResourceType property 
     * value. This property is described as follows: 
     * 
     * The binary format type of the installation package of the software. 
     * This property can be used to locate a SoftwareInstallationService 
     * capable of installing this software. 
     * 
     * @return	short	current ExtendedResourceType property value
     * @exception	Exception	
     */
    public ExtendedResourceType getExtendedResourceType(){

    return this.extendedResourceType;
    } // getExtendedResourceType

    /**
     * This method sets the SoftwareIdentity.ExtendedResourceType property 
     * value. This property is described as follows: 
     * 
     * The binary format type of the installation package of the software. 
     * This property can be used to locate a SoftwareInstallationService 
     * capable of installing this software. 
     * 
     * @param	short	new ExtendedResourceType property value
     * @exception	Exception	
     */
    public void setExtendedResourceType(ExtendedResourceType 
	extendedResourceType){

    this.extendedResourceType = extendedResourceType;
    } // setExtendedResourceType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherExtendedResourceTypeDescription. 
     */
    private String otherExtendedResourceTypeDescription;
    /**
     * This method returns the 
     * SoftwareIdentity.OtherExtendedResourceTypeDescription property value. 
     * This property is described as follows: 
     * 
     * A string describing the binary format type of the installation package 
     * of the software when the ExtendedResourceType property has a value of 
     * 1 (Other). 
     * 
     * @return	String	current 
     * OtherExtendedResourceTypeDescription property value 
     * @exception	Exception	
     */
    public String getOtherExtendedResourceTypeDescription(){

    return this.otherExtendedResourceTypeDescription;
    } // getOtherExtendedResourceTypeDescription

    /**
     * This method sets the 
     * SoftwareIdentity.OtherExtendedResourceTypeDescription property value. 
     * This property is described as follows: 
     * 
     * A string describing the binary format type of the installation package 
     * of the software when the ExtendedResourceType property has a value of 
     * 1 (Other). 
     * 
     * @param	String	new OtherExtendedResourceTypeDescription 
     * property value 
     * @exception	Exception	
     */
    public void setOtherExtendedResourceTypeDescription(String 
	otherExtendedResourceTypeDescription) {

    this.otherExtendedResourceTypeDescription = 
	otherExtendedResourceTypeDescription;
    } // setOtherExtendedResourceTypeDescription


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MinExtendedResourceTypeMajorVersion. 
     */
    private short minExtendedResourceTypeMajorVersion;
    /**
     * This method returns the 
     * SoftwareIdentity.MinExtendedResourceTypeMajorVersion property value. 
     * This property is described as follows: 
     * 
     * This property represents the major number component of the minimum 
     * version of the installer, represented by the ExtendedResourceType 
     * property, that is required to install this software. 
     * 
     * @return	short	current MinExtendedResourceTypeMajorVersion 
     * property value 
     * @exception	Exception	
     */
    public short getMinExtendedResourceTypeMajorVersion(){

    return this.minExtendedResourceTypeMajorVersion;
    } // getMinExtendedResourceTypeMajorVersion

    /**
     * This method sets the 
     * SoftwareIdentity.MinExtendedResourceTypeMajorVersion property value. 
     * This property is described as follows: 
     * 
     * This property represents the major number component of the minimum 
     * version of the installer, represented by the ExtendedResourceType 
     * property, that is required to install this software. 
     * 
     * @param	short	new MinExtendedResourceTypeMajorVersion 
     * property value 
     * @exception	Exception	
     */
    public void setMinExtendedResourceTypeMajorVersion(short 
	minExtendedResourceTypeMajorVersion) {

    this.minExtendedResourceTypeMajorVersion = 
	minExtendedResourceTypeMajorVersion;
    } // setMinExtendedResourceTypeMajorVersion


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MinExtendedResourceTypeMinorVersion. 
     */
    private short minExtendedResourceTypeMinorVersion;
    /**
     * This method returns the 
     * SoftwareIdentity.MinExtendedResourceTypeMinorVersion property value. 
     * This property is described as follows: 
     * 
     * This property represents the minor number component of the minimum 
     * version of the installer, represented by theExtendedResourceType 
     * property, that is required to install this software. 
     * 
     * @return	short	current MinExtendedResourceTypeMinorVersion 
     * property value 
     * @exception	Exception	
     */
    public short getMinExtendedResourceTypeMinorVersion(){

    return this.minExtendedResourceTypeMinorVersion;
    } // getMinExtendedResourceTypeMinorVersion

    /**
     * This method sets the 
     * SoftwareIdentity.MinExtendedResourceTypeMinorVersion property value. 
     * This property is described as follows: 
     * 
     * This property represents the minor number component of the minimum 
     * version of the installer, represented by theExtendedResourceType 
     * property, that is required to install this software. 
     * 
     * @param	short	new MinExtendedResourceTypeMinorVersion 
     * property value 
     * @exception	Exception	
     */
    public void setMinExtendedResourceTypeMinorVersion(short 
	minExtendedResourceTypeMinorVersion) {

    this.minExtendedResourceTypeMinorVersion = 
	minExtendedResourceTypeMinorVersion;
    } // setMinExtendedResourceTypeMinorVersion


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MinExtendedResourceTypeRevisionNumber. 
     */
    private short minExtendedResourceTypeRevisionNumber;
    /**
     * This method returns the 
     * SoftwareIdentity.MinExtendedResourceTypeRevisionNumber property value. 
     * This property is described as follows: 
     * 
     * This property represents the Revision number component of the minimum 
     * version of the installer, represented by theExtendedResourceType 
     * property, that is required to install this software. 
     * 
     * @return	short	current 
     * MinExtendedResourceTypeRevisionNumber property value 
     * @exception	Exception	
     */
    public short getMinExtendedResourceTypeRevisionNumber(){

    return this.minExtendedResourceTypeRevisionNumber;
    } // getMinExtendedResourceTypeRevisionNumber

    /**
     * This method sets the 
     * SoftwareIdentity.MinExtendedResourceTypeRevisionNumber property value. 
     * This property is described as follows: 
     * 
     * This property represents the Revision number component of the minimum 
     * version of the installer, represented by theExtendedResourceType 
     * property, that is required to install this software. 
     * 
     * @param	short	new MinExtendedResourceTypeRevisionNumber 
     * property value 
     * @exception	Exception	
     */
    public void setMinExtendedResourceTypeRevisionNumber(short 
	minExtendedResourceTypeRevisionNumber) {

    this.minExtendedResourceTypeRevisionNumber = 
	minExtendedResourceTypeRevisionNumber;
    } // setMinExtendedResourceTypeRevisionNumber


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MinExtendedResourceTypeBuildNumber. 
     */
    private short minExtendedResourceTypeBuildNumber;
    /**
     * This method returns the 
     * SoftwareIdentity.MinExtendedResourceTypeBuildNumber property value. 
     * This property is described as follows: 
     * 
     * This property represents the Build number component of the minimum 
     * version of the installer, represented by theExtendedResourceType 
     * property, that is required to install this software. 
     * 
     * @return	short	current MinExtendedResourceTypeBuildNumber 
     * property value 
     * @exception	Exception	
     */
    public short getMinExtendedResourceTypeBuildNumber(){

    return this.minExtendedResourceTypeBuildNumber;
    } // getMinExtendedResourceTypeBuildNumber

    /**
     * This method sets the 
     * SoftwareIdentity.MinExtendedResourceTypeBuildNumber property value. 
     * This property is described as follows: 
     * 
     * This property represents the Build number component of the minimum 
     * version of the installer, represented by theExtendedResourceType 
     * property, that is required to install this software. 
     * 
     * @param	short	new MinExtendedResourceTypeBuildNumber 
     * property value 
     * @exception	Exception	
     */
    public void setMinExtendedResourceTypeBuildNumber(short 
	minExtendedResourceTypeBuildNumber) {

    this.minExtendedResourceTypeBuildNumber = 
	minExtendedResourceTypeBuildNumber;
    } // setMinExtendedResourceTypeBuildNumber


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property TargetOSTypes. 
     */

    public enum TargetOSTypes{
    UNKNOWN,
    OTHER,
    MACOS,
    ATTUNIX,
    DGUX,
    DECNT,
    TRU64_UNIX,
    OPENVMS,
    HPUX,
    AIX,
    MVS,
    OS400,
    OS_2,
    JAVAVM,
    MSDOS,
    WIN3X,
    WIN95,
    WIN98,
    WINNT,
    WINCE,
    NCR3000,
    NETWARE,
    OSF,
    DC_OS,
    RELIANT_UNIX,
    SCO_UNIXWARE,
    SCO_OPENSERVER,
    SEQUENT,
    IRIX,
    SOLARIS,
    SUNOS,
    U6000,
    ASERIES,
    HP_NONSTOP_OS,
    HP_NONSTOP_OSS,
    BS2000,
    LINUX,
    LYNX,
    XENIX,
    VM,
    INTERACTIVE_UNIX,
    BSDUNIX,
    FREEBSD,
    NETBSD,
    GNU_HURD,
    OS9,
    MACH_KERNEL,
    INFERNO,
    QNX,
    EPOC,
    IXWORKS,
    VXWORKS,
    MINT,
    BEOS,
    HP_MPE,
    NEXTSTEP,
    PALMPILOT,
    RHAPSODY,
    WINDOWS_2000,
    DEDICATED,
    OS_390,
    VSE,
    TPF,
    WINDOWS_R_ME,
    CALDERA_OPEN_UNIX,
    OPENBSD,
    NOT_APPLICABLE,
    WINDOWS_XP,
    Z_OS,
    MICROSOFT_WINDOWS_SERVER_2003,
    MICROSOFT_WINDOWS_SERVER_2003_64_BIT,
    WINDOWS_XP_64_BIT,
    WINDOWS_XP_EMBEDDED,
    WINDOWS_VISTA,
    WINDOWS_VISTA_64_BIT,
    WINDOWS_EMBEDDED_FOR_POINT_OF_SERVICE,
    MICROSOFT_WINDOWS_SERVER_2008,
    MICROSOFT_WINDOWS_SERVER_2008_64_BIT,
    FREEBSD_64_BIT,
    REDHAT_ENTERPRISE_LINUX,
    REDHAT_ENTERPRISE_LINUX_64_BIT,
    SOLARIS_64_BIT,
    SUSE,
    SUSE_64_BIT,
    SLES,
    SLES_64_BIT,
    NOVELL_OES,
    NOVELL_LINUX_DESKTOP,
    SUN_JAVA_DESKTOP_SYSTEM,
    MANDRIVA,
    MANDRIVA_64_BIT,
    TURBOLINUX,
    TURBOLINUX_64_BIT,
    UBUNTU,
    UBUNTU_64_BIT,
    DEBIAN,
    DEBIAN_64_BIT,
    LINUX_2_4_X,
    LINUX_2_4_X_64_BIT,
    LINUX_2_6_X,
    LINUX_2_6_X_64_BIT,
    LINUX_64_BIT,
    OTHER_64_BIT,
    MICROSOFT_WINDOWS_SERVER_2008_R2,
    VMWARE_ESXI,
    MICROSOFT_WINDOWS_7,
    CENTOS_32_BIT,
    CENTOS_64_BIT,
    ORACLE_ENTERPRISE_LINUX_32_BIT,
    ORACLE_ENTERPRISE_LINUX_64_BIT,
    ECOMSTATION_32_BITX
    }
 public TargetOSTypes targetOSTypes;
    /**
     * This method returns the SoftwareIdentity.TargetOSTypes property value. 
     * This property is described as follows: 
     * 
     * The TargetOSTypes property specifies the target operating systems 
     * supported by the software. When the target operating system of the 
     * software is not listed in the enumeration values, 
     * TargetOperatingSystems[] property should be used to specify the target 
     * operating system. 
     * 
     * @return	short	current TargetOSTypes property value
     * @exception	Exception	
     */
    public TargetOSTypes getTargetOSTypes(){

    return this.targetOSTypes;
    } // getTargetOSTypes

    /**
     * This method sets the SoftwareIdentity.TargetOSTypes property value. 
     * This property is described as follows: 
     * 
     * The TargetOSTypes property specifies the target operating systems 
     * supported by the software. When the target operating system of the 
     * software is not listed in the enumeration values, 
     * TargetOperatingSystems[] property should be used to specify the target 
     * operating system. 
     * 
     * @param	short	new TargetOSTypes property value
     * @exception	Exception	
     */
    public void setTargetOSTypes(TargetOSTypes targetOSTypes){

    this.targetOSTypes = targetOSTypes;
    } // setTargetOSTypes



} // Class SoftwareIdentity
