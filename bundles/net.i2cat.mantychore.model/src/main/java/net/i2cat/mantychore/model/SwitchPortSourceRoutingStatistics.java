/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class SwitchPortSourceRoutingStatistics as well as methods 
 * comparable to the invokeMethods defined for this class. This Class 
 * implements the SwitchPortSourceRoutingStatisticsBean Interface. The CIM 
 * class SwitchPortSourceRoutingStatistics is described as follows: 
 * 
 * Statistical information regarding a SwitchPort supporting source routing.
 */
    @Entity
public class SwitchPortSourceRoutingStatistics extends 
    SAPStatisticalInformation implements Serializable {

    /**
     * This constructor creates a SwitchPortSourceRoutingStatisticsBeanImpl 
     * Class which implements the SwitchPortSourceRoutingStatisticsBean 
     * Interface, and encapsulates the CIM class 
     * SwitchPortSourceRoutingStatistics in a Java Bean. The CIM class 
     * SwitchPortSourceRoutingStatistics is described as follows: 
     * 
     * Statistical information regarding a SwitchPort supporting source 
     * routing. 
     */
    public SwitchPortSourceRoutingStatistics(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SpecInFrames. 
     */
    private long specInFrames;
    /**
     * This method returns the SwitchPortSourceRoutingStatistics.specInFrames 
     * property value. This property is described as follows: 
     * 
     * The number of Specifically Routed frames, also referred to as Source 
     * Routed Frames, that have been received from the segment attached to 
     * the port. 
     * 
     * @return	long	current specInFrames property value
     * @exception	Exception	
     */
    public long getspecInFrames(){

    return this.specInFrames;
    } // getspecInFrames

    /**
     * This method sets the SwitchPortSourceRoutingStatistics.specInFrames 
     * property value. This property is described as follows: 
     * 
     * The number of Specifically Routed frames, also referred to as Source 
     * Routed Frames, that have been received from the segment attached to 
     * the port. 
     * 
     * @param	long	new specInFrames property value
     * @exception	Exception	
     */
    public void setspecInFrames(long specInFrames) {

    this.specInFrames = specInFrames;
    } // setspecInFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SpecOutFrames. 
     */
    private long specOutFrames;
    /**
     * This method returns the SwitchPortSourceRoutingStatistics.specOutFrames 
     * property value. This property is described as follows: 
     * 
     * The number of Specifically Routed frames, also referred to as Source 
     * Routed Frames, that the port has transmitted on its segment. 
     * 
     * @return	long	current specOutFrames property value
     * @exception	Exception	
     */
    public long getspecOutFrames(){

    return this.specOutFrames;
    } // getspecOutFrames

    /**
     * This method sets the SwitchPortSourceRoutingStatistics.specOutFrames 
     * property value. This property is described as follows: 
     * 
     * The number of Specifically Routed frames, also referred to as Source 
     * Routed Frames, that the port has transmitted on its segment. 
     * 
     * @param	long	new specOutFrames property value
     * @exception	Exception	
     */
    public void setspecOutFrames(long specOutFrames) {

    this.specOutFrames = specOutFrames;
    } // setspecOutFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ApeInFrames. 
     */
    private long apeInFrames;
    /**
     * This method returns the SwitchPortSourceRoutingStatistics.apeInFrames 
     * property value. This property is described as follows: 
     * 
     * The number of All Paths Explorer frames, also referred to as All Routes 
     * Explorer frames, that have been received by the port from its segment. 
     * 
     * @return	long	current apeInFrames property value
     * @exception	Exception	
     */
    public long getapeInFrames(){

    return this.apeInFrames;
    } // getapeInFrames

    /**
     * This method sets the SwitchPortSourceRoutingStatistics.apeInFrames 
     * property value. This property is described as follows: 
     * 
     * The number of All Paths Explorer frames, also referred to as All Routes 
     * Explorer frames, that have been received by the port from its segment. 
     * 
     * @param	long	new apeInFrames property value
     * @exception	Exception	
     */
    public void setapeInFrames(long apeInFrames) {

    this.apeInFrames = apeInFrames;
    } // setapeInFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ApeOutFrames. 
     */
    private long apeOutFrames;
    /**
     * This method returns the SwitchPortSourceRoutingStatistics.apeOutFrames 
     * property value. This property is described as follows: 
     * 
     * The number of all Paths Explorer Frames, also referred to as All Routes 
     * Explorer frames, that have been transmitted by the port on its 
     * segment. 
     * 
     * @return	long	current apeOutFrames property value
     * @exception	Exception	
     */
    public long getapeOutFrames(){

    return this.apeOutFrames;
    } // getapeOutFrames

    /**
     * This method sets the SwitchPortSourceRoutingStatistics.apeOutFrames 
     * property value. This property is described as follows: 
     * 
     * The number of all Paths Explorer Frames, also referred to as All Routes 
     * Explorer frames, that have been transmitted by the port on its 
     * segment. 
     * 
     * @param	long	new apeOutFrames property value
     * @exception	Exception	
     */
    public void setapeOutFrames(long apeOutFrames) {

    this.apeOutFrames = apeOutFrames;
    } // setapeOutFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SteInFrames. 
     */
    private long steInFrames;
    /**
     * This method returns the SwitchPortSourceRoutingStatistics.steInFrames 
     * property value. This property is described as follows: 
     * 
     * The number of spanning tree explorer frames that have been received by 
     * the port from its segment. 
     * 
     * @return	long	current steInFrames property value
     * @exception	Exception	
     */
    public long getsteInFrames(){

    return this.steInFrames;
    } // getsteInFrames

    /**
     * This method sets the SwitchPortSourceRoutingStatistics.steInFrames 
     * property value. This property is described as follows: 
     * 
     * The number of spanning tree explorer frames that have been received by 
     * the port from its segment. 
     * 
     * @param	long	new steInFrames property value
     * @exception	Exception	
     */
    public void setsteInFrames(long steInFrames) {

    this.steInFrames = steInFrames;
    } // setsteInFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SteOutFrames. 
     */
    private long steOutFrames;
    /**
     * This method returns the SwitchPortSourceRoutingStatistics.steOutFrames 
     * property value. This property is described as follows: 
     * 
     * The number of spanning tree explorer frames that have been transmitted 
     * by the port on its segment. 
     * 
     * @return	long	current steOutFrames property value
     * @exception	Exception	
     */
    public long getsteOutFrames(){

    return this.steOutFrames;
    } // getsteOutFrames

    /**
     * This method sets the SwitchPortSourceRoutingStatistics.steOutFrames 
     * property value. This property is described as follows: 
     * 
     * The number of spanning tree explorer frames that have been transmitted 
     * by the port on its segment. 
     * 
     * @param	long	new steOutFrames property value
     * @exception	Exception	
     */
    public void setsteOutFrames(long steOutFrames) {

    this.steOutFrames = steOutFrames;
    } // setsteOutFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SegmentMismatchDiscards. 
     */
    private long segmentMismatchDiscards;
    /**
     * This method returns the 
     * SwitchPortSourceRoutingStatistics.segmentMismatchDiscards property 
     * value. This property is described as follows: 
     * 
     * The number of explorer frames that have been discarded by the port 
     * because the routing descriptor field contained an invalid adjacent 
     * segment value. 
     * 
     * @return	long	current segmentMismatchDiscards property 
     * value 
     * @exception	Exception	
     */
    public long getsegmentMismatchDiscards(){

    return this.segmentMismatchDiscards;
    } // getsegmentMismatchDiscards

    /**
     * This method sets the 
     * SwitchPortSourceRoutingStatistics.segmentMismatchDiscards property 
     * value. This property is described as follows: 
     * 
     * The number of explorer frames that have been discarded by the port 
     * because the routing descriptor field contained an invalid adjacent 
     * segment value. 
     * 
     * @param	long	new segmentMismatchDiscards property value
     * @exception	Exception	
     */
    public void setsegmentMismatchDiscards(long segmentMismatchDiscards) {

    this.segmentMismatchDiscards = segmentMismatchDiscards;
    } // setsegmentMismatchDiscards


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DuplicateSegmentDiscards. 
     */
    private long duplicateSegmentDiscards;
    /**
     * This method returns the 
     * SwitchPortSourceRoutingStatistics.duplicateSegmentDiscards property 
     * value. This property is described as follows: 
     * 
     * The number of frames that have been discarded by the port because the 
     * routing descriptor field contained a duplicate segment identifier. 
     * 
     * @return	long	current duplicateSegmentDiscards property 
     * value 
     * @exception	Exception	
     */
    public long getduplicateSegmentDiscards(){

    return this.duplicateSegmentDiscards;
    } // getduplicateSegmentDiscards

    /**
     * This method sets the 
     * SwitchPortSourceRoutingStatistics.duplicateSegmentDiscards property 
     * value. This property is described as follows: 
     * 
     * The number of frames that have been discarded by the port because the 
     * routing descriptor field contained a duplicate segment identifier. 
     * 
     * @param	long	new duplicateSegmentDiscards property value
     * @exception	Exception	
     */
    public void setduplicateSegmentDiscards(long duplicateSegmentDiscards) {

    this.duplicateSegmentDiscards = duplicateSegmentDiscards;
    } // setduplicateSegmentDiscards


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HopCountExceedsDiscards. 
     */
    private long hopCountExceedsDiscards;
    /**
     * This method returns the 
     * SwitchPortSourceRoutingStatistics.hopCountExceedsDiscards property 
     * value. This property is described as follows: 
     * 
     * The number of explorer frames that have been discarded by the port 
     * because the Routing Information Field has exceeded the maximum route 
     * descriptor length. 
     * 
     * @return	long	current hopCountExceedsDiscards property 
     * value 
     * @exception	Exception	
     */
    public long gethopCountExceedsDiscards(){

    return this.hopCountExceedsDiscards;
    } // gethopCountExceedsDiscards

    /**
     * This method sets the 
     * SwitchPortSourceRoutingStatistics.hopCountExceedsDiscards property 
     * value. This property is described as follows: 
     * 
     * The number of explorer frames that have been discarded by the port 
     * because the Routing Information Field has exceeded the maximum route 
     * descriptor length. 
     * 
     * @param	long	new hopCountExceedsDiscards property value
     * @exception	Exception	
     */
    public void sethopCountExceedsDiscards(long hopCountExceedsDiscards) {

    this.hopCountExceedsDiscards = hopCountExceedsDiscards;
    } // sethopCountExceedsDiscards


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DupLanIdOrTreeErrors. 
     */
    private long dupLanIdOrTreeErrors;
    /**
     * This method returns the 
     * SwitchPortSourceRoutingStatistics.dupLanIdOrTreeErrors property value. 
     * This property is described as follows: 
     * 
     * The number of duplicate LAN IDs or Tree errors. This helps in detection 
     * of problems in networks containing older Source Routing Bridges. 
     * 
     * @return	long	current dupLanIdOrTreeErrors property value
     * @exception	Exception	
     */
    public long getdupLanIdOrTreeErrors(){

    return this.dupLanIdOrTreeErrors;
    } // getdupLanIdOrTreeErrors

    /**
     * This method sets the 
     * SwitchPortSourceRoutingStatistics.dupLanIdOrTreeErrors property value. 
     * This property is described as follows: 
     * 
     * The number of duplicate LAN IDs or Tree errors. This helps in detection 
     * of problems in networks containing older Source Routing Bridges. 
     * 
     * @param	long	new dupLanIdOrTreeErrors property value
     * @exception	Exception	
     */
    public void setdupLanIdOrTreeErrors(long dupLanIdOrTreeErrors) {

    this.dupLanIdOrTreeErrors = dupLanIdOrTreeErrors;
    } // setdupLanIdOrTreeErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property LanIdMismatches. 
     */
    private long lanIdMismatches;
    /**
     * This method returns the 
     * SwitchPortSourceRoutingStatistics.lanIdMismatches property value. This 
     * property is described as follows: 
     * 
     * The number of ARE and STE frames that were discarded because the last 
     * LAN ID in the routing information field did not equal the LAN-in ID. 
     * This error can occur in implementations which do only a LAN-in ID and 
     * Bridge Number check instead of a LAN-in ID, Bridge Number, and LAN-out 
     * ID check before they forward broadcast frames. 
     * 
     * @return	long	current lanIdMismatches property value
     * @exception	Exception	
     */
    public long getlanIdMismatches(){

    return this.lanIdMismatches;
    } // getlanIdMismatches

    /**
     * This method sets the SwitchPortSourceRoutingStatistics.lanIdMismatches 
     * property value. This property is described as follows: 
     * 
     * The number of ARE and STE frames that were discarded because the last 
     * LAN ID in the routing information field did not equal the LAN-in ID. 
     * This error can occur in implementations which do only a LAN-in ID and 
     * Bridge Number check instead of a LAN-in ID, Bridge Number, and LAN-out 
     * ID check before they forward broadcast frames. 
     * 
     * @param	long	new lanIdMismatches property value
     * @exception	Exception	
     */
    public void setlanIdMismatches(long lanIdMismatches) {

    this.lanIdMismatches = lanIdMismatches;
    } // setlanIdMismatches



} // Class SwitchPortSourceRoutingStatistics
