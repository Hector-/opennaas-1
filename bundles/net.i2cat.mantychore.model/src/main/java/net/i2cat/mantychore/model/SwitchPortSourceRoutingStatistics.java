/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 15:29:20 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class SwitchPortSourceRoutingStatistics as well as methods 
 * comparable to the invokeMethods defined for this class. This Class 
 * implements the SwitchPortSourceRoutingStatisticsBean Interface. The CIM 
 * class SwitchPortSourceRoutingStatistics is described as follows: 
 * 
 * Statistical information regarding a SwitchPort supporting source routing.
 */
public class SwitchPortSourceRoutingStatistics extends 
    SAPStatisticalInformation implements Serializable {

    /**
     * This constructor creates a SwitchPortSourceRoutingStatisticsBeanImpl 
     * Class which implements the SwitchPortSourceRoutingStatisticsBean 
     * Interface, and encapsulates the CIM class 
     * SwitchPortSourceRoutingStatistics in a Java Bean. The CIM class 
     * SwitchPortSourceRoutingStatistics is described as follows: 
     * 
     * Statistical information regarding a SwitchPort supporting source 
     * routing. 
     */
    public SwitchPortSourceRoutingStatistics(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SpecInFrames. 
     */
    private int specInFrames;
    /**
     * This method returns the SwitchPortSourceRoutingStatistics.SpecInFrames 
     * property value. This property is described as follows: 
     * 
     * The number of Specifically Routed frames, also referred to as Source 
     * Routed Frames, that have been received from the segment attached to 
     * the port. 
     * 
     * @return	int	current SpecInFrames property value
     * @exception	Exception	
     */
    public int getSpecInFrames(){

    return this.specInFrames;
    } // getSpecInFrames

    /**
     * This method sets the SwitchPortSourceRoutingStatistics.SpecInFrames 
     * property value. This property is described as follows: 
     * 
     * The number of Specifically Routed frames, also referred to as Source 
     * Routed Frames, that have been received from the segment attached to 
     * the port. 
     * 
     * @param	int	new SpecInFrames property value
     * @exception	Exception	
     */
    public void setSpecInFrames(int specInFrames) {

    this.specInFrames = specInFrames;
    } // setSpecInFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SpecOutFrames. 
     */
    private int specOutFrames;
    /**
     * This method returns the SwitchPortSourceRoutingStatistics.SpecOutFrames 
     * property value. This property is described as follows: 
     * 
     * The number of Specifically Routed frames, also referred to as Source 
     * Routed Frames, that the port has transmitted on its segment. 
     * 
     * @return	int	current SpecOutFrames property value
     * @exception	Exception	
     */
    public int getSpecOutFrames(){

    return this.specOutFrames;
    } // getSpecOutFrames

    /**
     * This method sets the SwitchPortSourceRoutingStatistics.SpecOutFrames 
     * property value. This property is described as follows: 
     * 
     * The number of Specifically Routed frames, also referred to as Source 
     * Routed Frames, that the port has transmitted on its segment. 
     * 
     * @param	int	new SpecOutFrames property value
     * @exception	Exception	
     */
    public void setSpecOutFrames(int specOutFrames) {

    this.specOutFrames = specOutFrames;
    } // setSpecOutFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ApeInFrames. 
     */
    private int apeInFrames;
    /**
     * This method returns the SwitchPortSourceRoutingStatistics.ApeInFrames 
     * property value. This property is described as follows: 
     * 
     * The number of All Paths Explorer frames, also referred to as All Routes 
     * Explorer frames, that have been received by the port from its segment. 
     * 
     * @return	int	current ApeInFrames property value
     * @exception	Exception	
     */
    public int getApeInFrames(){

    return this.apeInFrames;
    } // getApeInFrames

    /**
     * This method sets the SwitchPortSourceRoutingStatistics.ApeInFrames 
     * property value. This property is described as follows: 
     * 
     * The number of All Paths Explorer frames, also referred to as All Routes 
     * Explorer frames, that have been received by the port from its segment. 
     * 
     * @param	int	new ApeInFrames property value
     * @exception	Exception	
     */
    public void setApeInFrames(int apeInFrames) {

    this.apeInFrames = apeInFrames;
    } // setApeInFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ApeOutFrames. 
     */
    private int apeOutFrames;
    /**
     * This method returns the SwitchPortSourceRoutingStatistics.ApeOutFrames 
     * property value. This property is described as follows: 
     * 
     * The number of all Paths Explorer Frames, also referred to as All Routes 
     * Explorer frames, that have been transmitted by the port on its 
     * segment. 
     * 
     * @return	int	current ApeOutFrames property value
     * @exception	Exception	
     */
    public int getApeOutFrames(){

    return this.apeOutFrames;
    } // getApeOutFrames

    /**
     * This method sets the SwitchPortSourceRoutingStatistics.ApeOutFrames 
     * property value. This property is described as follows: 
     * 
     * The number of all Paths Explorer Frames, also referred to as All Routes 
     * Explorer frames, that have been transmitted by the port on its 
     * segment. 
     * 
     * @param	int	new ApeOutFrames property value
     * @exception	Exception	
     */
    public void setApeOutFrames(int apeOutFrames) {

    this.apeOutFrames = apeOutFrames;
    } // setApeOutFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SteInFrames. 
     */
    private int steInFrames;
    /**
     * This method returns the SwitchPortSourceRoutingStatistics.SteInFrames 
     * property value. This property is described as follows: 
     * 
     * The number of spanning tree explorer frames that have been received by 
     * the port from its segment. 
     * 
     * @return	int	current SteInFrames property value
     * @exception	Exception	
     */
    public int getSteInFrames(){

    return this.steInFrames;
    } // getSteInFrames

    /**
     * This method sets the SwitchPortSourceRoutingStatistics.SteInFrames 
     * property value. This property is described as follows: 
     * 
     * The number of spanning tree explorer frames that have been received by 
     * the port from its segment. 
     * 
     * @param	int	new SteInFrames property value
     * @exception	Exception	
     */
    public void setSteInFrames(int steInFrames) {

    this.steInFrames = steInFrames;
    } // setSteInFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SteOutFrames. 
     */
    private int steOutFrames;
    /**
     * This method returns the SwitchPortSourceRoutingStatistics.SteOutFrames 
     * property value. This property is described as follows: 
     * 
     * The number of spanning tree explorer frames that have been transmitted 
     * by the port on its segment. 
     * 
     * @return	int	current SteOutFrames property value
     * @exception	Exception	
     */
    public int getSteOutFrames(){

    return this.steOutFrames;
    } // getSteOutFrames

    /**
     * This method sets the SwitchPortSourceRoutingStatistics.SteOutFrames 
     * property value. This property is described as follows: 
     * 
     * The number of spanning tree explorer frames that have been transmitted 
     * by the port on its segment. 
     * 
     * @param	int	new SteOutFrames property value
     * @exception	Exception	
     */
    public void setSteOutFrames(int steOutFrames) {

    this.steOutFrames = steOutFrames;
    } // setSteOutFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SegmentMismatchDiscards. 
     */
    private int segmentMismatchDiscards;
    /**
     * This method returns the 
     * SwitchPortSourceRoutingStatistics.SegmentMismatchDiscards property 
     * value. This property is described as follows: 
     * 
     * The number of explorer frames that have been discarded by the port 
     * because the routing descriptor field contained an invalid adjacent 
     * segment value. 
     * 
     * @return	int	current SegmentMismatchDiscards property 
     * value 
     * @exception	Exception	
     */
    public int getSegmentMismatchDiscards(){

    return this.segmentMismatchDiscards;
    } // getSegmentMismatchDiscards

    /**
     * This method sets the 
     * SwitchPortSourceRoutingStatistics.SegmentMismatchDiscards property 
     * value. This property is described as follows: 
     * 
     * The number of explorer frames that have been discarded by the port 
     * because the routing descriptor field contained an invalid adjacent 
     * segment value. 
     * 
     * @param	int	new SegmentMismatchDiscards property value
     * @exception	Exception	
     */
    public void setSegmentMismatchDiscards(int segmentMismatchDiscards) {

    this.segmentMismatchDiscards = segmentMismatchDiscards;
    } // setSegmentMismatchDiscards


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DuplicateSegmentDiscards. 
     */
    private int duplicateSegmentDiscards;
    /**
     * This method returns the 
     * SwitchPortSourceRoutingStatistics.DuplicateSegmentDiscards property 
     * value. This property is described as follows: 
     * 
     * The number of frames that have been discarded by the port because the 
     * routing descriptor field contained a duplicate segment identifier. 
     * 
     * @return	int	current DuplicateSegmentDiscards property 
     * value 
     * @exception	Exception	
     */
    public int getDuplicateSegmentDiscards(){

    return this.duplicateSegmentDiscards;
    } // getDuplicateSegmentDiscards

    /**
     * This method sets the 
     * SwitchPortSourceRoutingStatistics.DuplicateSegmentDiscards property 
     * value. This property is described as follows: 
     * 
     * The number of frames that have been discarded by the port because the 
     * routing descriptor field contained a duplicate segment identifier. 
     * 
     * @param	int	new DuplicateSegmentDiscards property value
     * @exception	Exception	
     */
    public void setDuplicateSegmentDiscards(int duplicateSegmentDiscards) {

    this.duplicateSegmentDiscards = duplicateSegmentDiscards;
    } // setDuplicateSegmentDiscards


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HopCountExceedsDiscards. 
     */
    private int hopCountExceedsDiscards;
    /**
     * This method returns the 
     * SwitchPortSourceRoutingStatistics.HopCountExceedsDiscards property 
     * value. This property is described as follows: 
     * 
     * The number of explorer frames that have been discarded by the port 
     * because the Routing Information Field has exceeded the maximum route 
     * descriptor length. 
     * 
     * @return	int	current HopCountExceedsDiscards property 
     * value 
     * @exception	Exception	
     */
    public int getHopCountExceedsDiscards(){

    return this.hopCountExceedsDiscards;
    } // getHopCountExceedsDiscards

    /**
     * This method sets the 
     * SwitchPortSourceRoutingStatistics.HopCountExceedsDiscards property 
     * value. This property is described as follows: 
     * 
     * The number of explorer frames that have been discarded by the port 
     * because the Routing Information Field has exceeded the maximum route 
     * descriptor length. 
     * 
     * @param	int	new HopCountExceedsDiscards property value
     * @exception	Exception	
     */
    public void setHopCountExceedsDiscards(int hopCountExceedsDiscards) {

    this.hopCountExceedsDiscards = hopCountExceedsDiscards;
    } // setHopCountExceedsDiscards


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DupLanIdOrTreeErrors. 
     */
    private int dupLanIdOrTreeErrors;
    /**
     * This method returns the 
     * SwitchPortSourceRoutingStatistics.DupLanIdOrTreeErrors property value. 
     * This property is described as follows: 
     * 
     * The number of duplicate LAN IDs or Tree errors. This helps in detection 
     * of problems in networks containing older Source Routing Bridges. 
     * 
     * @return	int	current DupLanIdOrTreeErrors property value
     * @exception	Exception	
     */
    public int getDupLanIdOrTreeErrors(){

    return this.dupLanIdOrTreeErrors;
    } // getDupLanIdOrTreeErrors

    /**
     * This method sets the 
     * SwitchPortSourceRoutingStatistics.DupLanIdOrTreeErrors property value. 
     * This property is described as follows: 
     * 
     * The number of duplicate LAN IDs or Tree errors. This helps in detection 
     * of problems in networks containing older Source Routing Bridges. 
     * 
     * @param	int	new DupLanIdOrTreeErrors property value
     * @exception	Exception	
     */
    public void setDupLanIdOrTreeErrors(int dupLanIdOrTreeErrors) {

    this.dupLanIdOrTreeErrors = dupLanIdOrTreeErrors;
    } // setDupLanIdOrTreeErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property LanIdMismatches. 
     */
    private int lanIdMismatches;
    /**
     * This method returns the 
     * SwitchPortSourceRoutingStatistics.LanIdMismatches property value. This 
     * property is described as follows: 
     * 
     * The number of ARE and STE frames that were discarded because the last 
     * LAN ID in the routing information field did not equal the LAN-in ID. 
     * This error can occur in implementations which do only a LAN-in ID and 
     * Bridge Number check instead of a LAN-in ID, Bridge Number, and LAN-out 
     * ID check before they forward broadcast frames. 
     * 
     * @return	int	current LanIdMismatches property value
     * @exception	Exception	
     */
    public int getLanIdMismatches(){

    return this.lanIdMismatches;
    } // getLanIdMismatches

    /**
     * This method sets the SwitchPortSourceRoutingStatistics.LanIdMismatches 
     * property value. This property is described as follows: 
     * 
     * The number of ARE and STE frames that were discarded because the last 
     * LAN ID in the routing information field did not equal the LAN-in ID. 
     * This error can occur in implementations which do only a LAN-in ID and 
     * Bridge Number check instead of a LAN-in ID, Bridge Number, and LAN-out 
     * ID check before they forward broadcast frames. 
     * 
     * @param	int	new LanIdMismatches property value
     * @exception	Exception	
     */
    public void setLanIdMismatches(int lanIdMismatches) {

    this.lanIdMismatches = lanIdMismatches;
    } // setLanIdMismatches



} // Class SwitchPortSourceRoutingStatistics
