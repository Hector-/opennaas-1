/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 17 
 * 13:56:59 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class ConcreteComponent as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * ConcreteComponentBean Interface. The CIM class ConcreteComponent is 
 * described as follows: 
 * 
 * CIM_ConcreteComponent is a generic association used to establish 'part of' 
 * relationships between ManagedElements. It is defined as a concrete 
 * subclass of the abstract CIM_Component class, to be used in place of many 
 * specific subclasses of Component that add no semantics, that is subclasses 
 * that do not clarify the type of composition, update cardinalities, or add 
 * or remove qualifiers. Note that when you define additional semantics for 
 * Component, this class must not be subclassed. Specific semantics continue 
 * to be defined as subclasses of the abstract CIM_Component. 
 * ConcreteComponent is limited in its use as a concrete form of a general 
 * composition. It was deemed more prudent to create this concrete subclass 
 * than to change Component from an abstract to a concrete class. Industry 
 * usage and impact could not be anticipated. 
 */
public class ConcreteComponent extends Component implements Serializable {

    /**
     * This constructor creates a ConcreteComponentBeanImpl Class which 
     * implements the ConcreteComponentBean Interface, and encapsulates the 
     * CIM class ConcreteComponent in a Java Bean. The CIM class 
     * ConcreteComponent is described as follows: 
     * 
     * CIM_ConcreteComponent is a generic association used to establish 'part 
     * of' relationships between ManagedElements. It is defined as a concrete 
     * subclass of the abstract CIM_Component class, to be used in place of 
     * many specific subclasses of Component that add no semantics, that is 
     * subclasses that do not clarify the type of composition, update 
     * cardinalities, or add or remove qualifiers. Note that when you define 
     * additional semantics for Component, this class must not be subclassed. 
     * Specific semantics continue to be defined as subclasses of the 
     * abstract CIM_Component. ConcreteComponent is limited in its use as a 
     * concrete form of a general composition. It was deemed more prudent to 
     * create this concrete subclass than to change Component from an 
     * abstract to a concrete class. Industry usage and impact could not be 
     * anticipated. 
     */
    public ConcreteComponent(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property GroupComponent. 
     */
    private ManagedElement groupComponent;
    /**
     * This method returns the ConcreteComponent.GroupComponent property 
     * value. This property is described as follows: 
     * 
     * The parent element in the association.
     * 
     * @return	CIM_ManagedElement	current GroupComponent 
     * property value 
     * @exception	Exception	
     */
    public ManagedElement getGroupComponent(){

    return (ManagedElement)groupComponent;
    } // getGroupComponent

    /**
     * This method sets the ConcreteComponent.GroupComponent property value. 
     * This property is described as follows: 
     * 
     * The parent element in the association.
     * 
     * @param	CIM_ManagedElement	new GroupComponent property 
     * value 
     * @exception	Exception	
     */
    public void setGroupComponent(ManagedElement groupComponent) {

    this.groupComponent = groupComponent;
    } // setGroupComponent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PartComponent. 
     */
    private ManagedElement partComponent;
    /**
     * This method returns the ConcreteComponent.PartComponent property value. 
     * This property is described as follows: 
     * 
     * The child element in the association.
     * 
     * @return	CIM_ManagedElement	current PartComponent property 
     * value 
     * @exception	Exception	
     */
    public ManagedElement getPartComponent(){

    return (ManagedElement)partComponent;
    } // getPartComponent

    /**
     * This method sets the ConcreteComponent.PartComponent property value. 
     * This property is described as follows: 
     * 
     * The child element in the association.
     * 
     * @param	CIM_ManagedElement	new PartComponent property 
     * value 
     * @exception	Exception	
     */
    public void setPartComponent(ManagedElement partComponent) {

    this.partComponent = partComponent;
    } // setPartComponent



} // Class ConcreteComponent
