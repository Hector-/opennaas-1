/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class AHTransform as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * AHTransformBean Interface. The CIM class AHTransform is described as 
 * follows: 
 * 
 * AHTransform defines the parameters used for a phase 2 AH (Authentication 
 * Header) Security Association. 
 */
    @Entity
public class AHTransform extends SATransform implements Serializable {

    /**
     * This constructor creates a AHTransformBeanImpl Class which implements 
     * the AHTransformBean Interface, and encapsulates the CIM class 
     * AHTransform in a Java Bean. The CIM class AHTransform is described as 
     * follows: 
     * 
     * AHTransform defines the parameters used for a phase 2 AH 
     * (Authentication Header) Security Association. 
     */
    public AHTransform(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AHTransformId. 
     */

    public enum AHTransformId{
    OTHER,
    MD5,
    SHA_1,
    DES
    }
    private AHTransformId aHTransformId;
    /**
     * This method returns the AHTransform.AHTransformId property value. This 
     * property is described as follows: 
     * 
     * AHTransformId is an enumeration that specifies the hash algorithm to be 
     * used. The list of values was generated from RFC2407, Section 4.4.3. 
     * 
     * @return	int	current AHTransformId property value
     * @exception	Exception	
     */
    public AHTransformId getAHTransformId(){

    return this.aHTransformId;
    } // getAHTransformId

    /**
     * This method sets the AHTransform.AHTransformId property value. This 
     * property is described as follows: 
     * 
     * AHTransformId is an enumeration that specifies the hash algorithm to be 
     * used. The list of values was generated from RFC2407, Section 4.4.3. 
     * 
     * @param	int	new AHTransformId property value
     * @exception	Exception	
     */
    public void setAHTransformId(AHTransformId aHTransformId){

    this.aHTransformId = aHTransformId;
    } // setAHTransformId


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherAHTransformId. 
     */
    private String otherAHTransformId;
    /**
     * This method returns the AHTransform.otherAHTransformId property value. 
     * This property is described as follows: 
     * 
     * Description of the hash algorithm when the value 1 ("Other") is 
     * specified for the property, AHTransformId. 
     * 
     * @return	String	current otherAHTransformId property value
     * @exception	Exception	
     */
    public String getotherAHTransformId(){

    return this.otherAHTransformId;
    } // getotherAHTransformId

    /**
     * This method sets the AHTransform.otherAHTransformId property value. 
     * This property is described as follows: 
     * 
     * Description of the hash algorithm when the value 1 ("Other") is 
     * specified for the property, AHTransformId. 
     * 
     * @param	String	new otherAHTransformId property value
     * @exception	Exception	
     */
    public void setotherAHTransformId(String otherAHTransformId) {

    this.otherAHTransformId = otherAHTransformId;
    } // setotherAHTransformId


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property UseReplayPrevention. 
     */
    private boolean useReplayPrevention;
    /**
     * This method returns the AHTransform.useReplayPrevention property value. 
     * This property is described as follows: 
     * 
     * UseReplayPrevention causes the local peer to enable replay prevention 
     * detection. This can be accomplished by using a sequence number when 
     * sending a packet or checking the sequence number upon receipt of a 
     * packet. 
     * 
     * @return	boolean	current useReplayPrevention property 
     * value 
     * @exception	Exception	
     */
    public boolean isuseReplayPrevention(){

    return this.useReplayPrevention;
    } // getuseReplayPrevention

    /**
     * This method sets the AHTransform.useReplayPrevention property value. 
     * This property is described as follows: 
     * 
     * UseReplayPrevention causes the local peer to enable replay prevention 
     * detection. This can be accomplished by using a sequence number when 
     * sending a packet or checking the sequence number upon receipt of a 
     * packet. 
     * 
     * @param	boolean	new useReplayPrevention property value
     * @exception	Exception	
     */
    public void setuseReplayPrevention(boolean useReplayPrevention) {

    this.useReplayPrevention = useReplayPrevention;
    } // setuseReplayPrevention


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ReplayPreventionWindowSize. 
     */
    private long replayPreventionWindowSize;
    /**
     * This method returns the AHTransform.replayPreventionWindowSize property 
     * value. This property is described as follows: 
     * 
     * ReplayPreventionWindowsSize specifies, in bits, the length of the 
     * sliding window used by the replay prevention mechanism. The value of 
     * this property is meaningless if UseReplayPrevention is false. The 
     * window size MUST be a power of 2. 
     * 
     * @return	long	current replayPreventionWindowSize property 
     * value 
     * @exception	Exception	
     */
    public long getreplayPreventionWindowSize(){

    return this.replayPreventionWindowSize;
    } // getreplayPreventionWindowSize

    /**
     * This method sets the AHTransform.replayPreventionWindowSize property 
     * value. This property is described as follows: 
     * 
     * ReplayPreventionWindowsSize specifies, in bits, the length of the 
     * sliding window used by the replay prevention mechanism. The value of 
     * this property is meaningless if UseReplayPrevention is false. The 
     * window size MUST be a power of 2. 
     * 
     * @param	long	new replayPreventionWindowSize property value
     * @exception	Exception	
     */
    public void setreplayPreventionWindowSize(long replayPreventionWindowSize) 
	{

    this.replayPreventionWindowSize = replayPreventionWindowSize;
    } // setreplayPreventionWindowSize



} // Class AHTransform
