/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class DNSSettingData as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * DNSSettingDataBean Interface. The CIM class DNSSettingData is described as 
 * follows: 
 * 
 * DNSSettingData defines the DNSconfiguration settings for a single IP 
 * network connection. With the exception of the the DNSServerAddresses and 
 * the hostname in use, the configuration of a DNSProtocolEndpoint is 
 * indicated by the properties of an associated instance of DNSSettingData. 
 */
    @Entity
public class DNSSettingData extends IPAssignmentSettingData implements 
    Serializable {

    /**
     * This constructor creates a DNSSettingDataBeanImpl Class which 
     * implements the DNSSettingDataBean Interface, and encapsulates the CIM 
     * class DNSSettingData in a Java Bean. The CIM class DNSSettingData is 
     * described as follows: 
     * 
     * DNSSettingData defines the DNSconfiguration settings for a single IP 
     * network connection. With the exception of the the DNSServerAddresses 
     * and the hostname in use, the configuration of a DNSProtocolEndpoint is 
     * indicated by the properties of an associated instance of 
     * DNSSettingData. 
     */
    public DNSSettingData(){};

    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DomainName. 
     */
    private String domainName;
    /**
     * This method returns the DNSSettingData.domainName property value. This 
     * property is described as follows: 
     * 
     * The domain to use for this client connection.
     * 
     * @return	String	current domainName property value
     * @exception	Exception	
     */
    public String getdomainName(){

    return this.domainName;
    } // getdomainName

    /**
     * This method sets the DNSSettingData.domainName property value. This 
     * property is described as follows: 
     * 
     * The domain to use for this client connection.
     * 
     * @param	String	new domainName property value
     * @exception	Exception	
     */
    public void setdomainName(String domainName) {

    this.domainName = domainName;
    } // setdomainName


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RequestedHostname. 
     */
    private String requestedHostname;
    /**
     * This method returns the DNSSettingData.requestedHostname property 
     * value. This property is described as follows: 
     * 
     * The Hostname requested for this client connection.
     * 
     * @return	String	current requestedHostname property value
     * @exception	Exception	
     */
    public String getrequestedHostname(){

    return this.requestedHostname;
    } // getrequestedHostname

    /**
     * This method sets the DNSSettingData.requestedHostname property value. 
     * This property is described as follows: 
     * 
     * The Hostname requested for this client connection.
     * 
     * @param	String	new requestedHostname property value
     * @exception	Exception	
     */
    public void setrequestedHostname(String requestedHostname) {

    this.requestedHostname = requestedHostname;
    } // setrequestedHostname


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property UseSuffixWhenRegistering. 
     */
    private boolean useSuffixWhenRegistering;
    /**
     * This method returns the DNSSettingData.useSuffixWhenRegistering 
     * property value. This property is described as follows: 
     * 
     * Whether or not the suffix should be appended before registering the 
     * client name with the DNS server. 
     * 
     * @return	boolean	current useSuffixWhenRegistering property 
     * value 
     * @exception	Exception	
     */
    public boolean isuseSuffixWhenRegistering(){

    return this.useSuffixWhenRegistering;
    } // getuseSuffixWhenRegistering

    /**
     * This method sets the DNSSettingData.useSuffixWhenRegistering property 
     * value. This property is described as follows: 
     * 
     * Whether or not the suffix should be appended before registering the 
     * client name with the DNS server. 
     * 
     * @param	boolean	new useSuffixWhenRegistering property 
     * value 
     * @exception	Exception	
     */
    public void setuseSuffixWhenRegistering(boolean useSuffixWhenRegistering) 
	{

    this.useSuffixWhenRegistering = useSuffixWhenRegistering;
    } // setuseSuffixWhenRegistering


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RegisterThisConnectionsAddress. 
     */
    private boolean registerThisConnectionsAddress;
    /**
     * This method returns the DNSSettingData.registerThisConnectionsAddress 
     * property value. This property is described as follows: 
     * 
     * Whether or not this connection's address should be registered in DNS.
     * 
     * @return	boolean	current registerThisConnectionsAddress 
     * property value 
     * @exception	Exception	
     */
    public boolean isregisterThisConnectionsAddress(){

    return this.registerThisConnectionsAddress;
    } // getregisterThisConnectionsAddress

    /**
     * This method sets the DNSSettingData.registerThisConnectionsAddress 
     * property value. This property is described as follows: 
     * 
     * Whether or not this connection's address should be registered in DNS.
     * 
     * @param	boolean	new registerThisConnectionsAddress 
     * property value 
     * @exception	Exception	
     */
    public void setregisterThisConnectionsAddress(boolean 
	registerThisConnectionsAddress) {

    this.registerThisConnectionsAddress = registerThisConnectionsAddress;
    } // setregisterThisConnectionsAddress


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DNSServerAddresses. 
     */
    private String[] dNSServerAddresses;
    /**
     * This method returns the DNSSettingData.dNSServerAddresses property 
     * value. This property is described as follows: 
     * 
     * The DNS servers to contact. The array ordering correlates to the order 
     * in which the DNS servers will be contacted. The 
     * RemoteServiceAccessPoints associated with the DNSProtocolEndpoint with 
     * the value of the AccessContext property being "DNS Server" represent 
     * the actual DNS Servers being utilized by the DNS client. 
     * 
     * @return	String[]	current dNSServerAddresses property 
     * value 
     * @exception	Exception	
     */
    public String[] getdNSServerAddresses(){

    return this.dNSServerAddresses;
    } // getdNSServerAddresses

    /**
     * This method sets the DNSSettingData.dNSServerAddresses property value. 
     * This property is described as follows: 
     * 
     * The DNS servers to contact. The array ordering correlates to the order 
     * in which the DNS servers will be contacted. The 
     * RemoteServiceAccessPoints associated with the DNSProtocolEndpoint with 
     * the value of the AccessContext property being "DNS Server" represent 
     * the actual DNS Servers being utilized by the DNS client. 
     * 
     * @param	String[]	new dNSServerAddresses property value
     * @exception	Exception	
     */
    public void setdNSServerAddresses(String[] dNSServerAddresses) {

    this.dNSServerAddresses = dNSServerAddresses;
    } // setdNSServerAddresses


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DHCPOptionsToUse. 
     */

    public enum DHCPOptionsToUse{
    DOMAIN_NAME_SERVER,
    HOST_NAME,
    DOMAIN_NAME,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }
    private DHCPOptionsToUse dHCPOptionsToUse;
    /**
     * This method returns the DNSSettingData.DHCPOptionsToUse property value. 
     * This property is described as follows: 
     * 
     * One or more DHCP options that the DNS client should utilise if they are 
     * returned during a DHCP bind operation. 
     * 
     * @return	int	current DHCPOptionsToUse property value
     * @exception	Exception	
     */
    public DHCPOptionsToUse getDHCPOptionsToUse(){

    return this.dHCPOptionsToUse;
    } // getDHCPOptionsToUse

    /**
     * This method sets the DNSSettingData.DHCPOptionsToUse property value. 
     * This property is described as follows: 
     * 
     * One or more DHCP options that the DNS client should utilise if they are 
     * returned during a DHCP bind operation. 
     * 
     * @param	int	new DHCPOptionsToUse property value
     * @exception	Exception	
     */
    public void setDHCPOptionsToUse(DHCPOptionsToUse dHCPOptionsToUse){

    this.dHCPOptionsToUse = dHCPOptionsToUse;
    } // setDHCPOptionsToUse



} // Class DNSSettingData
