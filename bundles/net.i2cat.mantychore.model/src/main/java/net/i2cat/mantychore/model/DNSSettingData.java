/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 15:29:20 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class DNSSettingData as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * DNSSettingDataBean Interface. The CIM class DNSSettingData is described as 
 * follows: 
 * 
 * DNSSettingData defines the DNSconfiguration settings for a single IP 
 * network connection. With the exception of the the DNSServerAddresses and 
 * the hostname in use, the configuration of a DNSProtocolEndpoint is 
 * indicated by the properties of an associated instance of DNSSettingData. 
 */
public class DNSSettingData extends IPAssignmentSettingData implements 
    Serializable {

    /**
     * This constructor creates a DNSSettingDataBeanImpl Class which 
     * implements the DNSSettingDataBean Interface, and encapsulates the CIM 
     * class DNSSettingData in a Java Bean. The CIM class DNSSettingData is 
     * described as follows: 
     * 
     * DNSSettingData defines the DNSconfiguration settings for a single IP 
     * network connection. With the exception of the the DNSServerAddresses 
     * and the hostname in use, the configuration of a DNSProtocolEndpoint is 
     * indicated by the properties of an associated instance of 
     * DNSSettingData. 
     */
    public DNSSettingData(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AddressOrigin. 
     */

    public enum AddressOrigin{
    DMTF_RESERVED,
    NOT_APPLICABLE,
    DMTF_RESERVED1,
    VENDOR_RESERVED
    }
 public AddressOrigin addressOrigin;
    /**
     * This method returns the DNSSettingData.AddressOrigin property value. 
     * This property is described as follows: 
     * 
     * AddressOrigin identifies the method by which the IP Address, Subnet 
     * Mask, and Gateway were assigned to the IPProtocolEndpoint. This is 
     * independent of the DNS configuration, thus this property has the value 
     * of 2 ("Not Applicable") 
     * 
     * @return	short	current AddressOrigin property value
     * @exception	Exception	
     */
    public AddressOrigin getAddressOrigin(){

    return this.addressOrigin;
    } // getAddressOrigin

    /**
     * This method sets the DNSSettingData.AddressOrigin property value. This 
     * property is described as follows: 
     * 
     * AddressOrigin identifies the method by which the IP Address, Subnet 
     * Mask, and Gateway were assigned to the IPProtocolEndpoint. This is 
     * independent of the DNS configuration, thus this property has the value 
     * of 2 ("Not Applicable") 
     * 
     * @param	short	new AddressOrigin property value
     * @exception	Exception	
     */
    public void setAddressOrigin(AddressOrigin addressOrigin){

    this.addressOrigin = addressOrigin;
    } // setAddressOrigin


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DomainName. 
     */
    private String domainName;
    /**
     * This method returns the DNSSettingData.DomainName property value. This 
     * property is described as follows: 
     * 
     * The domain to use for this client connection.
     * 
     * @return	String	current DomainName property value
     * @exception	Exception	
     */
    public String getDomainName(){

    return this.domainName;
    } // getDomainName

    /**
     * This method sets the DNSSettingData.DomainName property value. This 
     * property is described as follows: 
     * 
     * The domain to use for this client connection.
     * 
     * @param	String	new DomainName property value
     * @exception	Exception	
     */
    public void setDomainName(String domainName) {

    this.domainName = domainName;
    } // setDomainName


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RequestedHostname. 
     */
    private String requestedHostname;
    /**
     * This method returns the DNSSettingData.RequestedHostname property 
     * value. This property is described as follows: 
     * 
     * The Hostname requested for this client connection.
     * 
     * @return	String	current RequestedHostname property value
     * @exception	Exception	
     */
    public String getRequestedHostname(){

    return this.requestedHostname;
    } // getRequestedHostname

    /**
     * This method sets the DNSSettingData.RequestedHostname property value. 
     * This property is described as follows: 
     * 
     * The Hostname requested for this client connection.
     * 
     * @param	String	new RequestedHostname property value
     * @exception	Exception	
     */
    public void setRequestedHostname(String requestedHostname) {

    this.requestedHostname = requestedHostname;
    } // setRequestedHostname


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property UseSuffixWhenRegistering. 
     */
    private boolean useSuffixWhenRegistering;
    /**
     * This method returns the DNSSettingData.UseSuffixWhenRegistering 
     * property value. This property is described as follows: 
     * 
     * Whether or not the suffix should be appended before registering the 
     * client name with the DNS server. 
     * 
     * @return	boolean	current UseSuffixWhenRegistering property 
     * value 
     * @exception	Exception	
     */
    public boolean isUseSuffixWhenRegistering(){

    return this.useSuffixWhenRegistering;
    } // getUseSuffixWhenRegistering

    /**
     * This method sets the DNSSettingData.UseSuffixWhenRegistering property 
     * value. This property is described as follows: 
     * 
     * Whether or not the suffix should be appended before registering the 
     * client name with the DNS server. 
     * 
     * @param	boolean	new UseSuffixWhenRegistering property 
     * value 
     * @exception	Exception	
     */
    public void setUseSuffixWhenRegistering(boolean useSuffixWhenRegistering) 
	{

    this.useSuffixWhenRegistering = useSuffixWhenRegistering;
    } // setUseSuffixWhenRegistering


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RegisterThisConnectionsAddress. 
     */
    private boolean registerThisConnectionsAddress;
    /**
     * This method returns the DNSSettingData.RegisterThisConnectionsAddress 
     * property value. This property is described as follows: 
     * 
     * Whether or not this connection's address should be registered in DNS.
     * 
     * @return	boolean	current RegisterThisConnectionsAddress 
     * property value 
     * @exception	Exception	
     */
    public boolean isRegisterThisConnectionsAddress(){

    return this.registerThisConnectionsAddress;
    } // getRegisterThisConnectionsAddress

    /**
     * This method sets the DNSSettingData.RegisterThisConnectionsAddress 
     * property value. This property is described as follows: 
     * 
     * Whether or not this connection's address should be registered in DNS.
     * 
     * @param	boolean	new RegisterThisConnectionsAddress 
     * property value 
     * @exception	Exception	
     */
    public void setRegisterThisConnectionsAddress(boolean 
	registerThisConnectionsAddress) {

    this.registerThisConnectionsAddress = registerThisConnectionsAddress;
    } // setRegisterThisConnectionsAddress


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DNSServerAddresses. 
     */
    private String[] dNSServerAddresses;
    /**
     * This method returns the DNSSettingData.DNSServerAddresses property 
     * value. This property is described as follows: 
     * 
     * The DNS servers to contact. The array ordering correlates to the order 
     * in which the DNS servers will be contacted. The 
     * RemoteServiceAccessPoints associated with the DNSProtocolEndpoint with 
     * the value of the AccessContext property being "DNS Server" represent 
     * the actual DNS Servers being utilized by the DNS client. 
     * 
     * @return	String[]	current DNSServerAddresses property 
     * value 
     * @exception	Exception	
     */
    public String[] getDNSServerAddresses(){

    return this.dNSServerAddresses;
    } // getDNSServerAddresses

    /**
     * This method sets the DNSSettingData.DNSServerAddresses property value. 
     * This property is described as follows: 
     * 
     * The DNS servers to contact. The array ordering correlates to the order 
     * in which the DNS servers will be contacted. The 
     * RemoteServiceAccessPoints associated with the DNSProtocolEndpoint with 
     * the value of the AccessContext property being "DNS Server" represent 
     * the actual DNS Servers being utilized by the DNS client. 
     * 
     * @param	String[]	new DNSServerAddresses property value
     * @exception	Exception	
     */
    public void setDNSServerAddresses(String[] dNSServerAddresses) {

    this.dNSServerAddresses = dNSServerAddresses;
    } // setDNSServerAddresses


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DHCPOptionsToUse. 
     */

    public enum DHCPOptionsToUse{
    DOMAIN_NAME_SERVER,
    HOST_NAME,
    DOMAIN_NAME,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }
 public DHCPOptionsToUse dHCPOptionsToUse;
    /**
     * This method returns the DNSSettingData.DHCPOptionsToUse property value. 
     * This property is described as follows: 
     * 
     * One or more DHCP options that the DNS client should utilise if they are 
     * returned during a DHCP bind operation. 
     * 
     * @return	short	current DHCPOptionsToUse property value
     * @exception	Exception	
     */
    public DHCPOptionsToUse getDHCPOptionsToUse(){

    return this.dHCPOptionsToUse;
    } // getDHCPOptionsToUse

    /**
     * This method sets the DNSSettingData.DHCPOptionsToUse property value. 
     * This property is described as follows: 
     * 
     * One or more DHCP options that the DNS client should utilise if they are 
     * returned during a DHCP bind operation. 
     * 
     * @param	short	new DHCPOptionsToUse property value
     * @exception	Exception	
     */
    public void setDHCPOptionsToUse(DHCPOptionsToUse dHCPOptionsToUse){

    this.dHCPOptionsToUse = dHCPOptionsToUse;
    } // setDHCPOptionsToUse



} // Class DNSSettingData
