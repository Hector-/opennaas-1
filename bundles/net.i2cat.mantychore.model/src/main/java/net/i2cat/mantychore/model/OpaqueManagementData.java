/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Nov 29 
 * 11:50:57 CET 2010. 
 */

package net.i2cat.mantychore.model;

import javax.wbem.client.*;
import javax.wbem.cim.*;
import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class OpaqueManagementData as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * OpaqueManagementDataBean Interface. The CIM class OpaqueManagementData is 
 * described as follows: 
 * 
 * A class derived from StorageExtent that describes opaque management data in 
 * managed systems. The structure and semantics of opaque management data, 
 * which may be standardized or proprietary, are assumed to be known by at 
 * least one management client, but need not be known by the CIM server. The 
 * UntransformedDataFormat property identifies the structure and semantics of 
 * the data. Opaque management data are typically stored in non-volatile 
 * memory that is accessible to the server. Management clients are able to 
 * read and write opaque data, to manage their lifetime, and to configure the 
 * access rights associated with them. The non-volatile storage is often used 
 * as a mailbox, with local management agents producing data for consumption 
 * by remote management clients, or vice versa. This class is not intended as 
 * a general-purpose opaque alternative to any existing or planned CIM 
 * classes. It is expressly intended for the mailbox usage model described 
 * above. 
 */
public class OpaqueManagementData extends StorageExtent implements 
    Serializable {

    /**
     * This constructor creates a OpaqueManagementDataBeanImpl Class which 
     * implements the OpaqueManagementDataBean Interface, and encapsulates 
     * the CIM class OpaqueManagementData in a Java Bean. The CIM class 
     * OpaqueManagementData is described as follows: 
     * 
     * A class derived from StorageExtent that describes opaque management 
     * data in managed systems. The structure and semantics of opaque 
     * management data, which may be standardized or proprietary, are assumed 
     * to be known by at least one management client, but need not be known 
     * by the CIM server. The UntransformedDataFormat property identifies the 
     * structure and semantics of the data. Opaque management data are 
     * typically stored in non-volatile memory that is accessible to the 
     * server. Management clients are able to read and write opaque data, to 
     * manage their lifetime, and to configure the access rights associated 
     * with them. The non-volatile storage is often used as a mailbox, with 
     * local management agents producing data for consumption by remote 
     * management clients, or vice versa. This class is not intended as a 
     * general-purpose opaque alternative to any existing or planned CIM 
     * classes. It is expressly intended for the mailbox usage model 
     * described above. 
     */
    public OpaqueManagementData(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MaxSize. 
     */
    private long maxSize;
    /**
     * This method returns the OpaqueManagementData.MaxSize property value. 
     * This property is described as follows: 
     * 
     * The maximum number of bytes of opaque management data that the instance 
     * may contain. 
     * 
     * @return	long	current MaxSize property value
     * @exception	Exception	
     */
    public long getMaxSize(){

    return this.maxSize;
    } // getMaxSize

    /**
     * This method sets the OpaqueManagementData.MaxSize property value. This 
     * property is described as follows: 
     * 
     * The maximum number of bytes of opaque management data that the instance 
     * may contain. 
     * 
     * @param	long	new MaxSize property value
     * @exception	Exception	
     */
    public void setMaxSize(long maxSize) {

    this.maxSize = maxSize;
    } // setMaxSize


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property LastAccessed. 
     */
    private CIMDateTime lastAccessed;
    /**
     * This method returns the OpaqueManagementData.LastAccessed property 
     * value. This property is described as follows: 
     * 
     * The date and time when the opaque management data was last accessed. 
     * Any operation on the OpaqueManagementData instance constitutes access. 
     * This property shall be NULL if it is not supported by the 
     * implementation. 
     * 
     * @return	CIMDateTime	current LastAccessed property value
     * @exception	Exception	
     */
    public CIMDateTime getLastAccessed(){

    return this.lastAccessed;
    } // getLastAccessed

    /**
     * This method sets the OpaqueManagementData.LastAccessed property value. 
     * This property is described as follows: 
     * 
     * The date and time when the opaque management data was last accessed. 
     * Any operation on the OpaqueManagementData instance constitutes access. 
     * This property shall be NULL if it is not supported by the 
     * implementation. 
     * 
     * @param	CIMDateTime	new LastAccessed property value
     * @exception	Exception	
     */
    public void setLastAccessed(CIMDateTime lastAccessed) {

    this.lastAccessed = lastAccessed;
    } // setLastAccessed


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property WriteLimited. 
     */

    public enum WriteLimited{
    UNKNOWN,
    NOT_WRITE_LIMITED,
    WRITE_LIMITED,
    DMTF_RESERVED
    }WriteLimited writeLimited;
    /**
     * This method returns the OpaqueManagementData.WriteLimited property 
     * value. This property is described as follows: 
     * 
     * Indicates whether the data are stored on a medium that has a limited 
     * number of write/erase cycles (e.g., flash memory). 
     * 
     * @return	short	current WriteLimited property value
     * @exception	Exception	
     */
    public WriteLimited getWriteLimited(){

    return this.writeLimited;
    } // getWriteLimited

    /**
     * This method sets the OpaqueManagementData.WriteLimited property value. 
     * This property is described as follows: 
     * 
     * Indicates whether the data are stored on a medium that has a limited 
     * number of write/erase cycles (e.g., flash memory). 
     * 
     * @param	short	new WriteLimited property value
     * @exception	Exception	
     */
    public void setWriteLimited(WriteLimited writeLimited){

    this.writeLimited = writeLimited;
    } // setWriteLimited


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DataFormat. 
     */
    private String dataFormat;
    /**
     * This method returns the OpaqueManagementData.DataFormat property value. 
     * This property is described as follows: 
     * 
     * Describes the format of the opaque management data. A free-form string 
     * that shall only be set by an authorized client, and shall not be 
     * changed by the implementation. 
     * 
     * @return	String	current DataFormat property value
     * @exception	Exception	
     */
    public String getDataFormat(){

    return this.dataFormat;
    } // getDataFormat

    /**
     * This method sets the OpaqueManagementData.DataFormat property value. 
     * This property is described as follows: 
     * 
     * Describes the format of the opaque management data. A free-form string 
     * that shall only be set by an authorized client, and shall not be 
     * changed by the implementation. 
     * 
     * @param	String	new DataFormat property value
     * @exception	Exception	
     */
    public void setDataFormat(String dataFormat) {

    this.dataFormat = dataFormat;
    } // setDataFormat


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DataSize. 
     */
    private long dataSize;
    /**
     * This method returns the OpaqueManagementData.DataSize property value. 
     * This property is described as follows: 
     * 
     * The number of bytes of opaque management data in the instance.
     * 
     * @return	long	current DataSize property value
     * @exception	Exception	
     */
    public long getDataSize(){

    return this.dataSize;
    } // getDataSize

    /**
     * This method sets the OpaqueManagementData.DataSize property value. This 
     * property is described as follows: 
     * 
     * The number of bytes of opaque management data in the instance.
     * 
     * @param	long	new DataSize property value
     * @exception	Exception	
     */
    public void setDataSize(long dataSize) {

    this.dataSize = dataSize;
    } // setDataSize



} // Class OpaqueManagementData
