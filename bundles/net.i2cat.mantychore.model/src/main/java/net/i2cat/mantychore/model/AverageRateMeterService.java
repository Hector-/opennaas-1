/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 17 
 * 13:56:59 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class AverageRateMeterService as well as methods comparable to 
 * the invokeMethods defined for this class. This Class implements the 
 * AverageRateMeterServiceBean Interface. The CIM class 
 * AverageRateMeterService is described as follows: 
 * 
 * This is a concrete subclass of MeterService that represents a simple meter, 
 * called an Average Rate Meter. This type of meter measures the average rate 
 * at which packets are submitted to it over a specified time. Packets are 
 * defined as conformant if their average arrival rate does not exceed the 
 * specified measuring rate of the meter. Any packet that causes the 
 * specified measuring rate to be exceeded is defined to be non-conforming. 
 */
public class AverageRateMeterService extends MeterService implements 
    Serializable {

    /**
     * This constructor creates a AverageRateMeterServiceBeanImpl Class which 
     * implements the AverageRateMeterServiceBean Interface, and encapsulates 
     * the CIM class AverageRateMeterService in a Java Bean. The CIM class 
     * AverageRateMeterService is described as follows: 
     * 
     * This is a concrete subclass of MeterService that represents a simple 
     * meter, called an Average Rate Meter. This type of meter measures the 
     * average rate at which packets are submitted to it over a specified 
     * time. Packets are defined as conformant if their average arrival rate 
     * does not exceed the specified measuring rate of the meter. Any packet 
     * that causes the specified measuring rate to be exceeded is defined to 
     * be non-conforming. 
     */
    public AverageRateMeterService(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AverageRate. 
     */
    private int averageRate;
    /**
     * This method returns the AverageRateMeterService.AverageRate property 
     * value. This property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer that defines the rate used 
     * to determine whether admitted packets are in conformance or not. The 
     * value is specified in kilobits per second. 
     * 
     * @return	int	current AverageRate property value
     * @exception	Exception	
     */
    public int getAverageRate(){

    return this.averageRate;
    } // getAverageRate

    /**
     * This method sets the AverageRateMeterService.AverageRate property 
     * value. This property is described as follows: 
     * 
     * This property is a 32-bit unsigned integer that defines the rate used 
     * to determine whether admitted packets are in conformance or not. The 
     * value is specified in kilobits per second. 
     * 
     * @param	int	new AverageRate property value
     * @exception	Exception	
     */
    public void setAverageRate(int averageRate) {

    this.averageRate = averageRate;
    } // setAverageRate


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DeltaInterval. 
     */
    private long deltaInterval;
    /**
     * This method returns the AverageRateMeterService.DeltaInterval property 
     * value. This property is described as follows: 
     * 
     * This property is a 64-bit unsigned integer that defines the time period 
     * over which the average measurement should be taken. The value is 
     * specified in microseconds. 
     * 
     * @return	long	current DeltaInterval property value
     * @exception	Exception	
     */
    public long getDeltaInterval(){

    return this.deltaInterval;
    } // getDeltaInterval

    /**
     * This method sets the AverageRateMeterService.DeltaInterval property 
     * value. This property is described as follows: 
     * 
     * This property is a 64-bit unsigned integer that defines the time period 
     * over which the average measurement should be taken. The value is 
     * specified in microseconds. 
     * 
     * @param	long	new DeltaInterval property value
     * @exception	Exception	
     */
    public void setDeltaInterval(long deltaInterval) {

    this.deltaInterval = deltaInterval;
    } // setDeltaInterval



} // Class AverageRateMeterService
