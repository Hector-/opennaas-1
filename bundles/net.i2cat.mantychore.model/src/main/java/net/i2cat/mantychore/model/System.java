/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class System as well as methods comparable to the invokeMethods 
 * defined for this class. This Class implements the SystemBean Interface. 
 * The CIM class System is described as follows: 
 * 
 * CIM_System represents an entity made up of component parts (defined by the 
 * SystemComponent relationship), that operates as a 'functional whole'. 
 * Systems are top-level objects in the CIM hierarchy, requiring no scoping 
 * or weak relationships in order to exist and have context. It should be 
 * reasonable to uniquely name and manage a System at an enterprise level. 
 * For example, a ComputerSystem is a kind of System that can be uniquely 
 * named and independently managed in an enterprise. However, these qualities 
 * are not true for the power supply (or the power supply sub-'system') 
 * within the computer. Although a System can be viewed as a Collection, this 
 * view is not the correct model. A Collection is simply a 'bag' that 'holds' 
 * its members. A System is a higher-level abstraction, built out of its 
 * individual components. It is more than the sum of its parts. Note that 
 * System is a subclass of EnabledLogicalElement which allows the entire 
 * abstraction to be functionally enabled or disabled at a higher level than 
 * enabling or disabling its component parts. 
 */
    @Entity
public class System extends EnabledLogicalElement implements Serializable {

    /**
     * This constructor creates a SystemBeanImpl Class which implements the 
     * SystemBean Interface, and encapsulates the CIM class System in a Java 
     * Bean. The CIM class System is described as follows: 
     * 
     * CIM_System represents an entity made up of component parts (defined by 
     * the SystemComponent relationship), that operates as a 'functional 
     * whole'. Systems are top-level objects in the CIM hierarchy, requiring 
     * no scoping or weak relationships in order to exist and have context. 
     * It should be reasonable to uniquely name and manage a System at an 
     * enterprise level. For example, a ComputerSystem is a kind of System 
     * that can be uniquely named and independently managed in an enterprise. 
     * However, these qualities are not true for the power supply (or the 
     * power supply sub-'system') within the computer. Although a System can 
     * be viewed as a Collection, this view is not the correct model. A 
     * Collection is simply a 'bag' that 'holds' its members. A System is a 
     * higher-level abstraction, built out of its individual components. It 
     * is more than the sum of its parts. Note that System is a subclass of 
     * EnabledLogicalElement which allows the entire abstraction to be 
     * functionally enabled or disabled at a higher level than enabling or 
     * disabling its component parts. 
     */
    protected System(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CreationClassName. 
     */
    private String creationClassName;
    /**
     * This method returns the System.creationClassName property value. This 
     * property is described as follows: 
     * 
     * CreationClassName indicates the name of the class or the subclass used 
     * in the creation of an instance. When used with the other key 
     * properties of this class, this property allows all instances of this 
     * class and its subclasses to be uniquely identified. 
     * 
     * @return	String	current creationClassName property value
     * @exception	Exception	
     */
    public String getcreationClassName(){

    return this.creationClassName;
    } // getcreationClassName

    /**
     * This method sets the System.creationClassName property value. This 
     * property is described as follows: 
     * 
     * CreationClassName indicates the name of the class or the subclass used 
     * in the creation of an instance. When used with the other key 
     * properties of this class, this property allows all instances of this 
     * class and its subclasses to be uniquely identified. 
     * 
     * @param	String	new creationClassName property value
     * @exception	Exception	
     */
    public void setcreationClassName(String creationClassName) {

    this.creationClassName = creationClassName;
    } // setcreationClassName


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Name. 
     */
    private String name;
    /**
     * This method returns the System.name property value. This property is 
     * described as follows: 
     * 
     * The inherited Name serves as the key of a System instance in an 
     * enterprise environment. 
     * 
     * @return	String	current name property value
     * @exception	Exception	
     */
    public String getname(){

    return (String)name;
    } // getname

    /**
     * This method sets the System.name property value. This property is 
     * described as follows: 
     * 
     * The inherited Name serves as the key of a System instance in an 
     * enterprise environment. 
     * 
     * @param	String	new name property value
     * @exception	Exception	
     */
    public void setname(String name) {

    this.name = name;
    } // setname


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property NameFormat. 
     */
    private String nameFormat;
    /**
     * This method returns the System.nameFormat property value. This property 
     * is described as follows: 
     * 
     * The System object and its derivatives are top-level objects of CIM. 
     * They provide the scope for numerous components. Having unique System 
     * keys is required. A heuristic can be defined in individual System 
     * subclasses to attempt to always generate the same System Name Key. The 
     * NameFormat property identifies how the System name was generated, 
     * using the heuristic of the subclass. 
     * 
     * @return	String	current nameFormat property value
     * @exception	Exception	
     */
    public String getnameFormat(){

    return this.nameFormat;
    } // getnameFormat

    /**
     * This method sets the System.nameFormat property value. This property is 
     * described as follows: 
     * 
     * The System object and its derivatives are top-level objects of CIM. 
     * They provide the scope for numerous components. Having unique System 
     * keys is required. A heuristic can be defined in individual System 
     * subclasses to attempt to always generate the same System Name Key. The 
     * NameFormat property identifies how the System name was generated, 
     * using the heuristic of the subclass. 
     * 
     * @param	String	new nameFormat property value
     * @exception	Exception	
     */
    public void setnameFormat(String nameFormat) {

    this.nameFormat = nameFormat;
    } // setnameFormat


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PrimaryOwnerName. 
     */
    private String primaryOwnerName;
    /**
     * This method returns the System.primaryOwnerName property value. This 
     * property is described as follows: 
     * 
     * The name of the primary system owner. The system owner is the primary 
     * user of the system. 
     * 
     * @return	String	current primaryOwnerName property value
     * @exception	Exception	
     */
    public String getprimaryOwnerName(){

    return this.primaryOwnerName;
    } // getprimaryOwnerName

    /**
     * This method sets the System.primaryOwnerName property value. This 
     * property is described as follows: 
     * 
     * The name of the primary system owner. The system owner is the primary 
     * user of the system. 
     * 
     * @param	String	new primaryOwnerName property value
     * @exception	Exception	
     */
    public void setprimaryOwnerName(String primaryOwnerName) {

    this.primaryOwnerName = primaryOwnerName;
    } // setprimaryOwnerName


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PrimaryOwnerContact. 
     */
    private String primaryOwnerContact;
    /**
     * This method returns the System.primaryOwnerContact property value. This 
     * property is described as follows: 
     * 
     * A string that provides information on how the primary system owner can 
     * be reached (for example, phone number, e-mail address, and so on). 
     * 
     * @return	String	current primaryOwnerContact property value
     * @exception	Exception	
     */
    public String getprimaryOwnerContact(){

    return this.primaryOwnerContact;
    } // getprimaryOwnerContact

    /**
     * This method sets the System.primaryOwnerContact property value. This 
     * property is described as follows: 
     * 
     * A string that provides information on how the primary system owner can 
     * be reached (for example, phone number, e-mail address, and so on). 
     * 
     * @param	String	new primaryOwnerContact property value
     * @exception	Exception	
     */
    public void setprimaryOwnerContact(String primaryOwnerContact) {

    this.primaryOwnerContact = primaryOwnerContact;
    } // setprimaryOwnerContact


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Roles. 
     */
    private String[] roles;
    /**
     * This method returns the System.roles property value. This property is 
     * described as follows: 
     * 
     * An array (bag) of strings that specifies the administrator -defined 
     * roles this System plays in the managed environment. Examples might be 
     * 'Building 8 print server' or 'Boise user directories'. A single system 
     * may perform multiple roles. Note that the instrumentation view of the 
     * 'roles' of a System is defined by instantiating a specific subclass of 
     * System, or by properties in a subclass, or both. For example, the 
     * purpose of a ComputerSystem is defined using the Dedicated and 
     * OtherDedicatedDescription properties. 
     * 
     * @return	String[]	current roles property value
     * @exception	Exception	
     */
    public String[] getroles(){

    return this.roles;
    } // getroles

    /**
     * This method sets the System.roles property value. This property is 
     * described as follows: 
     * 
     * An array (bag) of strings that specifies the administrator -defined 
     * roles this System plays in the managed environment. Examples might be 
     * 'Building 8 print server' or 'Boise user directories'. A single system 
     * may perform multiple roles. Note that the instrumentation view of the 
     * 'roles' of a System is defined by instantiating a specific subclass of 
     * System, or by properties in a subclass, or both. For example, the 
     * purpose of a ComputerSystem is defined using the Dedicated and 
     * OtherDedicatedDescription properties. 
     * 
     * @param	String[]	new roles property value
     * @exception	Exception	
     */
    public void setroles(String[] roles) {

    this.roles = roles;
    } // setroles


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherIdentifyingInfo. 
     */
    private String[] otherIdentifyingInfo;
    /**
     * This method returns the System.otherIdentifyingInfo property value. 
     * This property is described as follows: 
     * 
     * OtherIdentifyingInfo captures additional data, beyond System Name 
     * information, that could be used to identify a ComputerSystem. One 
     * example would be to hold the Fibre Channel World-Wide Name (WWN) of a 
     * node. Note that if only the Fibre Channel name is available and is 
     * unique (able to be used as the System key), then this property would 
     * be NULL and the WWN would become the System key, its data placed in 
     * the Name property. 
     * 
     * @return	String[]	current otherIdentifyingInfo property 
     * value 
     * @exception	Exception	
     */
    public String[] getotherIdentifyingInfo(){

    return this.otherIdentifyingInfo;
    } // getotherIdentifyingInfo

    /**
     * This method sets the System.otherIdentifyingInfo property value. This 
     * property is described as follows: 
     * 
     * OtherIdentifyingInfo captures additional data, beyond System Name 
     * information, that could be used to identify a ComputerSystem. One 
     * example would be to hold the Fibre Channel World-Wide Name (WWN) of a 
     * node. Note that if only the Fibre Channel name is available and is 
     * unique (able to be used as the System key), then this property would 
     * be NULL and the WWN would become the System key, its data placed in 
     * the Name property. 
     * 
     * @param	String[]	new otherIdentifyingInfo property value
     * @exception	Exception	
     */
    public void setotherIdentifyingInfo(String[] otherIdentifyingInfo) {

    this.otherIdentifyingInfo = otherIdentifyingInfo;
    } // setotherIdentifyingInfo


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property IdentifyingDescriptions. 
     */
    private String[] identifyingDescriptions;
    /**
     * This method returns the System.identifyingDescriptions property value. 
     * This property is described as follows: 
     * 
     * An array of free-form strings providing explanations and details behind 
     * the entries in the OtherIdentifying Info array. Note, each entry of 
     * this array is related to the entry in OtherIdentifyingInfo that is 
     * located at the same index. 
     * 
     * @return	String[]	current identifyingDescriptions property 
     * value 
     * @exception	Exception	
     */
    public String[] getidentifyingDescriptions(){

    return this.identifyingDescriptions;
    } // getidentifyingDescriptions

    /**
     * This method sets the System.identifyingDescriptions property value. 
     * This property is described as follows: 
     * 
     * An array of free-form strings providing explanations and details behind 
     * the entries in the OtherIdentifying Info array. Note, each entry of 
     * this array is related to the entry in OtherIdentifyingInfo that is 
     * located at the same index. 
     * 
     * @param	String[]	new identifyingDescriptions property 
     * value 
     * @exception	Exception	
     */
    public void setidentifyingDescriptions(String[] identifyingDescriptions) 
	{

    this.identifyingDescriptions = identifyingDescriptions;
    } // setidentifyingDescriptions



} // Class System
