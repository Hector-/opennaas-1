/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 03 
 * 14:18:55 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.io.Serializable;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class System as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the SystemBean Interface. The CIM class System is described as follows:
 * 
 * CIM_System represents an entity made up of component parts (defined by the SystemComponent relationship), that operates as a 'functional whole'.
 * Systems are top-level objects in the CIM hierarchy, requiring no scoping or weak relationships in order to exist and have context. It should be
 * reasonable to uniquely name and manage a System at an enterprise level. For example, a ComputerSystem is a kind of System that can be uniquely
 * named and independently managed in an enterprise. However, these qualities are not true for the power supply (or the power supply sub-'system')
 * within the computer. Although a System can be viewed as a Collection, this view is not the correct model. A Collection is simply a 'bag' that
 * 'holds' its members. A System is a higher-level abstraction, built out of its individual components. It is more than the sum of its parts. Note
 * that System is a subclass of EnabledLogicalElement which allows the entire abstraction to be functionally enabled or disabled at a higher level
 * than enabling or disabling its component parts.
 */
public class System extends EnabledLogicalElement implements Serializable {

	/**
	 * This constructor creates a SystemBeanImpl Class which implements the SystemBean Interface, and encapsulates the CIM class System in a Java
	 * Bean. The CIM class System is described as follows:
	 * 
	 * CIM_System represents an entity made up of component parts (defined by the SystemComponent relationship), that operates as a 'functional
	 * whole'. Systems are top-level objects in the CIM hierarchy, requiring no scoping or weak relationships in order to exist and have context. It
	 * should be reasonable to uniquely name and manage a System at an enterprise level. For example, a ComputerSystem is a kind of System that can be
	 * uniquely named and independently managed in an enterprise. However, these qualities are not true for the power supply (or the power supply
	 * sub-'system') within the computer. Although a System can be viewed as a Collection, this view is not the correct model. A Collection is simply
	 * a 'bag' that 'holds' its members. A System is a higher-level abstraction, built out of its individual components. It is more than the sum of
	 * its parts. Note that System is a subclass of EnabledLogicalElement which allows the entire abstraction to be functionally enabled or disabled
	 * at a higher level than enabling or disabling its component parts.
	 */
	protected System() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property CreationClassName.
	 */
	private String	creationClassName;

	/**
	 * This method returns the System.CreationClassName property value. This property is described as follows:
	 * 
	 * CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties
	 * of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
	 * 
	 * @return String current CreationClassName property value
	 * @exception Exception
	 */
	public String getCreationClassName() {

		return this.creationClassName;
	} // getCreationClassName

	/**
	 * This method sets the System.CreationClassName property value. This property is described as follows:
	 * 
	 * CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties
	 * of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
	 * 
	 * @param String
	 *            new CreationClassName property value
	 * @exception Exception
	 */
	public void setCreationClassName(String creationClassName) {

		this.creationClassName = creationClassName;
	} // setCreationClassName

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property Name.
	 */
	private String	name;

	/**
	 * This method returns the System.Name property value. This property is described as follows:
	 * 
	 * The inherited Name serves as the key of a System instance in an enterprise environment.
	 * 
	 * @return String current Name property value
	 * @exception Exception
	 */
	public String getName() {

		return (String) name;
	} // getName

	/**
	 * This method sets the System.Name property value. This property is described as follows:
	 * 
	 * The inherited Name serves as the key of a System instance in an enterprise environment.
	 * 
	 * @param String
	 *            new Name property value
	 * @exception Exception
	 */
	public void setName(String name) {

		this.name = name;
	} // setName

	// /**
	// * The following constants are defined for use with the ValueMap/Values
	// * qualified property NameFormat.
	// */
	// private String nameFormat;
	// /**
	// * This method returns the System.NameFormat property value. This property
	// * is described as follows:
	// *
	// * The System object and its derivatives are top-level objects of CIM.
	// * They provide the scope for numerous components. Having unique System
	// * keys is required. A heuristic can be defined in individual System
	// * subclasses to attempt to always generate the same System Name Key. The
	// * NameFormat property identifies how the System name was generated,
	// * using the heuristic of the subclass.
	// *
	// * @return String current NameFormat property value
	// * @exception Exception
	// */
	// public String getNameFormat(){
	//
	// return this.nameFormat;
	// } // getNameFormat
	//
	// /**
	// * This method sets the System.NameFormat property value. This property is
	// * described as follows:
	// *
	// * The System object and its derivatives are top-level objects of CIM.
	// * They provide the scope for numerous components. Having unique System
	// * keys is required. A heuristic can be defined in individual System
	// * subclasses to attempt to always generate the same System Name Key. The
	// * NameFormat property identifies how the System name was generated,
	// * using the heuristic of the subclass.
	// *
	// * @param String new NameFormat property value
	// * @exception Exception
	// */
	// public void setNameFormat(String nameFormat) {
	//
	// this.nameFormat = nameFormat;
	// } // setNameFormat

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property PrimaryOwnerName.
	 */
	private String	primaryOwnerName;

	/**
	 * This method returns the System.PrimaryOwnerName property value. This property is described as follows:
	 * 
	 * The name of the primary system owner. The system owner is the primary user of the system.
	 * 
	 * @return String current PrimaryOwnerName property value
	 * @exception Exception
	 */
	public String getPrimaryOwnerName() {

		return this.primaryOwnerName;
	} // getPrimaryOwnerName

	/**
	 * This method sets the System.PrimaryOwnerName property value. This property is described as follows:
	 * 
	 * The name of the primary system owner. The system owner is the primary user of the system.
	 * 
	 * @param String
	 *            new PrimaryOwnerName property value
	 * @exception Exception
	 */
	public void setPrimaryOwnerName(String primaryOwnerName) {

		this.primaryOwnerName = primaryOwnerName;
	} // setPrimaryOwnerName

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property PrimaryOwnerContact.
	 */
	private String	primaryOwnerContact;

	/**
	 * This method returns the System.PrimaryOwnerContact property value. This property is described as follows:
	 * 
	 * A string that provides information on how the primary system owner can be reached (for example, phone number, e-mail address, and so on).
	 * 
	 * @return String current PrimaryOwnerContact property value
	 * @exception Exception
	 */
	public String getPrimaryOwnerContact() {

		return this.primaryOwnerContact;
	} // getPrimaryOwnerContact

	/**
	 * This method sets the System.PrimaryOwnerContact property value. This property is described as follows:
	 * 
	 * A string that provides information on how the primary system owner can be reached (for example, phone number, e-mail address, and so on).
	 * 
	 * @param String
	 *            new PrimaryOwnerContact property value
	 * @exception Exception
	 */
	public void setPrimaryOwnerContact(String primaryOwnerContact) {

		this.primaryOwnerContact = primaryOwnerContact;
	} // setPrimaryOwnerContact

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property Roles.
	 */
	private String[]	roles;

	/**
	 * This method returns the System.Roles property value. This property is described as follows:
	 * 
	 * An array (bag) of strings that specifies the administrator -defined roles this System plays in the managed environment. Examples might be
	 * 'Building 8 print server' or 'Boise user directories'. A single system may perform multiple roles. Note that the instrumentation view of the
	 * 'roles' of a System is defined by instantiating a specific subclass of System, or by properties in a subclass, or both. For example, the
	 * purpose of a ComputerSystem is defined using the Dedicated and OtherDedicatedDescription properties.
	 * 
	 * @return String[] current Roles property value
	 * @exception Exception
	 */
	public String[] getRoles() {

		return this.roles;
	} // getRoles

	/**
	 * This method sets the System.Roles property value. This property is described as follows:
	 * 
	 * An array (bag) of strings that specifies the administrator -defined roles this System plays in the managed environment. Examples might be
	 * 'Building 8 print server' or 'Boise user directories'. A single system may perform multiple roles. Note that the instrumentation view of the
	 * 'roles' of a System is defined by instantiating a specific subclass of System, or by properties in a subclass, or both. For example, the
	 * purpose of a ComputerSystem is defined using the Dedicated and OtherDedicatedDescription properties.
	 * 
	 * @param String
	 *            [] new Roles property value
	 * @exception Exception
	 */
	public void setRoles(String[] roles) {

		this.roles = roles;
	} // setRoles

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property OtherIdentifyingInfo.
	 */
	private String[]	otherIdentifyingInfo;

	/**
	 * This method returns the System.OtherIdentifyingInfo property value. This property is described as follows:
	 * 
	 * OtherIdentifyingInfo captures additional data, beyond System Name information, that could be used to identify a ComputerSystem. One example
	 * would be to hold the Fibre Channel World-Wide Name (WWN) of a node. Note that if only the Fibre Channel name is available and is unique (able
	 * to be used as the System key), then this property would be NULL and the WWN would become the System key, its data placed in the Name property.
	 * 
	 * @return String[] current OtherIdentifyingInfo property value
	 * @exception Exception
	 */
	public String[] getOtherIdentifyingInfo() {

		return this.otherIdentifyingInfo;
	} // getOtherIdentifyingInfo

	/**
	 * This method sets the System.OtherIdentifyingInfo property value. This property is described as follows:
	 * 
	 * OtherIdentifyingInfo captures additional data, beyond System Name information, that could be used to identify a ComputerSystem. One example
	 * would be to hold the Fibre Channel World-Wide Name (WWN) of a node. Note that if only the Fibre Channel name is available and is unique (able
	 * to be used as the System key), then this property would be NULL and the WWN would become the System key, its data placed in the Name property.
	 * 
	 * @param String
	 *            [] new OtherIdentifyingInfo property value
	 * @exception Exception
	 */
	public void setOtherIdentifyingInfo(String[] otherIdentifyingInfo) {

		this.otherIdentifyingInfo = otherIdentifyingInfo;
	} // setOtherIdentifyingInfo

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property IdentifyingDescriptions.
	 */
	private String[]	identifyingDescriptions;

	/**
	 * This method returns the System.IdentifyingDescriptions property value. This property is described as follows:
	 * 
	 * An array of free-form strings providing explanations and details behind the entries in the OtherIdentifying Info array. Note, each entry of
	 * this array is related to the entry in OtherIdentifyingInfo that is located at the same index.
	 * 
	 * @return String[] current IdentifyingDescriptions property value
	 * @exception Exception
	 */
	public String[] getIdentifyingDescriptions() {

		return this.identifyingDescriptions;
	} // getIdentifyingDescriptions

	/**
	 * This method sets the System.IdentifyingDescriptions property value. This property is described as follows:
	 * 
	 * An array of free-form strings providing explanations and details behind the entries in the OtherIdentifying Info array. Note, each entry of
	 * this array is related to the entry in OtherIdentifyingInfo that is located at the same index.
	 * 
	 * @param String
	 *            [] new IdentifyingDescriptions property value
	 * @exception Exception
	 */
	public void setIdentifyingDescriptions(String[] identifyingDescriptions) {

		this.identifyingDescriptions = identifyingDescriptions;
	} // setIdentifyingDescriptions

} // Class System
