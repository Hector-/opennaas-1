/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 17 
 * 13:56:59 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class QueueAllocation as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * QueueAllocationBean Interface. The CIM class QueueAllocation is described 
 * as follows: 
 * 
 * Describes the reliance of a QueuingService on the availability of space in 
 * a BufferPool. 
 */
public class QueueAllocation extends Dependency implements Serializable {

    /**
     * This constructor creates a QueueAllocationBeanImpl Class which 
     * implements the QueueAllocationBean Interface, and encapsulates the CIM 
     * class QueueAllocation in a Java Bean. The CIM class QueueAllocation is 
     * described as follows: 
     * 
     * Describes the reliance of a QueuingService on the availability of space 
     * in a BufferPool. 
     */
    public QueueAllocation(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Antecedent. 
     */
    private BufferPool antecedent;
    /**
     * This method returns the QueueAllocation.Antecedent property value. This 
     * property is described as follows: 
     * 
     * The BufferPool supporting packet storage for a QueuingService.
     * 
     * @return	CIM_BufferPool	current Antecedent property value
     * @exception	Exception	
     */
    public BufferPool getAntecedent(){

    return (BufferPool)antecedent;
    } // getAntecedent

    /**
     * This method sets the QueueAllocation.Antecedent property value. This 
     * property is described as follows: 
     * 
     * The BufferPool supporting packet storage for a QueuingService.
     * 
     * @param	CIM_BufferPool	new Antecedent property value
     * @exception	Exception	
     */
    public void setAntecedent(BufferPool antecedent) {

    this.antecedent = antecedent;
    } // setAntecedent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Dependent. 
     */
    private QueuingService dependent;
    /**
     * This method returns the QueueAllocation.Dependent property value. This 
     * property is described as follows: 
     * 
     * The QueuingService dependent on the BufferPool for storage space.
     * 
     * @return	CIM_QueuingService	current Dependent property 
     * value 
     * @exception	Exception	
     */
    public QueuingService getDependent(){

    return (QueuingService)dependent;
    } // getDependent

    /**
     * This method sets the QueueAllocation.Dependent property value. This 
     * property is described as follows: 
     * 
     * The QueuingService dependent on the BufferPool for storage space.
     * 
     * @param	CIM_QueuingService	new Dependent property value
     * @exception	Exception	
     */
    public void setDependent(QueuingService dependent) {

    this.dependent = dependent;
    } // setDependent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AllocationPercentage. 
     */
    private Byte allocationPercentage;
    /**
     * This method returns the QueueAllocation.AllocationPercentage property 
     * value. This property is described as follows: 
     * 
     * This property is an 8-bit unsigned integer representing a percentage 
     * from 0 to 100. It defines the percentage of the BufferPool that should 
     * be allocated to the referenced QueuingService. If absolute sizes are 
     * desired, this is accomplished by defining individual BufferPools of 
     * the specified sizes, with QueueAllocation.AllocationPercentages set to 
     * 100. 
     * 
     * @return	Byte	current AllocationPercentage property value
     * @exception	Exception	
     */
    public Byte getAllocationPercentage(){

    return this.allocationPercentage;
    } // getAllocationPercentage

    /**
     * This method sets the QueueAllocation.AllocationPercentage property 
     * value. This property is described as follows: 
     * 
     * This property is an 8-bit unsigned integer representing a percentage 
     * from 0 to 100. It defines the percentage of the BufferPool that should 
     * be allocated to the referenced QueuingService. If absolute sizes are 
     * desired, this is accomplished by defining individual BufferPools of 
     * the specified sizes, with QueueAllocation.AllocationPercentages set to 
     * 100. 
     * 
     * @param	Byte	new AllocationPercentage property value
     * @exception	Exception	
     */
    public void setAllocationPercentage(Byte allocationPercentage) {

    this.allocationPercentage = allocationPercentage;
    } // setAllocationPercentage



} // Class QueueAllocation
