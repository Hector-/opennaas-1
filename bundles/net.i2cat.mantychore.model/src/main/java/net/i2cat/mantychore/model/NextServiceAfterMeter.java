/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Nov 29 
 * 11:50:57 CET 2010. 
 */

package net.i2cat.mantychore.model;

import javax.wbem.client.*;
import javax.wbem.cim.*;
import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class NextServiceAfterMeter as well as methods comparable to 
 * the invokeMethods defined for this class. This Class implements the 
 * NextServiceAfterMeterBean Interface. The CIM class NextServiceAfterMeter 
 * is described as follows: 
 * 
 * This association describes a predecessor-successor relationship between a 
 * MeterService and one or more ConditioningService objects that process 
 * traffic from the meter. For example, for devices that implement preamble 
 * marking, the FollowingService reference (after the meter) is a 
 * PreambleMarkerService - to record the results of the metering in the 
 * preamble. It might be expected that the NextServiceAfterMeter association 
 * would subclass from NextService. However, meters are 1:n fan-out elements, 
 * and require a mechanism to distinguish between the different 
 * results/outputs of the meter. Therefore, this association defines a new 
 * key property, MeterResult, which is used to record the result and identify 
 * the output through which this traffic left the meter. 
 */
public class NextServiceAfterMeter  implements Serializable {

    /**
     * This constructor creates a NextServiceAfterMeterBeanImpl Class which 
     * implements the NextServiceAfterMeterBean Interface, and encapsulates 
     * the CIM class NextServiceAfterMeter in a Java Bean. The CIM class 
     * NextServiceAfterMeter is described as follows: 
     * 
     * This association describes a predecessor-successor relationship between 
     * a MeterService and one or more ConditioningService objects that 
     * process traffic from the meter. For example, for devices that 
     * implement preamble marking, the FollowingService reference (after the 
     * meter) is a PreambleMarkerService - to record the results of the 
     * metering in the preamble. It might be expected that the 
     * NextServiceAfterMeter association would subclass from NextService. 
     * However, meters are 1:n fan-out elements, and require a mechanism to 
     * distinguish between the different results/outputs of the meter. 
     * Therefore, this association defines a new key property, MeterResult, 
     * which is used to record the result and identify the output through 
     * which this traffic left the meter. 
     */
    public NextServiceAfterMeter(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PrecedingService. 
     */
    private MeterService precedingService;
    /**
     * This method returns the NextServiceAfterMeter.PrecedingService property 
     * value. This property is described as follows: 
     * 
     * The preceding MeterService, 'earlier' in the processing sequence for a 
     * packet. 
     * 
     * @return	CIM_MeterService	current PrecedingService 
     * property value 
     * @exception	Exception	
     */
    public MeterService getPrecedingService(){

    return this.precedingService;
    } // getPrecedingService

    /**
     * This method sets the NextServiceAfterMeter.PrecedingService property 
     * value. This property is described as follows: 
     * 
     * The preceding MeterService, 'earlier' in the processing sequence for a 
     * packet. 
     * 
     * @param	CIM_MeterService	new PrecedingService property 
     * value 
     * @exception	Exception	
     */
    public void setPrecedingService(MeterService precedingService) {

    this.precedingService = precedingService;
    } // setPrecedingService


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property FollowingService. 
     */
    private ConditioningService followingService;
    /**
     * This method returns the NextServiceAfterMeter.FollowingService property 
     * value. This property is described as follows: 
     * 
     * The 'next' or following ConditioningService.
     * 
     * @return	CIM_ConditioningService	current FollowingService 
     * property value 
     * @exception	Exception	
     */
    public ConditioningService getFollowingService(){

    return this.followingService;
    } // getFollowingService

    /**
     * This method sets the NextServiceAfterMeter.FollowingService property 
     * value. This property is described as follows: 
     * 
     * The 'next' or following ConditioningService.
     * 
     * @param	CIM_ConditioningService	new FollowingService 
     * property value 
     * @exception	Exception	
     */
    public void setFollowingService(ConditioningService followingService) {

    this.followingService = followingService;
    } // setFollowingService


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MeterResult. 
     */

    public enum MeterResult{
    UNKNOWN,
    CONFORMING,
    PARTIALLY_CONFORMING,
    NON_CONFORMING
    }MeterResult meterResult;
    /**
     * This method returns the NextServiceAfterMeter.MeterResult property 
     * value. This property is described as follows: 
     * 
     * Information on the result of the metering. Traffic is distinguished as 
     * being conforming, non-conforming, or partially conforming. More 
     * complicated metering can be built either by extending the enumeration 
     * or by cascading meters. 
     * 
     * @return	short	current MeterResult property value
     * @exception	Exception	
     */
    public MeterResult getMeterResult(){

    return this.meterResult;
    } // getMeterResult

    /**
     * This method sets the NextServiceAfterMeter.MeterResult property value. 
     * This property is described as follows: 
     * 
     * Information on the result of the metering. Traffic is distinguished as 
     * being conforming, non-conforming, or partially conforming. More 
     * complicated metering can be built either by extending the enumeration 
     * or by cascading meters. 
     * 
     * @param	short	new MeterResult property value
     * @exception	Exception	
     */
    public void setMeterResult(MeterResult meterResult){

    this.meterResult = meterResult;
    } // setMeterResult



} // Class NextServiceAfterMeter
