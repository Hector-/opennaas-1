/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 10:54:51 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class EthernetPortStatistics as well as methods comparable to 
 * the invokeMethods defined for this class. This Class implements the 
 * EthernetPortStatisticsBean Interface. The CIM class EthernetPortStatistics 
 * is described as follows: 
 * 
 * The EthernetPortStatistics class describes the statistics for the 
 * EthernetPort. 
 */
public class EthernetPortStatistics extends NetworkPortStatistics implements 
    Serializable {

    /**
     * This constructor creates a EthernetPortStatisticsBeanImpl Class which 
     * implements the EthernetPortStatisticsBean Interface, and encapsulates 
     * the CIM class EthernetPortStatistics in a Java Bean. The CIM class 
     * EthernetPortStatistics is described as follows: 
     * 
     * The EthernetPortStatistics class describes the statistics for the 
     * EthernetPort. 
     */
    public EthernetPortStatistics(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PacketsTransmitted. 
     */
    private long packetsTransmitted;
    /**
     * This method returns the EthernetPortStatistics.PacketsTransmitted 
     * property value. This property is described as follows: 
     * 
     * The total number of packets that are transmitted.
     * 
     * @return	long	current PacketsTransmitted property value
     * @exception	Exception	
     */
    public long getPacketsTransmitted(){

    return (long)packetsTransmitted;
    } // getPacketsTransmitted

    /**
     * This method sets the EthernetPortStatistics.PacketsTransmitted property 
     * value. This property is described as follows: 
     * 
     * The total number of packets that are transmitted.
     * 
     * @param	long	new PacketsTransmitted property value
     * @exception	Exception	
     */
    public void setPacketsTransmitted(long packetsTransmitted) {

    this.packetsTransmitted = packetsTransmitted;
    } // setPacketsTransmitted


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PacketsReceived. 
     */
    private long packetsReceived;
    /**
     * This method returns the EthernetPortStatistics.PacketsReceived property 
     * value. This property is described as follows: 
     * 
     * The total number of packets that are received.
     * 
     * @return	long	current PacketsReceived property value
     * @exception	Exception	
     */
    public long getPacketsReceived(){

    return (long)packetsReceived;
    } // getPacketsReceived

    /**
     * This method sets the EthernetPortStatistics.PacketsReceived property 
     * value. This property is described as follows: 
     * 
     * The total number of packets that are received.
     * 
     * @param	long	new PacketsReceived property value
     * @exception	Exception	
     */
    public void setPacketsReceived(long packetsReceived) {

    this.packetsReceived = packetsReceived;
    } // setPacketsReceived


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SymbolErrors. 
     */
    private int symbolErrors;
    /**
     * This method returns the EthernetPortStatistics.SymbolErrors property 
     * value. This property is described as follows: 
     * 
     * The number of times that there was an invalid data symbol when a valid 
     * carrier was present. The count can be incremented only once per 
     * carrier event, even if multiple symbol errors occur during the carrier 
     * event. 
     * 
     * @return	int	current SymbolErrors property value
     * @exception	Exception	
     */
    public int getSymbolErrors(){

    return this.symbolErrors;
    } // getSymbolErrors

    /**
     * This method sets the EthernetPortStatistics.SymbolErrors property 
     * value. This property is described as follows: 
     * 
     * The number of times that there was an invalid data symbol when a valid 
     * carrier was present. The count can be incremented only once per 
     * carrier event, even if multiple symbol errors occur during the carrier 
     * event. 
     * 
     * @param	int	new SymbolErrors property value
     * @exception	Exception	
     */
    public void setSymbolErrors(int symbolErrors) {

    this.symbolErrors = symbolErrors;
    } // setSymbolErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AlignmentErrors. 
     */
    private int alignmentErrors;
    /**
     * This method returns the EthernetPortStatistics.AlignmentErrors property 
     * value. This property is described as follows: 
     * 
     * The number of frames that are received on a particular interface that 
     * are not an integral number of octets in length and do not pass the FCS 
     * check. The count represented by an instance of this object is 
     * incremented when the alignment error status is returned by the MAC 
     * layer to the LLC (or other MAC user). Received frames for which 
     * multiple error conditions obtained are, according to the conventions 
     * of IEEE 802.3 Layer Management, counted exclusively according to the 
     * error status presented to the LLC. 
     * 
     * @return	int	current AlignmentErrors property value
     * @exception	Exception	
     */
    public int getAlignmentErrors(){

    return this.alignmentErrors;
    } // getAlignmentErrors

    /**
     * This method sets the EthernetPortStatistics.AlignmentErrors property 
     * value. This property is described as follows: 
     * 
     * The number of frames that are received on a particular interface that 
     * are not an integral number of octets in length and do not pass the FCS 
     * check. The count represented by an instance of this object is 
     * incremented when the alignment error status is returned by the MAC 
     * layer to the LLC (or other MAC user). Received frames for which 
     * multiple error conditions obtained are, according to the conventions 
     * of IEEE 802.3 Layer Management, counted exclusively according to the 
     * error status presented to the LLC. 
     * 
     * @param	int	new AlignmentErrors property value
     * @exception	Exception	
     */
    public void setAlignmentErrors(int alignmentErrors) {

    this.alignmentErrors = alignmentErrors;
    } // setAlignmentErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property FCSErrors. 
     */
    private int fCSErrors;
    /**
     * This method returns the EthernetPortStatistics.FCSErrors property 
     * value. This property is described as follows: 
     * 
     * The number of frames that are received on a particular interface that 
     * are an integral number of octets in length, but do not pass the FCS 
     * check. The count represented by an instance of this object is 
     * incremented when the frame check error status is returned by the MAC 
     * layer to the LLC (or other MAC user). Received frames for which 
     * multiple error conditions obtained are, according to the conventions 
     * of the error status presented to the LLC. 
     * 
     * @return	int	current FCSErrors property value
     * @exception	Exception	
     */
    public int getFCSErrors(){

    return this.fCSErrors;
    } // getFCSErrors

    /**
     * This method sets the EthernetPortStatistics.FCSErrors property value. 
     * This property is described as follows: 
     * 
     * The number of frames that are received on a particular interface that 
     * are an integral number of octets in length, but do not pass the FCS 
     * check. The count represented by an instance of this object is 
     * incremented when the frame check error status is returned by the MAC 
     * layer to the LLC (or other MAC user). Received frames for which 
     * multiple error conditions obtained are, according to the conventions 
     * of the error status presented to the LLC. 
     * 
     * @param	int	new FCSErrors property value
     * @exception	Exception	
     */
    public void setFCSErrors(int fCSErrors) {

    this.fCSErrors = fCSErrors;
    } // setFCSErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SingleCollisionFrames. 
     */
    private int singleCollisionFrames;
    /**
     * This method returns the EthernetPortStatistics.SingleCollisionFrames 
     * property value. This property is described as follows: 
     * 
     * The number of successfully transmitted frames on a particular interface 
     * for which transmission is inhibited by exactly one collision. A frame 
     * that is counted by an instance of this object is not counted by the 
     * corresponding instance of the MultipleCollisionFrames property. 
     * 
     * @return	int	current SingleCollisionFrames property value
     * @exception	Exception	
     */
    public int getSingleCollisionFrames(){

    return this.singleCollisionFrames;
    } // getSingleCollisionFrames

    /**
     * This method sets the EthernetPortStatistics.SingleCollisionFrames 
     * property value. This property is described as follows: 
     * 
     * The number of successfully transmitted frames on a particular interface 
     * for which transmission is inhibited by exactly one collision. A frame 
     * that is counted by an instance of this object is not counted by the 
     * corresponding instance of the MultipleCollisionFrames property. 
     * 
     * @param	int	new SingleCollisionFrames property value
     * @exception	Exception	
     */
    public void setSingleCollisionFrames(int singleCollisionFrames) {

    this.singleCollisionFrames = singleCollisionFrames;
    } // setSingleCollisionFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MultipleCollisionFrames. 
     */
    private int multipleCollisionFrames;
    /**
     * This method returns the EthernetPortStatistics.MultipleCollisionFrames 
     * property value. This property is described as follows: 
     * 
     * The number of successfully transmitted frames on a particular interface 
     * for which transmission is inhibited by more than one collision. A 
     * frame that is counted by an instance of this object is not counted by 
     * the corresponding instance of the SingleCollisionFrames property. 
     * 
     * @return	int	current MultipleCollisionFrames property 
     * value 
     * @exception	Exception	
     */
    public int getMultipleCollisionFrames(){

    return this.multipleCollisionFrames;
    } // getMultipleCollisionFrames

    /**
     * This method sets the EthernetPortStatistics.MultipleCollisionFrames 
     * property value. This property is described as follows: 
     * 
     * The number of successfully transmitted frames on a particular interface 
     * for which transmission is inhibited by more than one collision. A 
     * frame that is counted by an instance of this object is not counted by 
     * the corresponding instance of the SingleCollisionFrames property. 
     * 
     * @param	int	new MultipleCollisionFrames property value
     * @exception	Exception	
     */
    public void setMultipleCollisionFrames(int multipleCollisionFrames) {

    this.multipleCollisionFrames = multipleCollisionFrames;
    } // setMultipleCollisionFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SQETestErrors. 
     */
    private int sQETestErrors;
    /**
     * This method returns the EthernetPortStatistics.SQETestErrors property 
     * value. This property is described as follows: 
     * 
     * The number of times that the SQE TEST ERROR message is generated by the 
     * PLS sublayer for a particular interface. The SQE TEST ERROR message is 
     * defined in section 7.2.2.2.4 of ANSI/IEEE 802.3-1985 and its 
     * generation is described in section 7.2.4.6 of the same document. 
     * 
     * @return	int	current SQETestErrors property value
     * @exception	Exception	
     */
    public int getSQETestErrors(){

    return this.sQETestErrors;
    } // getSQETestErrors

    /**
     * This method sets the EthernetPortStatistics.SQETestErrors property 
     * value. This property is described as follows: 
     * 
     * The number of times that the SQE TEST ERROR message is generated by the 
     * PLS sublayer for a particular interface. The SQE TEST ERROR message is 
     * defined in section 7.2.2.2.4 of ANSI/IEEE 802.3-1985 and its 
     * generation is described in section 7.2.4.6 of the same document. 
     * 
     * @param	int	new SQETestErrors property value
     * @exception	Exception	
     */
    public void setSQETestErrors(int sQETestErrors) {

    this.sQETestErrors = sQETestErrors;
    } // setSQETestErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DeferredTransmissions. 
     */
    private int deferredTransmissions;
    /**
     * This method returns the EthernetPortStatistics.DeferredTransmissions 
     * property value. This property is described as follows: 
     * 
     * The number of frames for which the first transmission attempt on a 
     * particular interface is delayed because the medium is busy. The count 
     * represented by an instance of this object does not include frames 
     * involved in collisions. 
     * 
     * @return	int	current DeferredTransmissions property value
     * @exception	Exception	
     */
    public int getDeferredTransmissions(){

    return this.deferredTransmissions;
    } // getDeferredTransmissions

    /**
     * This method sets the EthernetPortStatistics.DeferredTransmissions 
     * property value. This property is described as follows: 
     * 
     * The number of frames for which the first transmission attempt on a 
     * particular interface is delayed because the medium is busy. The count 
     * represented by an instance of this object does not include frames 
     * involved in collisions. 
     * 
     * @param	int	new DeferredTransmissions property value
     * @exception	Exception	
     */
    public void setDeferredTransmissions(int deferredTransmissions) {

    this.deferredTransmissions = deferredTransmissions;
    } // setDeferredTransmissions


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property LateCollisions. 
     */
    private int lateCollisions;
    /**
     * This method returns the EthernetPortStatistics.LateCollisions property 
     * value. This property is described as follows: 
     * 
     * The number of times that a collision is detected on a particular 
     * interface later than 512 bit-times into the transmission of a packet. 
     * Five hundred and twelve bit- times corresponds to 51.2 microseconds on 
     * a 10 Mbit/s system. A (late) collision included in a count represented 
     * by an instance of this object is also considered as a (generic) 
     * collision for purposes of other collision-related statistics. 
     * 
     * @return	int	current LateCollisions property value
     * @exception	Exception	
     */
    public int getLateCollisions(){

    return this.lateCollisions;
    } // getLateCollisions

    /**
     * This method sets the EthernetPortStatistics.LateCollisions property 
     * value. This property is described as follows: 
     * 
     * The number of times that a collision is detected on a particular 
     * interface later than 512 bit-times into the transmission of a packet. 
     * Five hundred and twelve bit- times corresponds to 51.2 microseconds on 
     * a 10 Mbit/s system. A (late) collision included in a count represented 
     * by an instance of this object is also considered as a (generic) 
     * collision for purposes of other collision-related statistics. 
     * 
     * @param	int	new LateCollisions property value
     * @exception	Exception	
     */
    public void setLateCollisions(int lateCollisions) {

    this.lateCollisions = lateCollisions;
    } // setLateCollisions


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ExcessiveCollisions. 
     */
    private int excessiveCollisions;
    /**
     * This method returns the EthernetPortStatistics.ExcessiveCollisions 
     * property value. This property is described as follows: 
     * 
     * The number of frames for which transmission on a particular interface 
     * fails due to excessive collisions. 
     * 
     * @return	int	current ExcessiveCollisions property value
     * @exception	Exception	
     */
    public int getExcessiveCollisions(){

    return this.excessiveCollisions;
    } // getExcessiveCollisions

    /**
     * This method sets the EthernetPortStatistics.ExcessiveCollisions 
     * property value. This property is described as follows: 
     * 
     * The number of frames for which transmission on a particular interface 
     * fails due to excessive collisions. 
     * 
     * @param	int	new ExcessiveCollisions property value
     * @exception	Exception	
     */
    public void setExcessiveCollisions(int excessiveCollisions) {

    this.excessiveCollisions = excessiveCollisions;
    } // setExcessiveCollisions


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property InternalMACTransmitErrors. 
     */
    private int internalMACTransmitErrors;
    /**
     * This method returns the 
     * EthernetPortStatistics.InternalMACTransmitErrors property value. This 
     * property is described as follows: 
     * 
     * The number of frames for which transmission on a particular interface 
     * fails due to an internal MAC sublayer transmit error. A frame is 
     * counted by an instance of this object only if it is not counted by the 
     * corresponding instance of either the LateCollisions property, the 
     * Excessive Collisions property, or the CarrierSenseErrors property. The 
     * precise meaning of the count that is represented by an instance of 
     * this object is implementation-specific. In particular, an instance of 
     * this object can represent a count of transmission errors on a 
     * particular interface that are not otherwise counted. 
     * 
     * @return	int	current InternalMACTransmitErrors property 
     * value 
     * @exception	Exception	
     */
    public int getInternalMACTransmitErrors(){

    return this.internalMACTransmitErrors;
    } // getInternalMACTransmitErrors

    /**
     * This method sets the EthernetPortStatistics.InternalMACTransmitErrors 
     * property value. This property is described as follows: 
     * 
     * The number of frames for which transmission on a particular interface 
     * fails due to an internal MAC sublayer transmit error. A frame is 
     * counted by an instance of this object only if it is not counted by the 
     * corresponding instance of either the LateCollisions property, the 
     * Excessive Collisions property, or the CarrierSenseErrors property. The 
     * precise meaning of the count that is represented by an instance of 
     * this object is implementation-specific. In particular, an instance of 
     * this object can represent a count of transmission errors on a 
     * particular interface that are not otherwise counted. 
     * 
     * @param	int	new InternalMACTransmitErrors property value
     * @exception	Exception	
     */
    public void setInternalMACTransmitErrors(int internalMACTransmitErrors) 
	{

    this.internalMACTransmitErrors = internalMACTransmitErrors;
    } // setInternalMACTransmitErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property InternalMACReceiveErrors. 
     */
    private int internalMACReceiveErrors;
    /**
     * This method returns the EthernetPortStatistics.InternalMACReceiveErrors 
     * property value. This property is described as follows: 
     * 
     * The number of frames for which reception on a particular interface 
     * fails due to an internal MAC sublayer receive error. A frame is 
     * counted by an instance of this object only if it is not counted by the 
     * corresponding instance of either the FrameTooLongs property, the 
     * AlignmentErrors property, or the FCSErrors property. The precise 
     * meaning of the count that is represented by an instance of this object 
     * is implementation-specific. For example, an instance of this object 
     * can represent a count of receive errors on a particular interface that 
     * are not otherwise counted. 
     * 
     * @return	int	current InternalMACReceiveErrors property 
     * value 
     * @exception	Exception	
     */
    public int getInternalMACReceiveErrors(){

    return this.internalMACReceiveErrors;
    } // getInternalMACReceiveErrors

    /**
     * This method sets the EthernetPortStatistics.InternalMACReceiveErrors 
     * property value. This property is described as follows: 
     * 
     * The number of frames for which reception on a particular interface 
     * fails due to an internal MAC sublayer receive error. A frame is 
     * counted by an instance of this object only if it is not counted by the 
     * corresponding instance of either the FrameTooLongs property, the 
     * AlignmentErrors property, or the FCSErrors property. The precise 
     * meaning of the count that is represented by an instance of this object 
     * is implementation-specific. For example, an instance of this object 
     * can represent a count of receive errors on a particular interface that 
     * are not otherwise counted. 
     * 
     * @param	int	new InternalMACReceiveErrors property value
     * @exception	Exception	
     */
    public void setInternalMACReceiveErrors(int internalMACReceiveErrors) {

    this.internalMACReceiveErrors = internalMACReceiveErrors;
    } // setInternalMACReceiveErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CarrierSenseErrors. 
     */
    private int carrierSenseErrors;
    /**
     * This method returns the EthernetPortStatistics.CarrierSenseErrors 
     * property value. This property is described as follows: 
     * 
     * The number of times that the carrier sense condition was lost or never 
     * asserted when attempting to transmit a frame on a particular 
     * interface. The count represented by an instance of this object can be 
     * incremented only once per transmission attempt, even if the carrier 
     * sense condition fluctuates during a transmission attempt. 
     * 
     * @return	int	current CarrierSenseErrors property value
     * @exception	Exception	
     */
    public int getCarrierSenseErrors(){

    return this.carrierSenseErrors;
    } // getCarrierSenseErrors

    /**
     * This method sets the EthernetPortStatistics.CarrierSenseErrors property 
     * value. This property is described as follows: 
     * 
     * The number of times that the carrier sense condition was lost or never 
     * asserted when attempting to transmit a frame on a particular 
     * interface. The count represented by an instance of this object can be 
     * incremented only once per transmission attempt, even if the carrier 
     * sense condition fluctuates during a transmission attempt. 
     * 
     * @param	int	new CarrierSenseErrors property value
     * @exception	Exception	
     */
    public void setCarrierSenseErrors(int carrierSenseErrors) {

    this.carrierSenseErrors = carrierSenseErrors;
    } // setCarrierSenseErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property FrameTooLongs. 
     */
    private int frameTooLongs;
    /**
     * This method returns the EthernetPortStatistics.FrameTooLongs property 
     * value. This property is described as follows: 
     * 
     * The number of frames received on a particular interface that exceed the 
     * maximum permitted frame size. The count represented by an instance of 
     * this object is incremented when the FrameTooLong status is returned by 
     * the MAC layer to the LLC (or other MAC user). Received frames for 
     * which multiple error conditions obtained are, according to the 
     * conventions of IEEE 802.3 Layer Management, counted exclusively 
     * according to the error status presented to the LLC. 
     * 
     * @return	int	current FrameTooLongs property value
     * @exception	Exception	
     */
    public int getFrameTooLongs(){

    return this.frameTooLongs;
    } // getFrameTooLongs

    /**
     * This method sets the EthernetPortStatistics.FrameTooLongs property 
     * value. This property is described as follows: 
     * 
     * The number of frames received on a particular interface that exceed the 
     * maximum permitted frame size. The count represented by an instance of 
     * this object is incremented when the FrameTooLong status is returned by 
     * the MAC layer to the LLC (or other MAC user). Received frames for 
     * which multiple error conditions obtained are, according to the 
     * conventions of IEEE 802.3 Layer Management, counted exclusively 
     * according to the error status presented to the LLC. 
     * 
     * @param	int	new FrameTooLongs property value
     * @exception	Exception	
     */
    public void setFrameTooLongs(int frameTooLongs) {

    this.frameTooLongs = frameTooLongs;
    } // setFrameTooLongs



} // Class EthernetPortStatistics
