/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class EthernetPortStatistics as well as methods comparable to 
 * the invokeMethods defined for this class. This Class implements the 
 * EthernetPortStatisticsBean Interface. The CIM class EthernetPortStatistics 
 * is described as follows: 
 * 
 * The EthernetPortStatistics class describes the statistics for the 
 * EthernetPort. 
 */
    @Entity
public class EthernetPortStatistics extends NetworkPortStatistics implements 
    Serializable {

    /**
     * This constructor creates a EthernetPortStatisticsBeanImpl Class which 
     * implements the EthernetPortStatisticsBean Interface, and encapsulates 
     * the CIM class EthernetPortStatistics in a Java Bean. The CIM class 
     * EthernetPortStatistics is described as follows: 
     * 
     * The EthernetPortStatistics class describes the statistics for the 
     * EthernetPort. 
     */
    public EthernetPortStatistics(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PacketsTransmitted. 
     */
    private long packetsTransmitted;
    /**
     * This method returns the EthernetPortStatistics.packetsTransmitted 
     * property value. This property is described as follows: 
     * 
     * The total number of packets that are transmitted.
     * 
     * @return	long	current packetsTransmitted property value
     * @exception	Exception	
     */
    public long getpacketsTransmitted(){

    return (long)packetsTransmitted;
    } // getpacketsTransmitted

    /**
     * This method sets the EthernetPortStatistics.packetsTransmitted property 
     * value. This property is described as follows: 
     * 
     * The total number of packets that are transmitted.
     * 
     * @param	long	new packetsTransmitted property value
     * @exception	Exception	
     */
    public void setpacketsTransmitted(long packetsTransmitted) {

    this.packetsTransmitted = packetsTransmitted;
    } // setpacketsTransmitted


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PacketsReceived. 
     */
    private long packetsReceived;
    /**
     * This method returns the EthernetPortStatistics.packetsReceived property 
     * value. This property is described as follows: 
     * 
     * The total number of packets that are received.
     * 
     * @return	long	current packetsReceived property value
     * @exception	Exception	
     */
    public long getpacketsReceived(){

    return (long)packetsReceived;
    } // getpacketsReceived

    /**
     * This method sets the EthernetPortStatistics.packetsReceived property 
     * value. This property is described as follows: 
     * 
     * The total number of packets that are received.
     * 
     * @param	long	new packetsReceived property value
     * @exception	Exception	
     */
    public void setpacketsReceived(long packetsReceived) {

    this.packetsReceived = packetsReceived;
    } // setpacketsReceived


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SymbolErrors. 
     */
    private long symbolErrors;
    /**
     * This method returns the EthernetPortStatistics.symbolErrors property 
     * value. This property is described as follows: 
     * 
     * The number of times that there was an invalid data symbol when a valid 
     * carrier was present. The count can be incremented only once per 
     * carrier event, even if multiple symbol errors occur during the carrier 
     * event. 
     * 
     * @return	long	current symbolErrors property value
     * @exception	Exception	
     */
    public long getsymbolErrors(){

    return this.symbolErrors;
    } // getsymbolErrors

    /**
     * This method sets the EthernetPortStatistics.symbolErrors property 
     * value. This property is described as follows: 
     * 
     * The number of times that there was an invalid data symbol when a valid 
     * carrier was present. The count can be incremented only once per 
     * carrier event, even if multiple symbol errors occur during the carrier 
     * event. 
     * 
     * @param	long	new symbolErrors property value
     * @exception	Exception	
     */
    public void setsymbolErrors(long symbolErrors) {

    this.symbolErrors = symbolErrors;
    } // setsymbolErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AlignmentErrors. 
     */
    private long alignmentErrors;
    /**
     * This method returns the EthernetPortStatistics.alignmentErrors property 
     * value. This property is described as follows: 
     * 
     * The number of frames that are received on a particular interface that 
     * are not an integral number of octets in length and do not pass the FCS 
     * check. The count represented by an instance of this object is 
     * incremented when the alignment error status is returned by the MAC 
     * layer to the LLC (or other MAC user). Received frames for which 
     * multiple error conditions obtained are, according to the conventions 
     * of IEEE 802.3 Layer Management, counted exclusively according to the 
     * error status presented to the LLC. 
     * 
     * @return	long	current alignmentErrors property value
     * @exception	Exception	
     */
    public long getalignmentErrors(){

    return this.alignmentErrors;
    } // getalignmentErrors

    /**
     * This method sets the EthernetPortStatistics.alignmentErrors property 
     * value. This property is described as follows: 
     * 
     * The number of frames that are received on a particular interface that 
     * are not an integral number of octets in length and do not pass the FCS 
     * check. The count represented by an instance of this object is 
     * incremented when the alignment error status is returned by the MAC 
     * layer to the LLC (or other MAC user). Received frames for which 
     * multiple error conditions obtained are, according to the conventions 
     * of IEEE 802.3 Layer Management, counted exclusively according to the 
     * error status presented to the LLC. 
     * 
     * @param	long	new alignmentErrors property value
     * @exception	Exception	
     */
    public void setalignmentErrors(long alignmentErrors) {

    this.alignmentErrors = alignmentErrors;
    } // setalignmentErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property FCSErrors. 
     */
    private long fCSErrors;
    /**
     * This method returns the EthernetPortStatistics.fCSErrors property 
     * value. This property is described as follows: 
     * 
     * The number of frames that are received on a particular interface that 
     * are an integral number of octets in length, but do not pass the FCS 
     * check. The count represented by an instance of this object is 
     * incremented when the frame check error status is returned by the MAC 
     * layer to the LLC (or other MAC user). Received frames for which 
     * multiple error conditions obtained are, according to the conventions 
     * of the error status presented to the LLC. 
     * 
     * @return	long	current fCSErrors property value
     * @exception	Exception	
     */
    public long getfCSErrors(){

    return this.fCSErrors;
    } // getfCSErrors

    /**
     * This method sets the EthernetPortStatistics.fCSErrors property value. 
     * This property is described as follows: 
     * 
     * The number of frames that are received on a particular interface that 
     * are an integral number of octets in length, but do not pass the FCS 
     * check. The count represented by an instance of this object is 
     * incremented when the frame check error status is returned by the MAC 
     * layer to the LLC (or other MAC user). Received frames for which 
     * multiple error conditions obtained are, according to the conventions 
     * of the error status presented to the LLC. 
     * 
     * @param	long	new fCSErrors property value
     * @exception	Exception	
     */
    public void setfCSErrors(long fCSErrors) {

    this.fCSErrors = fCSErrors;
    } // setfCSErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SingleCollisionFrames. 
     */
    private long singleCollisionFrames;
    /**
     * This method returns the EthernetPortStatistics.singleCollisionFrames 
     * property value. This property is described as follows: 
     * 
     * The number of successfully transmitted frames on a particular interface 
     * for which transmission is inhibited by exactly one collision. A frame 
     * that is counted by an instance of this object is not counted by the 
     * corresponding instance of the MultipleCollisionFrames property. 
     * 
     * @return	long	current singleCollisionFrames property value
     * @exception	Exception	
     */
    public long getsingleCollisionFrames(){

    return this.singleCollisionFrames;
    } // getsingleCollisionFrames

    /**
     * This method sets the EthernetPortStatistics.singleCollisionFrames 
     * property value. This property is described as follows: 
     * 
     * The number of successfully transmitted frames on a particular interface 
     * for which transmission is inhibited by exactly one collision. A frame 
     * that is counted by an instance of this object is not counted by the 
     * corresponding instance of the MultipleCollisionFrames property. 
     * 
     * @param	long	new singleCollisionFrames property value
     * @exception	Exception	
     */
    public void setsingleCollisionFrames(long singleCollisionFrames) {

    this.singleCollisionFrames = singleCollisionFrames;
    } // setsingleCollisionFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MultipleCollisionFrames. 
     */
    private long multipleCollisionFrames;
    /**
     * This method returns the EthernetPortStatistics.multipleCollisionFrames 
     * property value. This property is described as follows: 
     * 
     * The number of successfully transmitted frames on a particular interface 
     * for which transmission is inhibited by more than one collision. A 
     * frame that is counted by an instance of this object is not counted by 
     * the corresponding instance of the SingleCollisionFrames property. 
     * 
     * @return	long	current multipleCollisionFrames property 
     * value 
     * @exception	Exception	
     */
    public long getmultipleCollisionFrames(){

    return this.multipleCollisionFrames;
    } // getmultipleCollisionFrames

    /**
     * This method sets the EthernetPortStatistics.multipleCollisionFrames 
     * property value. This property is described as follows: 
     * 
     * The number of successfully transmitted frames on a particular interface 
     * for which transmission is inhibited by more than one collision. A 
     * frame that is counted by an instance of this object is not counted by 
     * the corresponding instance of the SingleCollisionFrames property. 
     * 
     * @param	long	new multipleCollisionFrames property value
     * @exception	Exception	
     */
    public void setmultipleCollisionFrames(long multipleCollisionFrames) {

    this.multipleCollisionFrames = multipleCollisionFrames;
    } // setmultipleCollisionFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SQETestErrors. 
     */
    private long sQETestErrors;
    /**
     * This method returns the EthernetPortStatistics.sQETestErrors property 
     * value. This property is described as follows: 
     * 
     * The number of times that the SQE TEST ERROR message is generated by the 
     * PLS sublayer for a particular interface. The SQE TEST ERROR message is 
     * defined in section 7.2.2.2.4 of ANSI/IEEE 802.3-1985 and its 
     * generation is described in section 7.2.4.6 of the same document. 
     * 
     * @return	long	current sQETestErrors property value
     * @exception	Exception	
     */
    public long getsQETestErrors(){

    return this.sQETestErrors;
    } // getsQETestErrors

    /**
     * This method sets the EthernetPortStatistics.sQETestErrors property 
     * value. This property is described as follows: 
     * 
     * The number of times that the SQE TEST ERROR message is generated by the 
     * PLS sublayer for a particular interface. The SQE TEST ERROR message is 
     * defined in section 7.2.2.2.4 of ANSI/IEEE 802.3-1985 and its 
     * generation is described in section 7.2.4.6 of the same document. 
     * 
     * @param	long	new sQETestErrors property value
     * @exception	Exception	
     */
    public void setsQETestErrors(long sQETestErrors) {

    this.sQETestErrors = sQETestErrors;
    } // setsQETestErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DeferredTransmissions. 
     */
    private long deferredTransmissions;
    /**
     * This method returns the EthernetPortStatistics.deferredTransmissions 
     * property value. This property is described as follows: 
     * 
     * The number of frames for which the first transmission attempt on a 
     * particular interface is delayed because the medium is busy. The count 
     * represented by an instance of this object does not include frames 
     * involved in collisions. 
     * 
     * @return	long	current deferredTransmissions property value
     * @exception	Exception	
     */
    public long getdeferredTransmissions(){

    return this.deferredTransmissions;
    } // getdeferredTransmissions

    /**
     * This method sets the EthernetPortStatistics.deferredTransmissions 
     * property value. This property is described as follows: 
     * 
     * The number of frames for which the first transmission attempt on a 
     * particular interface is delayed because the medium is busy. The count 
     * represented by an instance of this object does not include frames 
     * involved in collisions. 
     * 
     * @param	long	new deferredTransmissions property value
     * @exception	Exception	
     */
    public void setdeferredTransmissions(long deferredTransmissions) {

    this.deferredTransmissions = deferredTransmissions;
    } // setdeferredTransmissions


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property LateCollisions. 
     */
    private long lateCollisions;
    /**
     * This method returns the EthernetPortStatistics.lateCollisions property 
     * value. This property is described as follows: 
     * 
     * The number of times that a collision is detected on a particular 
     * interface later than 512 bit-times into the transmission of a packet. 
     * Five hundred and twelve bit- times corresponds to 51.2 microseconds on 
     * a 10 Mbit/s system. A (late) collision included in a count represented 
     * by an instance of this object is also considered as a (generic) 
     * collision for purposes of other collision-related statistics. 
     * 
     * @return	long	current lateCollisions property value
     * @exception	Exception	
     */
    public long getlateCollisions(){

    return this.lateCollisions;
    } // getlateCollisions

    /**
     * This method sets the EthernetPortStatistics.lateCollisions property 
     * value. This property is described as follows: 
     * 
     * The number of times that a collision is detected on a particular 
     * interface later than 512 bit-times into the transmission of a packet. 
     * Five hundred and twelve bit- times corresponds to 51.2 microseconds on 
     * a 10 Mbit/s system. A (late) collision included in a count represented 
     * by an instance of this object is also considered as a (generic) 
     * collision for purposes of other collision-related statistics. 
     * 
     * @param	long	new lateCollisions property value
     * @exception	Exception	
     */
    public void setlateCollisions(long lateCollisions) {

    this.lateCollisions = lateCollisions;
    } // setlateCollisions


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ExcessiveCollisions. 
     */
    private long excessiveCollisions;
    /**
     * This method returns the EthernetPortStatistics.excessiveCollisions 
     * property value. This property is described as follows: 
     * 
     * The number of frames for which transmission on a particular interface 
     * fails due to excessive collisions. 
     * 
     * @return	long	current excessiveCollisions property value
     * @exception	Exception	
     */
    public long getexcessiveCollisions(){

    return this.excessiveCollisions;
    } // getexcessiveCollisions

    /**
     * This method sets the EthernetPortStatistics.excessiveCollisions 
     * property value. This property is described as follows: 
     * 
     * The number of frames for which transmission on a particular interface 
     * fails due to excessive collisions. 
     * 
     * @param	long	new excessiveCollisions property value
     * @exception	Exception	
     */
    public void setexcessiveCollisions(long excessiveCollisions) {

    this.excessiveCollisions = excessiveCollisions;
    } // setexcessiveCollisions


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property InternalMACTransmitErrors. 
     */
    private long internalMACTransmitErrors;
    /**
     * This method returns the 
     * EthernetPortStatistics.internalMACTransmitErrors property value. This 
     * property is described as follows: 
     * 
     * The number of frames for which transmission on a particular interface 
     * fails due to an internal MAC sublayer transmit error. A frame is 
     * counted by an instance of this object only if it is not counted by the 
     * corresponding instance of either the LateCollisions property, the 
     * Excessive Collisions property, or the CarrierSenseErrors property. The 
     * precise meaning of the count that is represented by an instance of 
     * this object is implementation-specific. In particular, an instance of 
     * this object can represent a count of transmission errors on a 
     * particular interface that are not otherwise counted. 
     * 
     * @return	long	current internalMACTransmitErrors property 
     * value 
     * @exception	Exception	
     */
    public long getinternalMACTransmitErrors(){

    return this.internalMACTransmitErrors;
    } // getinternalMACTransmitErrors

    /**
     * This method sets the EthernetPortStatistics.internalMACTransmitErrors 
     * property value. This property is described as follows: 
     * 
     * The number of frames for which transmission on a particular interface 
     * fails due to an internal MAC sublayer transmit error. A frame is 
     * counted by an instance of this object only if it is not counted by the 
     * corresponding instance of either the LateCollisions property, the 
     * Excessive Collisions property, or the CarrierSenseErrors property. The 
     * precise meaning of the count that is represented by an instance of 
     * this object is implementation-specific. In particular, an instance of 
     * this object can represent a count of transmission errors on a 
     * particular interface that are not otherwise counted. 
     * 
     * @param	long	new internalMACTransmitErrors property value
     * @exception	Exception	
     */
    public void setinternalMACTransmitErrors(long internalMACTransmitErrors) 
	{

    this.internalMACTransmitErrors = internalMACTransmitErrors;
    } // setinternalMACTransmitErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property InternalMACReceiveErrors. 
     */
    private long internalMACReceiveErrors;
    /**
     * This method returns the EthernetPortStatistics.internalMACReceiveErrors 
     * property value. This property is described as follows: 
     * 
     * The number of frames for which reception on a particular interface 
     * fails due to an internal MAC sublayer receive error. A frame is 
     * counted by an instance of this object only if it is not counted by the 
     * corresponding instance of either the FrameTooLongs property, the 
     * AlignmentErrors property, or the FCSErrors property. The precise 
     * meaning of the count that is represented by an instance of this object 
     * is implementation-specific. For example, an instance of this object 
     * can represent a count of receive errors on a particular interface that 
     * are not otherwise counted. 
     * 
     * @return	long	current internalMACReceiveErrors property 
     * value 
     * @exception	Exception	
     */
    public long getinternalMACReceiveErrors(){

    return this.internalMACReceiveErrors;
    } // getinternalMACReceiveErrors

    /**
     * This method sets the EthernetPortStatistics.internalMACReceiveErrors 
     * property value. This property is described as follows: 
     * 
     * The number of frames for which reception on a particular interface 
     * fails due to an internal MAC sublayer receive error. A frame is 
     * counted by an instance of this object only if it is not counted by the 
     * corresponding instance of either the FrameTooLongs property, the 
     * AlignmentErrors property, or the FCSErrors property. The precise 
     * meaning of the count that is represented by an instance of this object 
     * is implementation-specific. For example, an instance of this object 
     * can represent a count of receive errors on a particular interface that 
     * are not otherwise counted. 
     * 
     * @param	long	new internalMACReceiveErrors property value
     * @exception	Exception	
     */
    public void setinternalMACReceiveErrors(long internalMACReceiveErrors) {

    this.internalMACReceiveErrors = internalMACReceiveErrors;
    } // setinternalMACReceiveErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CarrierSenseErrors. 
     */
    private long carrierSenseErrors;
    /**
     * This method returns the EthernetPortStatistics.carrierSenseErrors 
     * property value. This property is described as follows: 
     * 
     * The number of times that the carrier sense condition was lost or never 
     * asserted when attempting to transmit a frame on a particular 
     * interface. The count represented by an instance of this object can be 
     * incremented only once per transmission attempt, even if the carrier 
     * sense condition fluctuates during a transmission attempt. 
     * 
     * @return	long	current carrierSenseErrors property value
     * @exception	Exception	
     */
    public long getcarrierSenseErrors(){

    return this.carrierSenseErrors;
    } // getcarrierSenseErrors

    /**
     * This method sets the EthernetPortStatistics.carrierSenseErrors property 
     * value. This property is described as follows: 
     * 
     * The number of times that the carrier sense condition was lost or never 
     * asserted when attempting to transmit a frame on a particular 
     * interface. The count represented by an instance of this object can be 
     * incremented only once per transmission attempt, even if the carrier 
     * sense condition fluctuates during a transmission attempt. 
     * 
     * @param	long	new carrierSenseErrors property value
     * @exception	Exception	
     */
    public void setcarrierSenseErrors(long carrierSenseErrors) {

    this.carrierSenseErrors = carrierSenseErrors;
    } // setcarrierSenseErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property FrameTooLongs. 
     */
    private long frameTooLongs;
    /**
     * This method returns the EthernetPortStatistics.frameTooLongs property 
     * value. This property is described as follows: 
     * 
     * The number of frames received on a particular interface that exceed the 
     * maximum permitted frame size. The count represented by an instance of 
     * this object is incremented when the FrameTooLong status is returned by 
     * the MAC layer to the LLC (or other MAC user). Received frames for 
     * which multiple error conditions obtained are, according to the 
     * conventions of IEEE 802.3 Layer Management, counted exclusively 
     * according to the error status presented to the LLC. 
     * 
     * @return	long	current frameTooLongs property value
     * @exception	Exception	
     */
    public long getframeTooLongs(){

    return this.frameTooLongs;
    } // getframeTooLongs

    /**
     * This method sets the EthernetPortStatistics.frameTooLongs property 
     * value. This property is described as follows: 
     * 
     * The number of frames received on a particular interface that exceed the 
     * maximum permitted frame size. The count represented by an instance of 
     * this object is incremented when the FrameTooLong status is returned by 
     * the MAC layer to the LLC (or other MAC user). Received frames for 
     * which multiple error conditions obtained are, according to the 
     * conventions of IEEE 802.3 Layer Management, counted exclusively 
     * according to the error status presented to the LLC. 
     * 
     * @param	long	new frameTooLongs property value
     * @exception	Exception	
     */
    public void setframeTooLongs(long frameTooLongs) {

    this.frameTooLongs = frameTooLongs;
    } // setframeTooLongs



} // Class EthernetPortStatistics
