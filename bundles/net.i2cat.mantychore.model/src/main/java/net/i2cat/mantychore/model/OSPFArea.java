/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 03 
 * 14:18:55 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class OSPFArea as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * OSPFAreaBean Interface. The CIM class OSPFArea is described as follows: 
 * 
 * This class represents an OSPF area. The definition of an OSPF area from 
 * RFC2328, is 'OSPF allows sets of networks to be grouped together. Such a 
 * grouping is called an area. The topology of an area is hidden from the 
 * rest of the Autonomous System. This information hiding enables a 
 * significant reduction in routing traffic. Also, routing within the area is 
 * determined only by the area's own topology, lending the area protection 
 * from bad routing data.' This class has a 'Type' propery, which 
 * distinguishes between the different area types. This approach was chosen, 
 * because it provides a simpler way to indicate the type of an area, and 
 * additional subclassing is not needed at this time. 
 */
public class OSPFArea extends RoutingProtocolDomain implements Serializable 
    {

    /**
     * This constructor creates a OSPFAreaBeanImpl Class which implements the 
     * OSPFAreaBean Interface, and encapsulates the CIM class OSPFArea in a 
     * Java Bean. The CIM class OSPFArea is described as follows: 
     * 
     * This class represents an OSPF area. The definition of an OSPF area from 
     * RFC2328, is 'OSPF allows sets of networks to be grouped together. Such 
     * a grouping is called an area. The topology of an area is hidden from 
     * the rest of the Autonomous System. This information hiding enables a 
     * significant reduction in routing traffic. Also, routing within the 
     * area is determined only by the area's own topology, lending the area 
     * protection from bad routing data.' This class has a 'Type' propery, 
     * which distinguishes between the different area types. This approach 
     * was chosen, because it provides a simpler way to indicate the type of 
     * an area, and additional subclassing is not needed at this time. 
     */
    public OSPFArea(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AreaID. 
     */
    private int areaID;
    /**
     * This method returns the OSPFArea.AreaID property value. This property 
     * is described as follows: 
     * 
     * The area ID of this OSPF area, see C.2 in RFC 2328.
     * 
     * @return	int	current AreaID property value
     * @exception	Exception	
     */
    public int getAreaID(){

    return this.areaID;
    } // getAreaID

    /**
     * This method sets the OSPFArea.AreaID property value. This property is 
     * described as follows: 
     * 
     * The area ID of this OSPF area, see C.2 in RFC 2328.
     * 
     * @param	int	new AreaID property value
     * @exception	Exception	
     */
    public void setAreaID(int areaID) {

    this.areaID = areaID;
    } // setAreaID


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AreaType. 
     */

    public enum AreaType{
    PLAIN,
    STUB,
    NSSA
    }
 public AreaType areaType;
    /**
     * This method returns the OSPFArea.AreaType property value. This property 
     * is described as follows: 
     * 
     * The type of the OSPF area.
     * 
     * @return	short	current AreaType property value
     * @exception	Exception	
     */
    public AreaType getAreaType(){

    return this.areaType;
    } // getAreaType

    /**
     * This method sets the OSPFArea.AreaType property value. This property is 
     * described as follows: 
     * 
     * The type of the OSPF area.
     * 
     * @param	short	new AreaType property value
     * @exception	Exception	
     */
    public void setAreaType(AreaType areaType){

    this.areaType = areaType;
    } // setAreaType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ExtLsdbLimit. 
     */
    private int extLsdbLimit;
    /**
     * This method returns the OSPFArea.ExtLsdbLimit property value. This 
     * property is described as follows: 
     * 
     * When the number of non-default AS-external-LSAs in a router's 
     * link-state database reaches this limit, the router enters 
     * OverflowState, see 2.1 in RFC 1765. 
     * 
     * @return	int	current ExtLsdbLimit property value
     * @exception	Exception	
     */
    public int getExtLsdbLimit(){

    return this.extLsdbLimit;
    } // getExtLsdbLimit

    /**
     * This method sets the OSPFArea.ExtLsdbLimit property value. This 
     * property is described as follows: 
     * 
     * When the number of non-default AS-external-LSAs in a router's 
     * link-state database reaches this limit, the router enters 
     * OverflowState, see 2.1 in RFC 1765. 
     * 
     * @param	int	new ExtLsdbLimit property value
     * @exception	Exception	
     */
    public void setExtLsdbLimit(int extLsdbLimit) {

    this.extLsdbLimit = extLsdbLimit;
    } // setExtLsdbLimit



} // Class OSPFArea
