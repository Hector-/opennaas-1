/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 15:29:20 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class ActiveConnection as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * ActiveConnectionBean Interface. The CIM class ActiveConnection is 
 * described as follows: 
 * 
 * This association defines a connection that is currently communicating, or 
 * is configured to communicate, between two ServiceAccessPoints. It is used 
 * when the connection is not treated as a ManagedElement itself (that is, 
 * with Status, statistics, and so on), but its existence is known. The SAPs 
 * that are connected are typically at the same networking or application 
 * layer. 
 */
public class ActiveConnection extends SAPSAPDependency implements Serializable 
    {

    /**
     * This constructor creates a ActiveConnectionBeanImpl Class which 
     * implements the ActiveConnectionBean Interface, and encapsulates the 
     * CIM class ActiveConnection in a Java Bean. The CIM class 
     * ActiveConnection is described as follows: 
     * 
     * This association defines a connection that is currently communicating, 
     * or is configured to communicate, between two ServiceAccessPoints. It 
     * is used when the connection is not treated as a ManagedElement itself 
     * (that is, with Status, statistics, and so on), but its existence is 
     * known. The SAPs that are connected are typically at the same 
     * networking or application layer. 
     */
    public ActiveConnection(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Antecedent. 
     */
    private ServiceAccessPoint antecedent;
    /**
     * This method returns the ActiveConnection.Antecedent property value. 
     * This property is described as follows: 
     * 
     * A ServiceAccessPoint that is configured to communicate or is actively 
     * communicating with the Dependent SAP. In a unidirectional connection, 
     * this SAP is the one that is transmitting. 
     * 
     * @return	CIM_ServiceAccessPoint	current Antecedent 
     * property value 
     * @exception	Exception	
     */
    public ServiceAccessPoint getAntecedent(){

    return (ServiceAccessPoint)antecedent;
    } // getAntecedent

    /**
     * This method sets the ActiveConnection.Antecedent property value. This 
     * property is described as follows: 
     * 
     * A ServiceAccessPoint that is configured to communicate or is actively 
     * communicating with the Dependent SAP. In a unidirectional connection, 
     * this SAP is the one that is transmitting. 
     * 
     * @param	CIM_ServiceAccessPoint	new Antecedent property 
     * value 
     * @exception	Exception	
     */
    public void setAntecedent(ServiceAccessPoint antecedent) {

    this.antecedent = antecedent;
    } // setAntecedent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Dependent. 
     */
    private ServiceAccessPoint dependent;
    /**
     * This method returns the ActiveConnection.Dependent property value. This 
     * property is described as follows: 
     * 
     * A second ServiceAccessPoint that is configured to communicate or is 
     * actively communicating with the Antecedent SAP. In a unidirectional 
     * connection, this SAP is the one that is receiving the communication. 
     * 
     * @return	CIM_ServiceAccessPoint	current Dependent property 
     * value 
     * @exception	Exception	
     */
    public ServiceAccessPoint getDependent(){

    return (ServiceAccessPoint)dependent;
    } // getDependent

    /**
     * This method sets the ActiveConnection.Dependent property value. This 
     * property is described as follows: 
     * 
     * A second ServiceAccessPoint that is configured to communicate or is 
     * actively communicating with the Antecedent SAP. In a unidirectional 
     * connection, this SAP is the one that is receiving the communication. 
     * 
     * @param	CIM_ServiceAccessPoint	new Dependent property 
     * value 
     * @exception	Exception	
     */
    public void setDependent(ServiceAccessPoint dependent) {

    this.dependent = dependent;
    } // setDependent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property TrafficType. 
     */
    @Deprecated
    public enum TrafficType{
    UNKNOWN,
    OTHER,
    UNICAST,
    BROADCAST,
    MULTICAST,
    ANYCAST
    }
 public TrafficType trafficType;
    /**
     * This method returns the ActiveConnection.TrafficType property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this element is deprecated because it is incorrectly 
     * placed on the association. Unicast, broadcast, or other traffic types 
     * are not a function of the connection between the referenced endpoints, 
     * but rather are a function of the addressing, protocol and basic 
     * functionality of the endpoints. Deprecated description: The type of 
     * traffic that is carried over this connection. 
     * 
     * @return	short	current TrafficType property value
     * @exception	Exception	
     */
    @Deprecated
    public TrafficType getTrafficType(){

    return this.trafficType;
    } // getTrafficType

    /**
     * This method sets the ActiveConnection.TrafficType property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this element is deprecated because it is incorrectly 
     * placed on the association. Unicast, broadcast, or other traffic types 
     * are not a function of the connection between the referenced endpoints, 
     * but rather are a function of the addressing, protocol and basic 
     * functionality of the endpoints. Deprecated description: The type of 
     * traffic that is carried over this connection. 
     * 
     * @param	short	new TrafficType property value
     * @exception	Exception	
     */
    @Deprecated
    public void setTrafficType(TrafficType trafficType){

    this.trafficType = trafficType;
    } // setTrafficType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherTrafficDescription. 
     */
    @Deprecated    private String otherTrafficDescription;
    /**
     * This method returns the ActiveConnection.OtherTrafficDescription 
     * property value. This property is described as follows: 
     * 
     * Note: The use of this element is deprecated because it is incorrectly 
     * placed on the association. Unicast, broadcast, or other traffic types 
     * are not a function of the connection between the referenced endpoints, 
     * but rather are a function of the addressing, protocol and basic 
     * functionality of the endpoints. Deprecated description: A string that 
     * describes the type of traffic that is being carried over this instance 
     * when its Type property is set, for example, to 1 (Other). 
     * 
     * @return	String	current OtherTrafficDescription property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public String getOtherTrafficDescription(){

    return this.otherTrafficDescription;
    } // getOtherTrafficDescription

    /**
     * This method sets the ActiveConnection.OtherTrafficDescription property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this element is deprecated because it is incorrectly 
     * placed on the association. Unicast, broadcast, or other traffic types 
     * are not a function of the connection between the referenced endpoints, 
     * but rather are a function of the addressing, protocol and basic 
     * functionality of the endpoints. Deprecated description: A string that 
     * describes the type of traffic that is being carried over this instance 
     * when its Type property is set, for example, to 1 (Other). 
     * 
     * @param	String	new OtherTrafficDescription property value
     * @exception	Exception	
     */
    @Deprecated
    public void setOtherTrafficDescription(String otherTrafficDescription) {

    this.otherTrafficDescription = otherTrafficDescription;
    } // setOtherTrafficDescription


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property IsUnidirectional. 
     */
    private boolean isUnidirectional;
    /**
     * This method returns the ActiveConnection.IsUnidirectional property 
     * value. This property is described as follows: 
     * 
     * TRUE means that this connection is unidirectional; FALSE means that 
     * this connection is bidirectional. When the connection is 
     * unidirectional, the "speaker" should be defined as the Antecedent 
     * reference. In a bidirectional connection, the selection of which 
     * AccessPoint is the Antecedent or Dependent is immaterial. 
     * 
     * @return	boolean	current IsUnidirectional property value
     * @exception	Exception	
     */
    public boolean isIsUnidirectional(){

    return this.isUnidirectional;
    } // getIsUnidirectional

    /**
     * This method sets the ActiveConnection.IsUnidirectional property value. 
     * This property is described as follows: 
     * 
     * TRUE means that this connection is unidirectional; FALSE means that 
     * this connection is bidirectional. When the connection is 
     * unidirectional, the "speaker" should be defined as the Antecedent 
     * reference. In a bidirectional connection, the selection of which 
     * AccessPoint is the Antecedent or Dependent is immaterial. 
     * 
     * @param	boolean	new IsUnidirectional property value
     * @exception	Exception	
     */
    public void setIsUnidirectional(boolean isUnidirectional) {

    this.isUnidirectional = isUnidirectional;
    } // setIsUnidirectional



} // Class ActiveConnection
