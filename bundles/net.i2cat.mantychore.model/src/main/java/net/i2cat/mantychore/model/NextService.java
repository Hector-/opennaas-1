/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 15:29:20 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class NextService as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * NextServiceBean Interface. The CIM class NextService is described as 
 * follows: 
 * 
 * NextService establishes a predecessor-successor relationship between two 
 * ConditioningService objects. This association is used to indicate the 
 * sequence of ConditioningServices required to process a particular type of 
 * traffic. Instances describe the various relationships between different 
 * ConditioningServices (such as classifiers, meters, droppers, etc.) that 
 * are used collectively to condition traffic. Both one-to-one and more 
 * complicated fan-in and/or fan-out relationships can be described. The 
 * Conditioning Services may feed one another directly, or they may be mapped 
 * to multiple 'next' Services based on the characteristics of the packet. 
 */
public class NextService  implements Serializable {

    /**
     * This constructor creates a NextServiceBeanImpl Class which implements 
     * the NextServiceBean Interface, and encapsulates the CIM class 
     * NextService in a Java Bean. The CIM class NextService is described as 
     * follows: 
     * 
     * NextService establishes a predecessor-successor relationship between 
     * two ConditioningService objects. This association is used to indicate 
     * the sequence of ConditioningServices required to process a particular 
     * type of traffic. Instances describe the various relationships between 
     * different ConditioningServices (such as classifiers, meters, droppers, 
     * etc.) that are used collectively to condition traffic. Both one-to-one 
     * and more complicated fan-in and/or fan-out relationships can be 
     * described. The Conditioning Services may feed one another directly, or 
     * they may be mapped to multiple 'next' Services based on the 
     * characteristics of the packet. 
     */
    public NextService(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PrecedingService. 
     */
    private ConditioningService precedingService;
    /**
     * This method returns the NextService.PrecedingService property value. 
     * This property is described as follows: 
     * 
     * The preceding ConditioningService, 'earlier' in the processing sequence 
     * for a packet. 
     * 
     * @return	CIM_ConditioningService	current PrecedingService 
     * property value 
     * @exception	Exception	
     */
    public ConditioningService getPrecedingService(){

    return this.precedingService;
    } // getPrecedingService

    /**
     * This method sets the NextService.PrecedingService property value. This 
     * property is described as follows: 
     * 
     * The preceding ConditioningService, 'earlier' in the processing sequence 
     * for a packet. 
     * 
     * @param	CIM_ConditioningService	new PrecedingService 
     * property value 
     * @exception	Exception	
     */
    public void setPrecedingService(ConditioningService precedingService) {

    this.precedingService = precedingService;
    } // setPrecedingService


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property FollowingService. 
     */
    private ConditioningService followingService;
    /**
     * This method returns the NextService.FollowingService property value. 
     * This property is described as follows: 
     * 
     * The 'next' or following ConditioningService.
     * 
     * @return	CIM_ConditioningService	current FollowingService 
     * property value 
     * @exception	Exception	
     */
    public ConditioningService getFollowingService(){

    return this.followingService;
    } // getFollowingService

    /**
     * This method sets the NextService.FollowingService property value. This 
     * property is described as follows: 
     * 
     * The 'next' or following ConditioningService.
     * 
     * @param	CIM_ConditioningService	new FollowingService 
     * property value 
     * @exception	Exception	
     */
    public void setFollowingService(ConditioningService followingService) {

    this.followingService = followingService;
    } // setFollowingService



} // Class NextService
