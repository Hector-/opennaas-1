/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Nov 29 
 * 11:50:57 CET 2010. 
 */

package net.i2cat.mantychore.model;

import javax.wbem.client.*;
import javax.wbem.cim.*;
import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class NetworkPort as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * NetworkPortBean Interface. The CIM class NetworkPort is described as 
 * follows: 
 * 
 * NetworkPort is the logical representation of network communications 
 * hardware such as a physical connector and the setup or operation of the 
 * network chips, at the lowest layers of a network stack. 
 */
public class NetworkPort extends LogicalPort implements Serializable {

    /**
     * This constructor creates a NetworkPortBeanImpl Class which implements 
     * the NetworkPortBean Interface, and encapsulates the CIM class 
     * NetworkPort in a Java Bean. The CIM class NetworkPort is described as 
     * follows: 
     * 
     * NetworkPort is the logical representation of network communications 
     * hardware such as a physical connector and the setup or operation of 
     * the network chips, at the lowest layers of a network stack. 
     */
    public NetworkPort(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Speed. 
     */
    private long speed;
    /**
     * This method returns the NetworkPort.Speed property value. This property 
     * is described as follows: 
     * 
     * The current bandwidth of the Port in Bits per Second. For ports that 
     * vary in bandwidth or for those where no accurate estimation can be 
     * made, this property should contain the nominal bandwidth. 
     * 
     * @return	long	current Speed property value
     * @exception	Exception	
     */
    public long getSpeed(){

    return (long)speed;
    } // getSpeed

    /**
     * This method sets the NetworkPort.Speed property value. This property is 
     * described as follows: 
     * 
     * The current bandwidth of the Port in Bits per Second. For ports that 
     * vary in bandwidth or for those where no accurate estimation can be 
     * made, this property should contain the nominal bandwidth. 
     * 
     * @param	long	new Speed property value
     * @exception	Exception	
     */
    public void setSpeed(long speed) {

    this.speed = speed;
    } // setSpeed


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherNetworkPortType. 
     */
    @Deprecated    private String otherNetworkPortType;
    /**
     * This method returns the NetworkPort.OtherNetworkPortType property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this property is deprecated in lieu of 
     * CIM_LogicalPort.PortType. Deprecated description: The type of module, 
     * when PortType is set to 1 ("Other".) 
     * 
     * @return	String	current OtherNetworkPortType property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public String getOtherNetworkPortType(){

    return this.otherNetworkPortType;
    } // getOtherNetworkPortType

    /**
     * This method sets the NetworkPort.OtherNetworkPortType property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this property is deprecated in lieu of 
     * CIM_LogicalPort.PortType. Deprecated description: The type of module, 
     * when PortType is set to 1 ("Other".) 
     * 
     * @param	String	new OtherNetworkPortType property value
     * @exception	Exception	
     */
    @Deprecated
    public void setOtherNetworkPortType(String otherNetworkPortType) {

    this.otherNetworkPortType = otherNetworkPortType;
    } // setOtherNetworkPortType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PortNumber. 
     */
    private short portNumber;
    /**
     * This method returns the NetworkPort.PortNumber property value. This 
     * property is described as follows: 
     * 
     * NetworkPorts are often numbered relative to either a logical module or 
     * a network element. 
     * 
     * @return	short	current PortNumber property value
     * @exception	Exception	
     */
    public short getPortNumber(){

    return this.portNumber;
    } // getPortNumber

    /**
     * This method sets the NetworkPort.PortNumber property value. This 
     * property is described as follows: 
     * 
     * NetworkPorts are often numbered relative to either a logical module or 
     * a network element. 
     * 
     * @param	short	new PortNumber property value
     * @exception	Exception	
     */
    public void setPortNumber(short portNumber) {

    this.portNumber = portNumber;
    } // setPortNumber


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property LinkTechnology. 
     */

    public enum LinkTechnology{
    UNKNOWN,
    OTHER,
    ETHERNET,
    IB,
    FC,
    FDDI,
    ATM,
    TOKEN_RING,
    FRAME_RELAY,
    INFRARED,
    BLUETOOTH,
    WIRELESS_LAN
    }LinkTechnology linkTechnology;
    /**
     * This method returns the NetworkPort.LinkTechnology property value. This 
     * property is described as follows: 
     * 
     * An enumeration of the types of links. When set to 1 ("Other"), the 
     * related property OtherLinkTechnology contains a string description of 
     * the type of link. 
     * 
     * @return	short	current LinkTechnology property value
     * @exception	Exception	
     */
    public LinkTechnology getLinkTechnology(){

    return this.linkTechnology;
    } // getLinkTechnology

    /**
     * This method sets the NetworkPort.LinkTechnology property value. This 
     * property is described as follows: 
     * 
     * An enumeration of the types of links. When set to 1 ("Other"), the 
     * related property OtherLinkTechnology contains a string description of 
     * the type of link. 
     * 
     * @param	short	new LinkTechnology property value
     * @exception	Exception	
     */
    public void setLinkTechnology(LinkTechnology linkTechnology){

    this.linkTechnology = linkTechnology;
    } // setLinkTechnology


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherLinkTechnology. 
     */
    private String otherLinkTechnology;
    /**
     * This method returns the NetworkPort.OtherLinkTechnology property value. 
     * This property is described as follows: 
     * 
     * A string value that describes LinkTechnology when it is set to 1, 
     * "Other". 
     * 
     * @return	String	current OtherLinkTechnology property value
     * @exception	Exception	
     */
    public String getOtherLinkTechnology(){

    return this.otherLinkTechnology;
    } // getOtherLinkTechnology

    /**
     * This method sets the NetworkPort.OtherLinkTechnology property value. 
     * This property is described as follows: 
     * 
     * A string value that describes LinkTechnology when it is set to 1, 
     * "Other". 
     * 
     * @param	String	new OtherLinkTechnology property value
     * @exception	Exception	
     */
    public void setOtherLinkTechnology(String otherLinkTechnology) {

    this.otherLinkTechnology = otherLinkTechnology;
    } // setOtherLinkTechnology


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PermanentAddress. 
     */
    private String permanentAddress;
    /**
     * This method returns the NetworkPort.PermanentAddress property value. 
     * This property is described as follows: 
     * 
     * PermanentAddress defines the network address that is hardcoded into a 
     * port. This 'hardcoded' address can be changed using a firmware upgrade 
     * or a software configuration. When this change is made, the field 
     * should be updated at the same time. PermanentAddress should be left 
     * blank if no 'hardcoded' address exists for the NetworkAdapter. 
     * 
     * @return	String	current PermanentAddress property value
     * @exception	Exception	
     */
    public String getPermanentAddress(){

    return this.permanentAddress;
    } // getPermanentAddress

    /**
     * This method sets the NetworkPort.PermanentAddress property value. This 
     * property is described as follows: 
     * 
     * PermanentAddress defines the network address that is hardcoded into a 
     * port. This 'hardcoded' address can be changed using a firmware upgrade 
     * or a software configuration. When this change is made, the field 
     * should be updated at the same time. PermanentAddress should be left 
     * blank if no 'hardcoded' address exists for the NetworkAdapter. 
     * 
     * @param	String	new PermanentAddress property value
     * @exception	Exception	
     */
    public void setPermanentAddress(String permanentAddress) {

    this.permanentAddress = permanentAddress;
    } // setPermanentAddress


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property NetworkAddresses. 
     */
    private String[] networkAddresses;
    /**
     * This method returns the NetworkPort.NetworkAddresses property value. 
     * This property is described as follows: 
     * 
     * An array of strings that indicates the network addresses for the port.
     * 
     * @return	String[]	current NetworkAddresses property value
     * @exception	Exception	
     */
    public String[] getNetworkAddresses(){

    return this.networkAddresses;
    } // getNetworkAddresses

    /**
     * This method sets the NetworkPort.NetworkAddresses property value. This 
     * property is described as follows: 
     * 
     * An array of strings that indicates the network addresses for the port.
     * 
     * @param	String[]	new NetworkAddresses property value
     * @exception	Exception	
     */
    public void setNetworkAddresses(String[] networkAddresses) {

    this.networkAddresses = networkAddresses;
    } // setNetworkAddresses


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property FullDuplex. 
     */
    private boolean fullDuplex;
    /**
     * This method returns the NetworkPort.FullDuplex property value. This 
     * property is described as follows: 
     * 
     * Boolean that indicates that the port is operating in full duplex mode.
     * 
     * @return	boolean	current FullDuplex property value
     * @exception	Exception	
     */
    public boolean isFullDuplex(){

    return this.fullDuplex;
    } // getFullDuplex

    /**
     * This method sets the NetworkPort.FullDuplex property value. This 
     * property is described as follows: 
     * 
     * Boolean that indicates that the port is operating in full duplex mode.
     * 
     * @param	boolean	new FullDuplex property value
     * @exception	Exception	
     */
    public void setFullDuplex(boolean fullDuplex) {

    this.fullDuplex = fullDuplex;
    } // setFullDuplex


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AutoSense. 
     */
    private boolean autoSense;
    /**
     * This method returns the NetworkPort.AutoSense property value. This 
     * property is described as follows: 
     * 
     * A Boolean that indicates whether the NetworkPort is capable of 
     * automatically determining the speed or other communications 
     * characteristics of the attached network media. 
     * 
     * @return	boolean	current AutoSense property value
     * @exception	Exception	
     */
    public boolean isAutoSense(){

    return this.autoSense;
    } // getAutoSense

    /**
     * This method sets the NetworkPort.AutoSense property value. This 
     * property is described as follows: 
     * 
     * A Boolean that indicates whether the NetworkPort is capable of 
     * automatically determining the speed or other communications 
     * characteristics of the attached network media. 
     * 
     * @param	boolean	new AutoSense property value
     * @exception	Exception	
     */
    public void setAutoSense(boolean autoSense) {

    this.autoSense = autoSense;
    } // setAutoSense


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SupportedMaximumTransmissionUnit. 
     */
    private long supportedMaximumTransmissionUnit;
    /**
     * This method returns the NetworkPort.SupportedMaximumTransmissionUnit 
     * property value. This property is described as follows: 
     * 
     * The maximum transmission unit (MTU) that can be supported.
     * 
     * @return	long	current SupportedMaximumTransmissionUnit 
     * property value 
     * @exception	Exception	
     */
    public long getSupportedMaximumTransmissionUnit(){

    return this.supportedMaximumTransmissionUnit;
    } // getSupportedMaximumTransmissionUnit

    /**
     * This method sets the NetworkPort.SupportedMaximumTransmissionUnit 
     * property value. This property is described as follows: 
     * 
     * The maximum transmission unit (MTU) that can be supported.
     * 
     * @param	long	new SupportedMaximumTransmissionUnit property 
     * value 
     * @exception	Exception	
     */
    public void setSupportedMaximumTransmissionUnit(long 
	supportedMaximumTransmissionUnit) {

    this.supportedMaximumTransmissionUnit = supportedMaximumTransmissionUnit;
    } // setSupportedMaximumTransmissionUnit


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ActiveMaximumTransmissionUnit. 
     */
    private long activeMaximumTransmissionUnit;
    /**
     * This method returns the NetworkPort.ActiveMaximumTransmissionUnit 
     * property value. This property is described as follows: 
     * 
     * The active or negotiated maximum transmission unit (MTU) that can be 
     * supported. 
     * 
     * @return	long	current ActiveMaximumTransmissionUnit 
     * property value 
     * @exception	Exception	
     */
    public long getActiveMaximumTransmissionUnit(){

    return this.activeMaximumTransmissionUnit;
    } // getActiveMaximumTransmissionUnit

    /**
     * This method sets the NetworkPort.ActiveMaximumTransmissionUnit property 
     * value. This property is described as follows: 
     * 
     * The active or negotiated maximum transmission unit (MTU) that can be 
     * supported. 
     * 
     * @param	long	new ActiveMaximumTransmissionUnit property 
     * value 
     * @exception	Exception	
     */
    public void setActiveMaximumTransmissionUnit(long 
	activeMaximumTransmissionUnit) {

    this.activeMaximumTransmissionUnit = activeMaximumTransmissionUnit;
    } // setActiveMaximumTransmissionUnit



} // Class NetworkPort
