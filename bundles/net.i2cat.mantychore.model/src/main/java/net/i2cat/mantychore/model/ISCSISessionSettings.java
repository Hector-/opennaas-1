/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 03 
 * 14:18:55 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class ISCSISessionSettings as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * ISCSISessionSettingsBean Interface. The CIM class ISCSISessionSettings is 
 * described as follows: 
 * 
 * The default negotiation settings for an iSCSI Session. These properties are 
 * used as the starting position for login negotiations between initiator and 
 * target nodes. The properties describing the resulting outcome of the login 
 * negotiation are in the iSCSISession class. Depending on a given 
 * implementation an instance of iSCSISessionSettings will be associated by 
 * ElementSettingData to one or more instances of iSCSIProtocolEndpoint, 
 * SCSIProtocolController, or ComputerSystem. 
 */
public class ISCSISessionSettings extends SettingData implements Serializable 
    {

    /**
     * This constructor creates a ISCSISessionSettingsBeanImpl Class which 
     * implements the ISCSISessionSettingsBean Interface, and encapsulates 
     * the CIM class ISCSISessionSettings in a Java Bean. The CIM class 
     * ISCSISessionSettings is described as follows: 
     * 
     * The default negotiation settings for an iSCSI Session. These properties 
     * are used as the starting position for login negotiations between 
     * initiator and target nodes. The properties describing the resulting 
     * outcome of the login negotiation are in the iSCSISession class. 
     * Depending on a given implementation an instance of 
     * iSCSISessionSettings will be associated by ElementSettingData to one 
     * or more instances of iSCSIProtocolEndpoint, SCSIProtocolController, or 
     * ComputerSystem. 
     */
    public ISCSISessionSettings(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MaxConnectionsPerSession. 
     */
    private int maxConnectionsPerSession;
    /**
     * This method returns the iSCSISessionSettings.MaxConnectionsPerSession 
     * property value. This property is described as follows: 
     * 
     * The maximum number of connections allowed in each session to and/or 
     * from this node. 
     * 
     * @return	int	current MaxConnectionsPerSession property 
     * value 
     * @exception	Exception	
     */
    public int getMaxConnectionsPerSession(){

    return this.maxConnectionsPerSession;
    } // getMaxConnectionsPerSession

    /**
     * This method sets the iSCSISessionSettings.MaxConnectionsPerSession 
     * property value. This property is described as follows: 
     * 
     * The maximum number of connections allowed in each session to and/or 
     * from this node. 
     * 
     * @param	int	new MaxConnectionsPerSession property value
     * @exception	Exception	
     */
    public void setMaxConnectionsPerSession(int maxConnectionsPerSession) {

    this.maxConnectionsPerSession = maxConnectionsPerSession;
    } // setMaxConnectionsPerSession


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property InitialR2TPreference. 
     */
    private boolean initialR2TPreference;
    /**
     * This method returns the iSCSISessionSettings.InitialR2TPreference 
     * property value. This property is described as follows: 
     * 
     * This property indicates the InitialR2T preference for this node: true = 
     * YES, false = will try to negotiate NO, will accept YES. 
     * 
     * @return	boolean	current InitialR2TPreference property 
     * value 
     * @exception	Exception	
     */
    public boolean isInitialR2TPreference(){

    return this.initialR2TPreference;
    } // getInitialR2TPreference

    /**
     * This method sets the iSCSISessionSettings.InitialR2TPreference property 
     * value. This property is described as follows: 
     * 
     * This property indicates the InitialR2T preference for this node: true = 
     * YES, false = will try to negotiate NO, will accept YES. 
     * 
     * @param	boolean	new InitialR2TPreference property value
     * @exception	Exception	
     */
    public void setInitialR2TPreference(boolean initialR2TPreference) {

    this.initialR2TPreference = initialR2TPreference;
    } // setInitialR2TPreference


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ImmediateDataPreference. 
     */
    private boolean immediateDataPreference;
    /**
     * This method returns the iSCSISessionSettings.ImmediateDataPreference 
     * property value. This property is described as follows: 
     * 
     * This property indicates ImmediateData preference for this node True = 
     * YES (but will accept NO), False = NO. 
     * 
     * @return	boolean	current ImmediateDataPreference property 
     * value 
     * @exception	Exception	
     */
    public boolean isImmediateDataPreference(){

    return this.immediateDataPreference;
    } // getImmediateDataPreference

    /**
     * This method sets the iSCSISessionSettings.ImmediateDataPreference 
     * property value. This property is described as follows: 
     * 
     * This property indicates ImmediateData preference for this node True = 
     * YES (but will accept NO), False = NO. 
     * 
     * @param	boolean	new ImmediateDataPreference property value
     * @exception	Exception	
     */
    public void setImmediateDataPreference(boolean immediateDataPreference) 
	{

    this.immediateDataPreference = immediateDataPreference;
    } // setImmediateDataPreference


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MaxOutstandingR2T. 
     */
    private int maxOutstandingR2T;
    /**
     * This method returns the iSCSISessionSettings.MaxOutstandingR2T property 
     * value. This property is described as follows: 
     * 
     * Maximum number of outstanding R2Ts allowed per ISCSI task.
     * 
     * @return	int	current MaxOutstandingR2T property value
     * @exception	Exception	
     */
    public int getMaxOutstandingR2T(){

    return this.maxOutstandingR2T;
    } // getMaxOutstandingR2T

    /**
     * This method sets the iSCSISessionSettings.MaxOutstandingR2T property 
     * value. This property is described as follows: 
     * 
     * Maximum number of outstanding R2Ts allowed per ISCSI task.
     * 
     * @param	int	new MaxOutstandingR2T property value
     * @exception	Exception	
     */
    public void setMaxOutstandingR2T(int maxOutstandingR2T) {

    this.maxOutstandingR2T = maxOutstandingR2T;
    } // setMaxOutstandingR2T


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MaxUnsolicitedFirstDataBurstLength. 
     */
    private int maxUnsolicitedFirstDataBurstLength;
    /**
     * This method returns the 
     * iSCSISessionSettings.MaxUnsolicitedFirstDataBurstLength property 
     * value. This property is described as follows: 
     * 
     * The maximum length (bytes) supported for unsolicited data to/from this 
     * node. 
     * 
     * @return	int	current MaxUnsolicitedFirstDataBurstLength 
     * property value 
     * @exception	Exception	
     */
    public int getMaxUnsolicitedFirstDataBurstLength(){

    return this.maxUnsolicitedFirstDataBurstLength;
    } // getMaxUnsolicitedFirstDataBurstLength

    /**
     * This method sets the 
     * iSCSISessionSettings.MaxUnsolicitedFirstDataBurstLength property 
     * value. This property is described as follows: 
     * 
     * The maximum length (bytes) supported for unsolicited data to/from this 
     * node. 
     * 
     * @param	int	new MaxUnsolicitedFirstDataBurstLength 
     * property value 
     * @exception	Exception	
     */
    public void setMaxUnsolicitedFirstDataBurstLength(int 
	maxUnsolicitedFirstDataBurstLength) {

    this.maxUnsolicitedFirstDataBurstLength = 
	maxUnsolicitedFirstDataBurstLength;
    } // setMaxUnsolicitedFirstDataBurstLength


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MaxDataBurstLength. 
     */
    private int maxDataBurstLength;
    /**
     * This method returns the iSCSISessionSettings.MaxDataBurstLength 
     * property value. This property is described as follows: 
     * 
     * The maximum number of bytes which can be sent within a single sequence 
     * of Data-In or Data-Out PDUs. 
     * 
     * @return	int	current MaxDataBurstLength property value
     * @exception	Exception	
     */
    public int getMaxDataBurstLength(){

    return this.maxDataBurstLength;
    } // getMaxDataBurstLength

    /**
     * This method sets the iSCSISessionSettings.MaxDataBurstLength property 
     * value. This property is described as follows: 
     * 
     * The maximum number of bytes which can be sent within a single sequence 
     * of Data-In or Data-Out PDUs. 
     * 
     * @param	int	new MaxDataBurstLength property value
     * @exception	Exception	
     */
    public void setMaxDataBurstLength(int maxDataBurstLength) {

    this.maxDataBurstLength = maxDataBurstLength;
    } // setMaxDataBurstLength


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DataSequenceInOrderPreference. 
     */
    private boolean dataSequenceInOrderPreference;
    /**
     * This method returns the 
     * iSCSISessionSettings.DataSequenceInOrderPreference property value. 
     * This property is described as follows: 
     * 
     * The DataSequenceInOrder preference of this node. False (=No) indicates 
     * that iSCSI data PDU sequences MAY be transferred in any order. True 
     * (=Yes) indicates that data PDU sequences MUST be transferred using 
     * continuously increasing offsets, except during error recovery. 
     * 
     * @return	boolean	current DataSequenceInOrderPreference 
     * property value 
     * @exception	Exception	
     */
    public boolean isDataSequenceInOrderPreference(){

    return this.dataSequenceInOrderPreference;
    } // getDataSequenceInOrderPreference

    /**
     * This method sets the iSCSISessionSettings.DataSequenceInOrderPreference 
     * property value. This property is described as follows: 
     * 
     * The DataSequenceInOrder preference of this node. False (=No) indicates 
     * that iSCSI data PDU sequences MAY be transferred in any order. True 
     * (=Yes) indicates that data PDU sequences MUST be transferred using 
     * continuously increasing offsets, except during error recovery. 
     * 
     * @param	boolean	new DataSequenceInOrderPreference property 
     * value 
     * @exception	Exception	
     */
    public void setDataSequenceInOrderPreference(boolean 
	dataSequenceInOrderPreference) {

    this.dataSequenceInOrderPreference = dataSequenceInOrderPreference;
    } // setDataSequenceInOrderPreference


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DataPDUInOrderPreference. 
     */
    private boolean dataPDUInOrderPreference;
    /**
     * This method returns the iSCSISessionSettings.DataPDUInOrderPreference 
     * property value. This property is described as follows: 
     * 
     * The DataPDUInOrder preference of this node. False (=No) indicates that 
     * iSCSI data PDUs within sequences MAY be in any order. True (=Yes) 
     * indicates that data PDUs within sequences MUST be at continuously 
     * increasing addresses, with no gaps or overlay between PDUs. 
     * 
     * @return	boolean	current DataPDUInOrderPreference property 
     * value 
     * @exception	Exception	
     */
    public boolean isDataPDUInOrderPreference(){

    return this.dataPDUInOrderPreference;
    } // getDataPDUInOrderPreference

    /**
     * This method sets the iSCSISessionSettings.DataPDUInOrderPreference 
     * property value. This property is described as follows: 
     * 
     * The DataPDUInOrder preference of this node. False (=No) indicates that 
     * iSCSI data PDUs within sequences MAY be in any order. True (=Yes) 
     * indicates that data PDUs within sequences MUST be at continuously 
     * increasing addresses, with no gaps or overlay between PDUs. 
     * 
     * @param	boolean	new DataPDUInOrderPreference property 
     * value 
     * @exception	Exception	
     */
    public void setDataPDUInOrderPreference(boolean dataPDUInOrderPreference) 
	{

    this.dataPDUInOrderPreference = dataPDUInOrderPreference;
    } // setDataPDUInOrderPreference


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DefaultTimeToWaitPreference. 
     */
    private int defaultTimeToWaitPreference;
    /**
     * This method returns the 
     * iSCSISessionSettings.DefaultTimeToWaitPreference property value. This 
     * property is described as follows: 
     * 
     * The DefaultTime2Wait preference of this node. This is the minimum time, 
     * in seconds, to wait before attempting an explicit/implicit logout or 
     * active iSCSI task reassignment after an unexpected connection 
     * termination or a connection reset. 
     * 
     * @return	int	current DefaultTimeToWaitPreference property 
     * value 
     * @exception	Exception	
     */
    public int getDefaultTimeToWaitPreference(){

    return this.defaultTimeToWaitPreference;
    } // getDefaultTimeToWaitPreference

    /**
     * This method sets the iSCSISessionSettings.DefaultTimeToWaitPreference 
     * property value. This property is described as follows: 
     * 
     * The DefaultTime2Wait preference of this node. This is the minimum time, 
     * in seconds, to wait before attempting an explicit/implicit logout or 
     * active iSCSI task reassignment after an unexpected connection 
     * termination or a connection reset. 
     * 
     * @param	int	new DefaultTimeToWaitPreference property value
     * @exception	Exception	
     */
    public void setDefaultTimeToWaitPreference(int 
	defaultTimeToWaitPreference) {

    this.defaultTimeToWaitPreference = defaultTimeToWaitPreference;
    } // setDefaultTimeToWaitPreference


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DefaultTimeToRetainPreference. 
     */
    private int defaultTimeToRetainPreference;
    /**
     * This method returns the 
     * iSCSISessionSettings.DefaultTimeToRetainPreference property value. 
     * This property is described as follows: 
     * 
     * The DefaultTime2Retain preference of this node. This is the maximum 
     * time, in seconds after an initial wait (Time2Wait), before which an 
     * active iSCSI task reassignment is still possible after an unexpected 
     * connection termination or a connection reset. 
     * 
     * @return	int	current DefaultTimeToRetainPreference 
     * property value 
     * @exception	Exception	
     */
    public int getDefaultTimeToRetainPreference(){

    return this.defaultTimeToRetainPreference;
    } // getDefaultTimeToRetainPreference

    /**
     * This method sets the iSCSISessionSettings.DefaultTimeToRetainPreference 
     * property value. This property is described as follows: 
     * 
     * The DefaultTime2Retain preference of this node. This is the maximum 
     * time, in seconds after an initial wait (Time2Wait), before which an 
     * active iSCSI task reassignment is still possible after an unexpected 
     * connection termination or a connection reset. 
     * 
     * @param	int	new DefaultTimeToRetainPreference property 
     * value 
     * @exception	Exception	
     */
    public void setDefaultTimeToRetainPreference(int 
	defaultTimeToRetainPreference) {

    this.defaultTimeToRetainPreference = defaultTimeToRetainPreference;
    } // setDefaultTimeToRetainPreference


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ErrorRecoveryLevelPreference. 
     */
    private int errorRecoveryLevelPreference;
    /**
     * This method returns the 
     * iSCSISessionSettings.ErrorRecoveryLevelPreference property value. This 
     * property is described as follows: 
     * 
     * The ErrorRecoveryLevel preference of this node. Currently, only 0-2 are 
     * valid. This is designed to accommodate future error recover levels. 
     * Higher error recovery levels imply support in addition to support for 
     * the lower error level functions. In other words, error level 2 implies 
     * support for levels 0-1, since those functions are subsets of error 
     * level 2. 
     * 
     * @return	int	current ErrorRecoveryLevelPreference property 
     * value 
     * @exception	Exception	
     */
    public int getErrorRecoveryLevelPreference(){

    return this.errorRecoveryLevelPreference;
    } // getErrorRecoveryLevelPreference

    /**
     * This method sets the iSCSISessionSettings.ErrorRecoveryLevelPreference 
     * property value. This property is described as follows: 
     * 
     * The ErrorRecoveryLevel preference of this node. Currently, only 0-2 are 
     * valid. This is designed to accommodate future error recover levels. 
     * Higher error recovery levels imply support in addition to support for 
     * the lower error level functions. In other words, error level 2 implies 
     * support for levels 0-1, since those functions are subsets of error 
     * level 2. 
     * 
     * @param	int	new ErrorRecoveryLevelPreference property 
     * value 
     * @exception	Exception	
     */
    public void setErrorRecoveryLevelPreference(int 
	errorRecoveryLevelPreference) {

    this.errorRecoveryLevelPreference = errorRecoveryLevelPreference;
    } // setErrorRecoveryLevelPreference



} // Class ISCSISessionSettings
