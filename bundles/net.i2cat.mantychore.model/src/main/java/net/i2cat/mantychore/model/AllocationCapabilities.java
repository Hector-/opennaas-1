/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class AllocationCapabilities as well as methods comparable to 
 * the invokeMethods defined for this class. This Class implements the 
 * AllocationCapabilitiesBean Interface. The CIM class AllocationCapabilities 
 * is described as follows: 
 * 
 * CIM_AllocationCapabilities extends the CIM_Capabilities class for the 
 * purposes of expressing the resource allocation capabilities of the 
 * associated managed element for the allocation of a specific Resource Type. 
 * This class describes the supported types of allocations allowed, specific 
 * or general, the sharing modes supported for the device, dedicated and or 
 * shared and the system states where the addition or removal of the Resource 
 * Type is allowed. 
 */
    @Entity
public class AllocationCapabilities extends Capabilities implements 
    Serializable {

    /**
     * This constructor creates a AllocationCapabilitiesBeanImpl Class which 
     * implements the AllocationCapabilitiesBean Interface, and encapsulates 
     * the CIM class AllocationCapabilities in a Java Bean. The CIM class 
     * AllocationCapabilities is described as follows: 
     * 
     * CIM_AllocationCapabilities extends the CIM_Capabilities class for the 
     * purposes of expressing the resource allocation capabilities of the 
     * associated managed element for the allocation of a specific Resource 
     * Type. This class describes the supported types of allocations allowed, 
     * specific or general, the sharing modes supported for the device, 
     * dedicated and or shared and the system states where the addition or 
     * removal of the Resource Type is allowed. 
     */
    public AllocationCapabilities(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ResourceType. 
     */

    public enum ResourceType{
    OTHER,
    COMPUTER_SYSTEM,
    PROCESSOR,
    MEMORY,
    IDE_CONTROLLER,
    PARALLEL_SCSI_HBA,
    FC_HBA,
    ISCSI_HBA,
    IB_HCA,
    ETHERNET_ADAPTER,
    OTHER_NETWORK_ADAPTER,
    I_O_SLOT,
    I_O_DEVICE,
    FLOPPY_DRIVE,
    CD_DRIVE,
    DVD_DRIVE,
    DISK_DRIVE,
    TAPE_DRIVE,
    STORAGE_EXTENT,
    OTHER_STORAGE_DEVICE,
    SERIAL_PORT,
    PARALLEL_PORT,
    USB_CONTROLLER,
    GRAPHICS_CONTROLLER,
    IEEE_1394_CONTROLLER,
    PARTITIONABLE_UNIT,
    BASE_PARTITIONABLE_UNIT,
    POWER,
    COOLING_CAPACITY,
    ETHERNET_SWITCH_PORT,
    LOGICAL_DISK,
    STORAGE_VOLUME,
    ETHERNET_CONNECTION,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }
    private ResourceType resourceType;
    /**
     * This method returns the AllocationCapabilities.ResourceType property 
     * value. This property is described as follows: 
     * 
     * The type of resource this allocation setting represents.
     * 
     * @return	int	current ResourceType property value
     * @exception	Exception	
     */
    public ResourceType getResourceType(){

    return this.resourceType;
    } // getResourceType

    /**
     * This method sets the AllocationCapabilities.ResourceType property 
     * value. This property is described as follows: 
     * 
     * The type of resource this allocation setting represents.
     * 
     * @param	int	new ResourceType property value
     * @exception	Exception	
     */
    public void setResourceType(ResourceType resourceType){

    this.resourceType = resourceType;
    } // setResourceType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherResourceType. 
     */
    private String otherResourceType;
    /**
     * This method returns the AllocationCapabilities.otherResourceType 
     * property value. This property is described as follows: 
     * 
     * A string that describes the resource type when a well defined value is 
     * not available and ResourceType has the value "Other". 
     * 
     * @return	String	current otherResourceType property value
     * @exception	Exception	
     */
    public String getotherResourceType(){

    return this.otherResourceType;
    } // getotherResourceType

    /**
     * This method sets the AllocationCapabilities.otherResourceType property 
     * value. This property is described as follows: 
     * 
     * A string that describes the resource type when a well defined value is 
     * not available and ResourceType has the value "Other". 
     * 
     * @param	String	new otherResourceType property value
     * @exception	Exception	
     */
    public void setotherResourceType(String otherResourceType) {

    this.otherResourceType = otherResourceType;
    } // setotherResourceType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ResourceSubType. 
     */
    private String resourceSubType;
    /**
     * This method returns the AllocationCapabilities.resourceSubType property 
     * value. This property is described as follows: 
     * 
     * A string describing an implementation specific sub-type for this 
     * resource. For example, this may be used to distinguish different 
     * models of the same resource type. 
     * 
     * @return	String	current resourceSubType property value
     * @exception	Exception	
     */
    public String getresourceSubType(){

    return this.resourceSubType;
    } // getresourceSubType

    /**
     * This method sets the AllocationCapabilities.resourceSubType property 
     * value. This property is described as follows: 
     * 
     * A string describing an implementation specific sub-type for this 
     * resource. For example, this may be used to distinguish different 
     * models of the same resource type. 
     * 
     * @param	String	new resourceSubType property value
     * @exception	Exception	
     */
    public void setresourceSubType(String resourceSubType) {

    this.resourceSubType = resourceSubType;
    } // setresourceSubType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RequestTypesSupported. 
     */

    public enum RequestTypesSupported{
    UNKNOWN,
    SPECIFIC,
    GENERAL,
    BOTH,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }
    private RequestTypesSupported requestTypesSupported;
    /**
     * This method returns the AllocationCapabilities.RequestTypesSupported 
     * property value. This property is described as follows: 
     * 
     * Indicates whether requesting a specific resource is supported 
     * "Specific" -- request can include a request for specific resource 
     * "General" -- request does not include specific resource "Both" -- both 
     * specific and general requests are supported. 
     * 
     * @return	int	current RequestTypesSupported property value
     * @exception	Exception	
     */
    public RequestTypesSupported getRequestTypesSupported(){

    return this.requestTypesSupported;
    } // getRequestTypesSupported

    /**
     * This method sets the AllocationCapabilities.RequestTypesSupported 
     * property value. This property is described as follows: 
     * 
     * Indicates whether requesting a specific resource is supported 
     * "Specific" -- request can include a request for specific resource 
     * "General" -- request does not include specific resource "Both" -- both 
     * specific and general requests are supported. 
     * 
     * @param	int	new RequestTypesSupported property value
     * @exception	Exception	
     */
    public void setRequestTypesSupported(RequestTypesSupported 
	requestTypesSupported){

    this.requestTypesSupported = requestTypesSupported;
    } // setRequestTypesSupported


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SharingMode. 
     */

    public enum SharingMode{
    UNKNOWN,
    DEDICATED,
    SHARED,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }
    private SharingMode sharingMode;
    /**
     * This method returns the AllocationCapabilities.SharingMode property 
     * value. This property is described as follows: 
     * 
     * Indicates how access to underlying resource is granted: "Dedicated" -- 
     * exclusive access to underlying resource "Shared" -- shared use of 
     * underlying resource. Actual quantity is controlled by min, max size, 
     * weights, etc. 
     * 
     * @return	int	current SharingMode property value
     * @exception	Exception	
     */
    public SharingMode getSharingMode(){

    return this.sharingMode;
    } // getSharingMode

    /**
     * This method sets the AllocationCapabilities.SharingMode property value. 
     * This property is described as follows: 
     * 
     * Indicates how access to underlying resource is granted: "Dedicated" -- 
     * exclusive access to underlying resource "Shared" -- shared use of 
     * underlying resource. Actual quantity is controlled by min, max size, 
     * weights, etc. 
     * 
     * @param	int	new SharingMode property value
     * @exception	Exception	
     */
    public void setSharingMode(SharingMode sharingMode){

    this.sharingMode = sharingMode;
    } // setSharingMode


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SupportedAddStates. 
     */

    public enum SupportedAddStates{
    UNKNOWN,
    ENABLED,
    DISABLED,
    SHUTTING_DOWN,
    NOT_APPLICABLE,
    ENABLED_BUT_OFFLINE,
    IN_TEST,
    DEFERRED,
    QUIESCE,
    STARTING,
    PAUSED,
    SUSPENDED,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }
    private SupportedAddStates supportedAddStates;
    /**
     * This method returns the AllocationCapabilities.SupportedAddStates 
     * property value. This property is described as follows: 
     * 
     * Indicates the states that the System, to which the resource will be 
     * associated via SystemDevice, may be in when a new resource is created. 
     * 
     * @return	int	current SupportedAddStates property value
     * @exception	Exception	
     */
    public SupportedAddStates getSupportedAddStates(){

    return this.supportedAddStates;
    } // getSupportedAddStates

    /**
     * This method sets the AllocationCapabilities.SupportedAddStates property 
     * value. This property is described as follows: 
     * 
     * Indicates the states that the System, to which the resource will be 
     * associated via SystemDevice, may be in when a new resource is created. 
     * 
     * @param	int	new SupportedAddStates property value
     * @exception	Exception	
     */
    public void setSupportedAddStates(SupportedAddStates 
	supportedAddStates){

    this.supportedAddStates = supportedAddStates;
    } // setSupportedAddStates


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SupportedRemoveStates. 
     */

    public enum SupportedRemoveStates{
    UNKNOWN,
    ENABLED,
    DISABLED,
    SHUTTING_DOWN,
    NOT_APPLICABLE,
    ENABLED_BUT_OFFLINE,
    IN_TEST,
    DEFERRED,
    QUIESCE,
    STARTING,
    PAUSED,
    SUSPENDED,
    DMTF_RESERVED,
    VENDOR_RESERVED
    }
    private SupportedRemoveStates supportedRemoveStates;
    /**
     * This method returns the AllocationCapabilities.SupportedRemoveStates 
     * property value. This property is described as follows: 
     * 
     * Indicates the states that the System, to which the resource is 
     * associated via SystemDevice, may be in when a the resource is removed 
     * . 
     * 
     * @return	int	current SupportedRemoveStates property value
     * @exception	Exception	
     */
    public SupportedRemoveStates getSupportedRemoveStates(){

    return this.supportedRemoveStates;
    } // getSupportedRemoveStates

    /**
     * This method sets the AllocationCapabilities.SupportedRemoveStates 
     * property value. This property is described as follows: 
     * 
     * Indicates the states that the System, to which the resource is 
     * associated via SystemDevice, may be in when a the resource is removed 
     * . 
     * 
     * @param	int	new SupportedRemoveStates property value
     * @exception	Exception	
     */
    public void setSupportedRemoveStates(SupportedRemoveStates 
	supportedRemoveStates){

    this.supportedRemoveStates = supportedRemoveStates;
    } // setSupportedRemoveStates



} // Class AllocationCapabilities
