/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 15:29:20 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class StorageAllocationSettingData as well as methods 
 * comparable to the invokeMethods defined for this class. This Class 
 * implements the StorageAllocationSettingDataBean Interface. The CIM class 
 * StorageAllocationSettingData is described as follows: 
 * 
 * The CIM_StorageAllocationSettingData class represents settings specifically 
 * related to the allocation of virtual storage. 
 */
public class StorageAllocationSettingData extends 
    ResourceAllocationSettingData implements Serializable {

    /**
     * This constructor creates a StorageAllocationSettingDataBeanImpl Class 
     * which implements the StorageAllocationSettingDataBean Interface, and 
     * encapsulates the CIM class StorageAllocationSettingData in a Java 
     * Bean. The CIM class StorageAllocationSettingData is described as 
     * follows: 
     * 
     * The CIM_StorageAllocationSettingData class represents settings 
     * specifically related to the allocation of virtual storage. 
     */
    public StorageAllocationSettingData(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property VirtualResourceBlockSize. 
     */
    private long virtualResourceBlockSize;
    /**
     * This method returns the 
     * StorageAllocationSettingData.VirtualResourceBlockSize property value. 
     * This property is described as follows: 
     * 
     * Size in bytes of the blocks that are presented to the consumer as the 
     * result of this storage resource allocation or storage resource 
     * allocation request. If the block size is variable, then the maximum 
     * block size in bytes should be specified. If the block size is unknown 
     * or if a block concept does not apply, then the value 1 shall be used. 
     * NOTE: The use of 1 (and not 0) to indicate that the blocksize is 
     * unknown still allows the use of the VirtualQuantity property to convey 
     * the size in blocks of size 1). NOTE: This property is a copy of the 
     * CIM_StorageExtent.BlockSize property. See the description of the 
     * CIM_StorageExtent.BlockSize property for details. 
     * 
     * @return	long	current VirtualResourceBlockSize property 
     * value 
     * @exception	Exception	
     */
    public long getVirtualResourceBlockSize(){

    return this.virtualResourceBlockSize;
    } // getVirtualResourceBlockSize

    /**
     * This method sets the 
     * StorageAllocationSettingData.VirtualResourceBlockSize property value. 
     * This property is described as follows: 
     * 
     * Size in bytes of the blocks that are presented to the consumer as the 
     * result of this storage resource allocation or storage resource 
     * allocation request. If the block size is variable, then the maximum 
     * block size in bytes should be specified. If the block size is unknown 
     * or if a block concept does not apply, then the value 1 shall be used. 
     * NOTE: The use of 1 (and not 0) to indicate that the blocksize is 
     * unknown still allows the use of the VirtualQuantity property to convey 
     * the size in blocks of size 1). NOTE: This property is a copy of the 
     * CIM_StorageExtent.BlockSize property. See the description of the 
     * CIM_StorageExtent.BlockSize property for details. 
     * 
     * @param	long	new VirtualResourceBlockSize property value
     * @exception	Exception	
     */
    public void setVirtualResourceBlockSize(long virtualResourceBlockSize) {

    this.virtualResourceBlockSize = virtualResourceBlockSize;
    } // setVirtualResourceBlockSize


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property VirtualQuantity. 
     */
    private long virtualQuantity;
    /**
     * This method returns the StorageAllocationSettingData.VirtualQuantity 
     * property value. This property is described as follows: 
     * 
     * Number of blocks that are presented to the consumer. The blocksize is 
     * specified by the value of the VirtualResourceBlockSize property. 
     * 
     * @return	long	current VirtualQuantity property value
     * @exception	Exception	
     */
    public long getVirtualQuantity(){

    return (long)virtualQuantity;
    } // getVirtualQuantity

    /**
     * This method sets the StorageAllocationSettingData.VirtualQuantity 
     * property value. This property is described as follows: 
     * 
     * Number of blocks that are presented to the consumer. The blocksize is 
     * specified by the value of the VirtualResourceBlockSize property. 
     * 
     * @param	long	new VirtualQuantity property value
     * @exception	Exception	
     */
    public void setVirtualQuantity(long virtualQuantity) {

    this.virtualQuantity = virtualQuantity;
    } // setVirtualQuantity


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property VirtualQuantityUnits. 
     */
    private String virtualQuantityUnits;
    /**
     * This method returns the 
     * StorageAllocationSettingData.VirtualQuantityUnits property value. This 
     * property is described as follows: 
     * 
     * This property specifies the units used by the VirtualQuantity property. 
     * The value shall match "count(fixed size block)" | "byte". The default 
     * value "count(fixed size block)" assumes that the implementation knows 
     * a fixed block size and conveys the block size through the value of the 
     * VirtualResourceBlockSize property. However, if the 
     * VirtualResourceBlockSize property has a value "1", this indicates an 
     * unknown or variable block size; in this case the value of the 
     * VirtualQuantityUnit property should be set to "byte", such that the 
     * value of the VirtualQuantity property is measured directly in byte. 
     * NOTE: The IsPUnit qualifier already formally restricts the value of 
     * this property to be a unit as specified in DMTF DSP0004:2.5.0, Annex 
     * C; in addition, the normative text in the description of this property 
     * above further constrains the value to match "byte" | 
     * "count(fixed size block)". 
     * 
     * @return	String	current VirtualQuantityUnits property 
     * value 
     * @exception	Exception	
     */
    public String getVirtualQuantityUnits(){

    return (String)virtualQuantityUnits;
    } // getVirtualQuantityUnits

    /**
     * This method sets the StorageAllocationSettingData.VirtualQuantityUnits 
     * property value. This property is described as follows: 
     * 
     * This property specifies the units used by the VirtualQuantity property. 
     * The value shall match "count(fixed size block)" | "byte". The default 
     * value "count(fixed size block)" assumes that the implementation knows 
     * a fixed block size and conveys the block size through the value of the 
     * VirtualResourceBlockSize property. However, if the 
     * VirtualResourceBlockSize property has a value "1", this indicates an 
     * unknown or variable block size; in this case the value of the 
     * VirtualQuantityUnit property should be set to "byte", such that the 
     * value of the VirtualQuantity property is measured directly in byte. 
     * NOTE: The IsPUnit qualifier already formally restricts the value of 
     * this property to be a unit as specified in DMTF DSP0004:2.5.0, Annex 
     * C; in addition, the normative text in the description of this property 
     * above further constrains the value to match "byte" | 
     * "count(fixed size block)". 
     * 
     * @param	String	new VirtualQuantityUnits property value
     * @exception	Exception	
     */
    public void setVirtualQuantityUnits(String virtualQuantityUnits) {

    this.virtualQuantityUnits = virtualQuantityUnits;
    } // setVirtualQuantityUnits


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Access. 
     */

    public enum Access{
    UNKNOWN,
    READABLE,
    WRITEABLE,
    READ_WRITE_SUPPORTED,
    DMTF_RESERVED
    }
 public Access access;
    /**
     * This method returns the StorageAllocationSettingData.Access property 
     * value. This property is described as follows: 
     * 
     * Access describes whether the allocated storage extent is 1 (readable), 
     * 2 (writeable), or 3 (both). NOTE: This property is a copy of the 
     * CIM_StorageExtent.Access property, except deprecated values. See the 
     * description of the CIM_StorageExtent.Access property for details. 
     * 
     * @return	short	current Access property value
     * @exception	Exception	
     */
    public Access getAccess(){

    return this.access;
    } // getAccess

    /**
     * This method sets the StorageAllocationSettingData.Access property 
     * value. This property is described as follows: 
     * 
     * Access describes whether the allocated storage extent is 1 (readable), 
     * 2 (writeable), or 3 (both). NOTE: This property is a copy of the 
     * CIM_StorageExtent.Access property, except deprecated values. See the 
     * description of the CIM_StorageExtent.Access property for details. 
     * 
     * @param	short	new Access property value
     * @exception	Exception	
     */
    public void setAccess(Access access){

    this.access = access;
    } // setAccess


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HostResourceBlockSize. 
     */
    private long hostResourceBlockSize;
    /**
     * This method returns the 
     * StorageAllocationSettingData.HostResourceBlockSize property value. 
     * This property is described as follows: 
     * 
     * Size in bytes of the blocks that are allocated at the host as the 
     * result of this storage resource allocation or storage resource 
     * allocation request. If the block size is variable, then the maximum 
     * block size in bytes should be specified. If the block size is unknown 
     * or if a block concept does not apply, then the value 1 shall be used. 
     * NOTE: This property is a copy of the CIM_StorageExtent.BlockSize 
     * property. See the description of the CIM_StorageExtent.BlockSize 
     * property for details. 
     * 
     * @return	long	current HostResourceBlockSize property value
     * @exception	Exception	
     */
    public long getHostResourceBlockSize(){

    return this.hostResourceBlockSize;
    } // getHostResourceBlockSize

    /**
     * This method sets the StorageAllocationSettingData.HostResourceBlockSize 
     * property value. This property is described as follows: 
     * 
     * Size in bytes of the blocks that are allocated at the host as the 
     * result of this storage resource allocation or storage resource 
     * allocation request. If the block size is variable, then the maximum 
     * block size in bytes should be specified. If the block size is unknown 
     * or if a block concept does not apply, then the value 1 shall be used. 
     * NOTE: This property is a copy of the CIM_StorageExtent.BlockSize 
     * property. See the description of the CIM_StorageExtent.BlockSize 
     * property for details. 
     * 
     * @param	long	new HostResourceBlockSize property value
     * @exception	Exception	
     */
    public void setHostResourceBlockSize(long hostResourceBlockSize) {

    this.hostResourceBlockSize = hostResourceBlockSize;
    } // setHostResourceBlockSize


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Reservation. 
     */
    private long reservation;
    /**
     * This method returns the StorageAllocationSettingData.Reservation 
     * property value. This property is described as follows: 
     * 
     * The amount of blocks that are guaranteed to be available for this 
     * storage resource allocation at the host. The blocksize is specified by 
     * the value of the HostResourceBlockSize property. 
     * 
     * @return	long	current Reservation property value
     * @exception	Exception	
     */
    public long getReservation(){

    return (long)reservation;
    } // getReservation

    /**
     * This method sets the StorageAllocationSettingData.Reservation property 
     * value. This property is described as follows: 
     * 
     * The amount of blocks that are guaranteed to be available for this 
     * storage resource allocation at the host. The blocksize is specified by 
     * the value of the HostResourceBlockSize property. 
     * 
     * @param	long	new Reservation property value
     * @exception	Exception	
     */
    public void setReservation(long reservation) {

    this.reservation = reservation;
    } // setReservation


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Limit. 
     */
    private long limit;
    /**
     * This method returns the StorageAllocationSettingData.Limit property 
     * value. This property is described as follows: 
     * 
     * The maximum amount of blocks that will be granted for this storage 
     * resource allocation at the host. The blocksize is specified by the 
     * value of the HostResourceBlockSize property.Usually the value this 
     * property would reflect a maximum size for the allocated host extent 
     * that matches the size of the virtual storage extent presented to the 
     * consumer. A value less than that would indicate a situation where a 
     * sparsely populated virtual storage extent is expected, where the fill 
     * rate is limited by the value of the Limit property. 
     * 
     * @return	long	current Limit property value
     * @exception	Exception	
     */
    public long getLimit(){

    return (long)limit;
    } // getLimit

    /**
     * This method sets the StorageAllocationSettingData.Limit property value. 
     * This property is described as follows: 
     * 
     * The maximum amount of blocks that will be granted for this storage 
     * resource allocation at the host. The blocksize is specified by the 
     * value of the HostResourceBlockSize property.Usually the value this 
     * property would reflect a maximum size for the allocated host extent 
     * that matches the size of the virtual storage extent presented to the 
     * consumer. A value less than that would indicate a situation where a 
     * sparsely populated virtual storage extent is expected, where the fill 
     * rate is limited by the value of the Limit property. 
     * 
     * @param	long	new Limit property value
     * @exception	Exception	
     */
    public void setLimit(long limit) {

    this.limit = limit;
    } // setLimit


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HostExtentStartingAddress. 
     */
    private long hostExtentStartingAddress;
    /**
     * This method returns the 
     * StorageAllocationSettingData.HostExtentStartingAddress property value. 
     * This property is described as follows: 
     * 
     * The HostExtentStartingAddress property identifies the starting address 
     * on the host storage extent identified by the value of the 
     * HostExtentName property that is used for the allocation of the virtual 
     * storage extent. A value of NULL indicates that there is no direct 
     * mapping of the virtual storage extent onto the referenced host storage 
     * extent. NOTE: This property is a copy of the 
     * CIM_BasedOn.StartingAddess property. See the description of 
     * CIM_BasedOn association for details. 
     * 
     * @return	long	current HostExtentStartingAddress property 
     * value 
     * @exception	Exception	
     */
    public long getHostExtentStartingAddress(){

    return this.hostExtentStartingAddress;
    } // getHostExtentStartingAddress

    /**
     * This method sets the 
     * StorageAllocationSettingData.HostExtentStartingAddress property value. 
     * This property is described as follows: 
     * 
     * The HostExtentStartingAddress property identifies the starting address 
     * on the host storage extent identified by the value of the 
     * HostExtentName property that is used for the allocation of the virtual 
     * storage extent. A value of NULL indicates that there is no direct 
     * mapping of the virtual storage extent onto the referenced host storage 
     * extent. NOTE: This property is a copy of the 
     * CIM_BasedOn.StartingAddess property. See the description of 
     * CIM_BasedOn association for details. 
     * 
     * @param	long	new HostExtentStartingAddress property value
     * @exception	Exception	
     */
    public void setHostExtentStartingAddress(long hostExtentStartingAddress) 
	{

    this.hostExtentStartingAddress = hostExtentStartingAddress;
    } // setHostExtentStartingAddress


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HostExtentName. 
     */
    private String hostExtentName;
    /**
     * This method returns the StorageAllocationSettingData.HostExtentName 
     * property value. This property is described as follows: 
     * 
     * A unique identifier for the host extent. The identified host extent is 
     * used for the storage resource allocation. NOTE: This property is a 
     * copy of the CIM_StorageExtent.Name property. See the description of 
     * CIM_StorageExtent.Name property for details. 
     * 
     * @return	String	current HostExtentName property value
     * @exception	Exception	
     */
    public String getHostExtentName(){

    return this.hostExtentName;
    } // getHostExtentName

    /**
     * This method sets the StorageAllocationSettingData.HostExtentName 
     * property value. This property is described as follows: 
     * 
     * A unique identifier for the host extent. The identified host extent is 
     * used for the storage resource allocation. NOTE: This property is a 
     * copy of the CIM_StorageExtent.Name property. See the description of 
     * CIM_StorageExtent.Name property for details. 
     * 
     * @param	String	new HostExtentName property value
     * @exception	Exception	
     */
    public void setHostExtentName(String hostExtentName) {

    this.hostExtentName = hostExtentName;
    } // setHostExtentName


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HostExtentNameFormat. 
     */

    public enum HostExtentNameFormat{
    UNKNOWN,
    OTHER,
    SNVM,
    NAA,
    EUI64,
    T10VID,
    OS_DEVICE_NAME,
    DMTF_RESERVED
    }
 public HostExtentNameFormat hostExtentNameFormat;
    /**
     * This method returns the 
     * StorageAllocationSettingData.HostExtentNameFormat property value. This 
     * property is described as follows: 
     * 
     * The HostExtentNameFormat property identifies the format that is used 
     * for the value of the HostExtentName property. NOTE: This property is a 
     * copy of the CIM_StorageExtent.NameFormat property, excluding 
     * deprecated values. See the description of CIM_StorageExtent.NameFormat 
     * class for details. 7 = Serial Number/Vendor/Model (SNVM) SNVM is 3 
     * strings representing the vendor name, product name within the vendor 
     * namespace, and the serial number within the model namespace. Strings 
     * are delimited with a '+'. Spaces may be included and are significant. 
     * The serial number is the text representation of the serial number in 
     * hexadecimal upper case. This represents the vendor and model ID from 
     * SCSI Inquiry data; the vendor field MUST be 8 characters wide and the 
     * product field MUST be 16 characters wide. For example, 'ACME____+SUPER 
     * DISK______+124437458' (_ is a space character) 9 = NAA as a generic 
     * format. See 
     * http://standards.ieee.org/regauth/oui/tutorials/fibrecomp_id.html. 
     * Formatted as 16 or 32 unseparated uppercase hex characters (2 per 
     * binary byte). For example '21000020372D3C73' 10 = EUI as a generic 
     * format (EUI64) See 
     * http://standards.ieee.org/regauth/oui/tutorials/EUI64.html. Formatted 
     * as 16 unseparated uppercase hex characters (2 per binary byte) 11 = 
     * T10 vendor identifier format as returned by SCSI Inquiry VPD page 83, 
     * identifier type 1. See T10 SPC-3 specification. This is the 8-byte 
     * ASCII vendor ID from the T10 registry followed by a vendor specific 
     * ASCII identifier; spaces are permitted. For non SCSI volumes, 'SNVM' 
     * may be the most appropriate choice. 12 = OS Device Name (for 
     * LogicalDisks). See LogicalDisk Name description for details. 
     * 
     * @return	short	current HostExtentNameFormat property value
     * @exception	Exception	
     */
    public HostExtentNameFormat getHostExtentNameFormat(){

    return this.hostExtentNameFormat;
    } // getHostExtentNameFormat

    /**
     * This method sets the StorageAllocationSettingData.HostExtentNameFormat 
     * property value. This property is described as follows: 
     * 
     * The HostExtentNameFormat property identifies the format that is used 
     * for the value of the HostExtentName property. NOTE: This property is a 
     * copy of the CIM_StorageExtent.NameFormat property, excluding 
     * deprecated values. See the description of CIM_StorageExtent.NameFormat 
     * class for details. 7 = Serial Number/Vendor/Model (SNVM) SNVM is 3 
     * strings representing the vendor name, product name within the vendor 
     * namespace, and the serial number within the model namespace. Strings 
     * are delimited with a '+'. Spaces may be included and are significant. 
     * The serial number is the text representation of the serial number in 
     * hexadecimal upper case. This represents the vendor and model ID from 
     * SCSI Inquiry data; the vendor field MUST be 8 characters wide and the 
     * product field MUST be 16 characters wide. For example, 'ACME____+SUPER 
     * DISK______+124437458' (_ is a space character) 9 = NAA as a generic 
     * format. See 
     * http://standards.ieee.org/regauth/oui/tutorials/fibrecomp_id.html. 
     * Formatted as 16 or 32 unseparated uppercase hex characters (2 per 
     * binary byte). For example '21000020372D3C73' 10 = EUI as a generic 
     * format (EUI64) See 
     * http://standards.ieee.org/regauth/oui/tutorials/EUI64.html. Formatted 
     * as 16 unseparated uppercase hex characters (2 per binary byte) 11 = 
     * T10 vendor identifier format as returned by SCSI Inquiry VPD page 83, 
     * identifier type 1. See T10 SPC-3 specification. This is the 8-byte 
     * ASCII vendor ID from the T10 registry followed by a vendor specific 
     * ASCII identifier; spaces are permitted. For non SCSI volumes, 'SNVM' 
     * may be the most appropriate choice. 12 = OS Device Name (for 
     * LogicalDisks). See LogicalDisk Name description for details. 
     * 
     * @param	short	new HostExtentNameFormat property value
     * @exception	Exception	
     */
    public void setHostExtentNameFormat(HostExtentNameFormat 
	hostExtentNameFormat){

    this.hostExtentNameFormat = hostExtentNameFormat;
    } // setHostExtentNameFormat


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherHostExtentNameFormat. 
     */
    private String otherHostExtentNameFormat;
    /**
     * This method returns the 
     * StorageAllocationSettingData.OtherHostExtentNameFormat property value. 
     * This property is described as follows: 
     * 
     * A string describing the format of the HostExtentName property if the 
     * value of the HostExtentNameFormat property is 1 (Other). 
     * 
     * @return	String	current OtherHostExtentNameFormat property 
     * value 
     * @exception	Exception	
     */
    public String getOtherHostExtentNameFormat(){

    return this.otherHostExtentNameFormat;
    } // getOtherHostExtentNameFormat

    /**
     * This method sets the 
     * StorageAllocationSettingData.OtherHostExtentNameFormat property value. 
     * This property is described as follows: 
     * 
     * A string describing the format of the HostExtentName property if the 
     * value of the HostExtentNameFormat property is 1 (Other). 
     * 
     * @param	String	new OtherHostExtentNameFormat property 
     * value 
     * @exception	Exception	
     */
    public void setOtherHostExtentNameFormat(String otherHostExtentNameFormat) 
	{

    this.otherHostExtentNameFormat = otherHostExtentNameFormat;
    } // setOtherHostExtentNameFormat


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property HostExtentNameNamespace. 
     */

    public enum HostExtentNameNamespace{
    UNKNOWN,
    OTHER,
    VPD83TYPE3,
    VPD83TYPE2,
    VPD83TYPE1,
    VPD80,
    NODEWWN,
    SNVM,
    OS_DEVICE_NAMESPACE,
    DMTF_RESERVED
    }
 public HostExtentNameNamespace hostExtentNameNamespace;
    /**
     * This method returns the 
     * StorageAllocationSettingData.HostExtentNameNamespace property value. 
     * This property is described as follows: 
     * 
     * If the host extent is a SCSI volume, then the preferred source for SCSI 
     * volume names is SCSI VPD Page 83 responses. NOTE: This property is a 
     * copy of the CIM_StorageExtent.NameNamespace property. See the 
     * description of CIM_StorageExtent.NameNamespace class for details. Page 
     * 83 returns a list of identifiers for various device elements. The 
     * metadata for each identifier includes an Association field, 
     * identifiers with association of 0 apply to volumes. Page 83 supports 
     * several namespaces specified in the Type field in the identifier 
     * metadata. See SCSI SPC-3 specification. 2 = VPD Page 83, Type 3 NAA 
     * (NameFormat SHOULD be NAA) 3 = VPD Page 83, Type 2 EUI64 (NameFormat 
     * EUI) 4 = VPD Page 83, Type 1 T10 Vendor Identification (NameFormat 
     * T10) Less preferred volume namespaces from other interfaces: 5 = VPD 
     * page 80, Serial number (NameFormat SHOULD be Other) 6 = FC NodeWWN 
     * (NameFormat SHOULD be NAA or EUI) 7 = Serial Number/Vendor/Model 
     * (NameFormat SHOULD be SNVM) cThe preferred namespace for LogigicalDisk 
     * names is platform specific device namespace; see LogigicalDIsk 
     * Description. 8 = OS Device Namespace. 
     * 
     * @return	short	current HostExtentNameNamespace property 
     * value 
     * @exception	Exception	
     */
    public HostExtentNameNamespace getHostExtentNameNamespace(){

    return this.hostExtentNameNamespace;
    } // getHostExtentNameNamespace

    /**
     * This method sets the 
     * StorageAllocationSettingData.HostExtentNameNamespace property value. 
     * This property is described as follows: 
     * 
     * If the host extent is a SCSI volume, then the preferred source for SCSI 
     * volume names is SCSI VPD Page 83 responses. NOTE: This property is a 
     * copy of the CIM_StorageExtent.NameNamespace property. See the 
     * description of CIM_StorageExtent.NameNamespace class for details. Page 
     * 83 returns a list of identifiers for various device elements. The 
     * metadata for each identifier includes an Association field, 
     * identifiers with association of 0 apply to volumes. Page 83 supports 
     * several namespaces specified in the Type field in the identifier 
     * metadata. See SCSI SPC-3 specification. 2 = VPD Page 83, Type 3 NAA 
     * (NameFormat SHOULD be NAA) 3 = VPD Page 83, Type 2 EUI64 (NameFormat 
     * EUI) 4 = VPD Page 83, Type 1 T10 Vendor Identification (NameFormat 
     * T10) Less preferred volume namespaces from other interfaces: 5 = VPD 
     * page 80, Serial number (NameFormat SHOULD be Other) 6 = FC NodeWWN 
     * (NameFormat SHOULD be NAA or EUI) 7 = Serial Number/Vendor/Model 
     * (NameFormat SHOULD be SNVM) cThe preferred namespace for LogigicalDisk 
     * names is platform specific device namespace; see LogigicalDIsk 
     * Description. 8 = OS Device Namespace. 
     * 
     * @param	short	new HostExtentNameNamespace property value
     * @exception	Exception	
     */
    public void setHostExtentNameNamespace(HostExtentNameNamespace 
	hostExtentNameNamespace){

    this.hostExtentNameNamespace = hostExtentNameNamespace;
    } // setHostExtentNameNamespace


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherHostExtentNameNamespace. 
     */
    private String otherHostExtentNameNamespace;
    /**
     * This method returns the 
     * StorageAllocationSettingData.OtherHostExtentNameNamespace property 
     * value. This property is described as follows: 
     * 
     * A string describing the namespace of the HostExtentName property if the 
     * value of the HostExtentNameNamespace matches 1 (Other). 
     * 
     * @return	String	current OtherHostExtentNameNamespace 
     * property value 
     * @exception	Exception	
     */
    public String getOtherHostExtentNameNamespace(){

    return this.otherHostExtentNameNamespace;
    } // getOtherHostExtentNameNamespace

    /**
     * This method sets the 
     * StorageAllocationSettingData.OtherHostExtentNameNamespace property 
     * value. This property is described as follows: 
     * 
     * A string describing the namespace of the HostExtentName property if the 
     * value of the HostExtentNameNamespace matches 1 (Other). 
     * 
     * @param	String	new OtherHostExtentNameNamespace property 
     * value 
     * @exception	Exception	
     */
    public void setOtherHostExtentNameNamespace(String 
	otherHostExtentNameNamespace) {

    this.otherHostExtentNameNamespace = otherHostExtentNameNamespace;
    } // setOtherHostExtentNameNamespace



} // Class StorageAllocationSettingData
