/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class IPCOMPTransform as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * IPCOMPTransformBean Interface. The CIM class IPCOMPTransform is described 
 * as follows: 
 * 
 * The IPCOMPTransform specifies the IP compression algorithm to use for 
 * payload of the Security Association. 
 */
    @Entity
public class IPCOMPTransform extends SATransform implements Serializable {

    /**
     * This constructor creates a IPCOMPTransformBeanImpl Class which 
     * implements the IPCOMPTransformBean Interface, and encapsulates the CIM 
     * class IPCOMPTransform in a Java Bean. The CIM class IPCOMPTransform is 
     * described as follows: 
     * 
     * The IPCOMPTransform specifies the IP compression algorithm to use for 
     * payload of the Security Association. 
     */
    public IPCOMPTransform(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Algorithm. 
     */

    public enum Algorithm{
    OTHER,
    VENDOR_ALGORITHM_OUI,
    DEFLATE,
    LZS
    }
    private Algorithm algorithm;
    /**
     * This method returns the IPCOMPTransform.Algorithm property value. This 
     * property is described as follows: 
     * 
     * The Algorithm is an enumeration that designates the IPCOMP compression 
     * algorithm to use. Its values are generated from RFC2407, Section 
     * 4.4.5. Note that the values are modified from the RFC, since 'Other' 
     * must be taken into account. 
     * 
     * @return	int	current Algorithm property value
     * @exception	Exception	
     */
    public Algorithm getAlgorithm(){

    return this.algorithm;
    } // getAlgorithm

    /**
     * This method sets the IPCOMPTransform.Algorithm property value. This 
     * property is described as follows: 
     * 
     * The Algorithm is an enumeration that designates the IPCOMP compression 
     * algorithm to use. Its values are generated from RFC2407, Section 
     * 4.4.5. Note that the values are modified from the RFC, since 'Other' 
     * must be taken into account. 
     * 
     * @param	int	new Algorithm property value
     * @exception	Exception	
     */
    public void setAlgorithm(Algorithm algorithm){

    this.algorithm = algorithm;
    } // setAlgorithm


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherAlgorithm. 
     */
    private String otherAlgorithm;
    /**
     * This method returns the IPCOMPTransform.otherAlgorithm property value. 
     * This property is described as follows: 
     * 
     * Description of the compression algorithm when the value 1 ("Other") is 
     * specified for the property, Algorithm. 
     * 
     * @return	String	current otherAlgorithm property value
     * @exception	Exception	
     */
    public String getotherAlgorithm(){

    return this.otherAlgorithm;
    } // getotherAlgorithm

    /**
     * This method sets the IPCOMPTransform.otherAlgorithm property value. 
     * This property is described as follows: 
     * 
     * Description of the compression algorithm when the value 1 ("Other") is 
     * specified for the property, Algorithm. 
     * 
     * @param	String	new otherAlgorithm property value
     * @exception	Exception	
     */
    public void setotherAlgorithm(String otherAlgorithm) {

    this.otherAlgorithm = otherAlgorithm;
    } // setotherAlgorithm


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PrivateAlgorithm. 
     */
    private long privateAlgorithm;
    /**
     * This method returns the IPCOMPTransform.privateAlgorithm property 
     * value. This property is described as follows: 
     * 
     * A private compression algorithm, used when the Algorithm property is 
     * set to 2, "Vendor Algorithm/OUI". 
     * 
     * @return	long	current privateAlgorithm property value
     * @exception	Exception	
     */
    public long getprivateAlgorithm(){

    return this.privateAlgorithm;
    } // getprivateAlgorithm

    /**
     * This method sets the IPCOMPTransform.privateAlgorithm property value. 
     * This property is described as follows: 
     * 
     * A private compression algorithm, used when the Algorithm property is 
     * set to 2, "Vendor Algorithm/OUI". 
     * 
     * @param	long	new privateAlgorithm property value
     * @exception	Exception	
     */
    public void setprivateAlgorithm(long privateAlgorithm) {

    this.privateAlgorithm = privateAlgorithm;
    } // setprivateAlgorithm


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DictionarySize. 
     */
    private int dictionarySize;
    /**
     * This method returns the IPCOMPTransform.dictionarySize property value. 
     * This property is described as follows: 
     * 
     * DictionarySize is an optional field that specifies the log2 maximum 
     * size of the dictionary for the compression algorithm. For dictionaries 
     * that have a fixed size, this value is ignored. 
     * 
     * @return	int	current dictionarySize property value
     * @exception	Exception	
     */
    public int getdictionarySize(){

    return this.dictionarySize;
    } // getdictionarySize

    /**
     * This method sets the IPCOMPTransform.dictionarySize property value. 
     * This property is described as follows: 
     * 
     * DictionarySize is an optional field that specifies the log2 maximum 
     * size of the dictionary for the compression algorithm. For dictionaries 
     * that have a fixed size, this value is ignored. 
     * 
     * @param	int	new dictionarySize property value
     * @exception	Exception	
     */
    public void setdictionarySize(int dictionarySize) {

    this.dictionarySize = dictionarySize;
    } // setdictionarySize



} // Class IPCOMPTransform
