/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 15:29:20 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class ServiceServiceDependency as well as methods comparable to 
 * the invokeMethods defined for this class. This Class implements the 
 * ServiceServiceDependencyBean Interface. The CIM class 
 * ServiceServiceDependency is described as follows: 
 * 
 * CIM_ServiceServiceDependency is an association between a Service and 
 * another Service, which indicates that the latter cooperates with the 
 * former, is required to be present, required to have completed, or must be 
 * absent for the former Service to provide its functionality. For example, 
 * Boot Services might be dependent upon underlying system initialization 
 * Services. In the case of the initialization Services, the Boot Service 
 * might be dependent on the completion of the init Services. When examining 
 * the ServiceServiceDependency class definition, note that its superclass 
 * ProvidesServiceToElement is deprecated. Unfortunately, 
 * ProvidesServiceToElement cannot be removed from the object hierarchy 
 * without a major Schema release. When or if a major release occurs, the 
 * ProvidesServiceToElement superclass will be removed, and 
 * ServiceServiceDependency will subclass from CIM_Dependency directly. 
 */
public class ServiceServiceDependency extends ProvidesServiceToElement 
    implements Serializable {

    /**
     * This constructor creates a ServiceServiceDependencyBeanImpl Class which 
     * implements the ServiceServiceDependencyBean Interface, and 
     * encapsulates the CIM class ServiceServiceDependency in a Java Bean. 
     * The CIM class ServiceServiceDependency is described as follows: 
     * 
     * CIM_ServiceServiceDependency is an association between a Service and 
     * another Service, which indicates that the latter cooperates with the 
     * former, is required to be present, required to have completed, or must 
     * be absent for the former Service to provide its functionality. For 
     * example, Boot Services might be dependent upon underlying system 
     * initialization Services. In the case of the initialization Services, 
     * the Boot Service might be dependent on the completion of the init 
     * Services. When examining the ServiceServiceDependency class 
     * definition, note that its superclass ProvidesServiceToElement is 
     * deprecated. Unfortunately, ProvidesServiceToElement cannot be removed 
     * from the object hierarchy without a major Schema release. When or if a 
     * major release occurs, the ProvidesServiceToElement superclass will be 
     * removed, and ServiceServiceDependency will subclass from 
     * CIM_Dependency directly. 
     */
    public ServiceServiceDependency(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Antecedent. 
     */
    private Service antecedent;
    /**
     * This method returns the ServiceServiceDependency.Antecedent property 
     * value. This property is described as follows: 
     * 
     * The required Service.
     * 
     * @return	CIM_Service	current Antecedent property value
     * @exception	Exception	
     */
    public Service getAntecedent(){

    return (Service)antecedent;
    } // getAntecedent

    /**
     * This method sets the ServiceServiceDependency.Antecedent property 
     * value. This property is described as follows: 
     * 
     * The required Service.
     * 
     * @param	CIM_Service	new Antecedent property value
     * @exception	Exception	
     */
    public void setAntecedent(Service antecedent) {

    this.antecedent = antecedent;
    } // setAntecedent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Dependent. 
     */
    private Service dependent;
    /**
     * This method returns the ServiceServiceDependency.Dependent property 
     * value. This property is described as follows: 
     * 
     * The Service that is dependent on an underlying Service.
     * 
     * @return	CIM_Service	current Dependent property value
     * @exception	Exception	
     */
    public Service getDependent(){

    return (Service)dependent;
    } // getDependent

    /**
     * This method sets the ServiceServiceDependency.Dependent property value. 
     * This property is described as follows: 
     * 
     * The Service that is dependent on an underlying Service.
     * 
     * @param	CIM_Service	new Dependent property value
     * @exception	Exception	
     */
    public void setDependent(Service dependent) {

    this.dependent = dependent;
    } // setDependent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property TypeOfDependency. 
     */

    public enum TypeOfDependency{
    UNKNOWN,
    OTHER,
    SERVICE_MUST_HAVE_COMPLETED,
    SERVICE_MUST_BE_STARTED,
    SERVICE_MUST_NOT_BE_STARTED,
    COOPERATE
    }
 public TypeOfDependency typeOfDependency;
    /**
     * This method returns the ServiceServiceDependency.TypeOfDependency 
     * property value. This property is described as follows: 
     * 
     * The nature of the Service-to-Service dependency. 2 - Antecedent Service 
     * shall have completed before Dependent service's functionality is 
     * available. 3 - Antecedent Service shall have started before Dependent 
     * service's functionality is available. 4 - Antecedent Service shall not 
     * be started in order for Dependent service's functionality to be 
     * available. 5 - The two Services cooperate and augment each other's 
     * function. There is no requirement implied by this value regarding the 
     * execution of the Antecedent service in order for the Dependent service 
     * to operate. 
     * 
     * @return	short	current TypeOfDependency property value
     * @exception	Exception	
     */
    public TypeOfDependency getTypeOfDependency(){

    return this.typeOfDependency;
    } // getTypeOfDependency

    /**
     * This method sets the ServiceServiceDependency.TypeOfDependency property 
     * value. This property is described as follows: 
     * 
     * The nature of the Service-to-Service dependency. 2 - Antecedent Service 
     * shall have completed before Dependent service's functionality is 
     * available. 3 - Antecedent Service shall have started before Dependent 
     * service's functionality is available. 4 - Antecedent Service shall not 
     * be started in order for Dependent service's functionality to be 
     * available. 5 - The two Services cooperate and augment each other's 
     * function. There is no requirement implied by this value regarding the 
     * execution of the Antecedent service in order for the Dependent service 
     * to operate. 
     * 
     * @param	short	new TypeOfDependency property value
     * @exception	Exception	
     */
    public void setTypeOfDependency(TypeOfDependency typeOfDependency){

    this.typeOfDependency = typeOfDependency;
    } // setTypeOfDependency


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RestartService. 
     */
    private boolean restartService;
    /**
     * This method returns the ServiceServiceDependency.RestartService 
     * property value. This property is described as follows: 
     * 
     * This property describes that the Antecedent Service must be restarted 
     * after the Dependent operation is complete. 
     * 
     * @return	boolean	current RestartService property value
     * @exception	Exception	
     */
    public boolean isRestartService(){

    return this.restartService;
    } // getRestartService

    /**
     * This method sets the ServiceServiceDependency.RestartService property 
     * value. This property is described as follows: 
     * 
     * This property describes that the Antecedent Service must be restarted 
     * after the Dependent operation is complete. 
     * 
     * @param	boolean	new RestartService property value
     * @exception	Exception	
     */
    public void setRestartService(boolean restartService) {

    this.restartService = restartService;
    } // setRestartService



} // Class ServiceServiceDependency
