/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 10:54:51 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class ESPTransform as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * ESPTransformBean Interface. The CIM class ESPTransform is described as 
 * follows: 
 * 
 * ESPTransform defines the parameters used for a phase 2 ESP (Encapsulating 
 * Security Protocol) Security Association. 
 */
public class ESPTransform extends SATransform implements Serializable {

    /**
     * This constructor creates a ESPTransformBeanImpl Class which implements 
     * the ESPTransformBean Interface, and encapsulates the CIM class 
     * ESPTransform in a Java Bean. The CIM class ESPTransform is described 
     * as follows: 
     * 
     * ESPTransform defines the parameters used for a phase 2 ESP 
     * (Encapsulating Security Protocol) Security Association. 
     */
    public ESPTransform(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property IntegrityTransformId. 
     */

    public enum IntegrityTransformId{
    OTHER,
    NONE,
    MD5,
    SHA_1,
    DES,
    KPDK,
    DMTF_IANA_RESERVED,
    VENDOR_RESERVED
    }IntegrityTransformId integrityTransformId;
    /**
     * This method returns the ESPTransform.IntegrityTransformId property 
     * value. This property is described as follows: 
     * 
     * IntegrityTransformId is an enumeration that specifies the ESP integrity 
     * algorithm to be used. The list of values is generated from the 
     * enumeration defined in RFC2407, Section 4.5. Note that the enumeration 
     * is different than the RFC list, since the values of Other and None are 
     * taken into account. Also, note that 2 ("None") is used when ESP is 
     * negotiated without authentication. 
     * 
     * @return	short	current IntegrityTransformId property value
     * @exception	Exception	
     */
    public IntegrityTransformId getIntegrityTransformId(){

    return this.integrityTransformId;
    } // getIntegrityTransformId

    /**
     * This method sets the ESPTransform.IntegrityTransformId property value. 
     * This property is described as follows: 
     * 
     * IntegrityTransformId is an enumeration that specifies the ESP integrity 
     * algorithm to be used. The list of values is generated from the 
     * enumeration defined in RFC2407, Section 4.5. Note that the enumeration 
     * is different than the RFC list, since the values of Other and None are 
     * taken into account. Also, note that 2 ("None") is used when ESP is 
     * negotiated without authentication. 
     * 
     * @param	short	new IntegrityTransformId property value
     * @exception	Exception	
     */
    public void setIntegrityTransformId(IntegrityTransformId 
	integrityTransformId){

    this.integrityTransformId = integrityTransformId;
    } // setIntegrityTransformId


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherIntegrityTransformId. 
     */
    private String otherIntegrityTransformId;
    /**
     * This method returns the ESPTransform.OtherIntegrityTransformId property 
     * value. This property is described as follows: 
     * 
     * Description of the integrity algorithm when the value 1 ("Other") is 
     * specified for the property, IntegrityTransformId. 
     * 
     * @return	String	current OtherIntegrityTransformId property 
     * value 
     * @exception	Exception	
     */
    public String getOtherIntegrityTransformId(){

    return this.otherIntegrityTransformId;
    } // getOtherIntegrityTransformId

    /**
     * This method sets the ESPTransform.OtherIntegrityTransformId property 
     * value. This property is described as follows: 
     * 
     * Description of the integrity algorithm when the value 1 ("Other") is 
     * specified for the property, IntegrityTransformId. 
     * 
     * @param	String	new OtherIntegrityTransformId property 
     * value 
     * @exception	Exception	
     */
    public void setOtherIntegrityTransformId(String otherIntegrityTransformId) 
	{

    this.otherIntegrityTransformId = otherIntegrityTransformId;
    } // setOtherIntegrityTransformId


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CipherTransformId. 
     */

    public enum CipherTransformId{
    OTHER,
    NONE,
    DES_IV64,
    DES,
    _3DES,
    RC5,
    IDEA,
    CAST,
    BLOWFISH,
    _3_IDEA,
    DES_IV32,
    RC4
    }CipherTransformId cipherTransformId;
    /**
     * This method returns the ESPTransform.CipherTransformId property value. 
     * This property is described as follows: 
     * 
     * CipherTransformId is an enumeration that specifies the ESP encrypion 
     * algorithm to be used. The list of values is defined in RFC2407, 
     * Section 4.4.4, where the RFC's NULL value maps to 2-"None". Note that 
     * the enumeration is different than the RFC list, since 'Other' is added 
     * to the enumeration. 
     * 
     * @return	short	current CipherTransformId property value
     * @exception	Exception	
     */
    public CipherTransformId getCipherTransformId(){

    return this.cipherTransformId;
    } // getCipherTransformId

    /**
     * This method sets the ESPTransform.CipherTransformId property value. 
     * This property is described as follows: 
     * 
     * CipherTransformId is an enumeration that specifies the ESP encrypion 
     * algorithm to be used. The list of values is defined in RFC2407, 
     * Section 4.4.4, where the RFC's NULL value maps to 2-"None". Note that 
     * the enumeration is different than the RFC list, since 'Other' is added 
     * to the enumeration. 
     * 
     * @param	short	new CipherTransformId property value
     * @exception	Exception	
     */
    public void setCipherTransformId(CipherTransformId cipherTransformId){

    this.cipherTransformId = cipherTransformId;
    } // setCipherTransformId


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherCipherTransformId. 
     */
    private String otherCipherTransformId;
    /**
     * This method returns the ESPTransform.OtherCipherTransformId property 
     * value. This property is described as follows: 
     * 
     * Description of the encryption algorithm when the value 1 ("Other") is 
     * specified for the property, CipherTransformId. 
     * 
     * @return	String	current OtherCipherTransformId property 
     * value 
     * @exception	Exception	
     */
    public String getOtherCipherTransformId(){

    return this.otherCipherTransformId;
    } // getOtherCipherTransformId

    /**
     * This method sets the ESPTransform.OtherCipherTransformId property 
     * value. This property is described as follows: 
     * 
     * Description of the encryption algorithm when the value 1 ("Other") is 
     * specified for the property, CipherTransformId. 
     * 
     * @param	String	new OtherCipherTransformId property value
     * @exception	Exception	
     */
    public void setOtherCipherTransformId(String otherCipherTransformId) {

    this.otherCipherTransformId = otherCipherTransformId;
    } // setOtherCipherTransformId


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CipherKeyLength. 
     */
    private short cipherKeyLength;
    /**
     * This method returns the ESPTransform.CipherKeyLength property value. 
     * This property is described as follows: 
     * 
     * CipherKeyLength specifies, in bits, the key length for the encryption 
     * algorithm. For algorithms with fixed key lengths, this value is 
     * ignored. 
     * 
     * @return	short	current CipherKeyLength property value
     * @exception	Exception	
     */
    public short getCipherKeyLength(){

    return this.cipherKeyLength;
    } // getCipherKeyLength

    /**
     * This method sets the ESPTransform.CipherKeyLength property value. This 
     * property is described as follows: 
     * 
     * CipherKeyLength specifies, in bits, the key length for the encryption 
     * algorithm. For algorithms with fixed key lengths, this value is 
     * ignored. 
     * 
     * @param	short	new CipherKeyLength property value
     * @exception	Exception	
     */
    public void setCipherKeyLength(short cipherKeyLength) {

    this.cipherKeyLength = cipherKeyLength;
    } // setCipherKeyLength


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CipherKeyRounds. 
     */
    private short cipherKeyRounds;
    /**
     * This method returns the ESPTransform.CipherKeyRounds property value. 
     * This property is described as follows: 
     * 
     * CipherKeyRounds specifies the key rounds for the encryption algorithm. 
     * For algorithms with a fixed number of key rounds, this value is 
     * ignored. Currently, key rounds are NOT defined for any ESP encryption 
     * algorithms. 
     * 
     * @return	short	current CipherKeyRounds property value
     * @exception	Exception	
     */
    public short getCipherKeyRounds(){

    return this.cipherKeyRounds;
    } // getCipherKeyRounds

    /**
     * This method sets the ESPTransform.CipherKeyRounds property value. This 
     * property is described as follows: 
     * 
     * CipherKeyRounds specifies the key rounds for the encryption algorithm. 
     * For algorithms with a fixed number of key rounds, this value is 
     * ignored. Currently, key rounds are NOT defined for any ESP encryption 
     * algorithms. 
     * 
     * @param	short	new CipherKeyRounds property value
     * @exception	Exception	
     */
    public void setCipherKeyRounds(short cipherKeyRounds) {

    this.cipherKeyRounds = cipherKeyRounds;
    } // setCipherKeyRounds


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property UseReplayPrevention. 
     */
    private boolean useReplayPrevention;
    /**
     * This method returns the ESPTransform.UseReplayPrevention property 
     * value. This property is described as follows: 
     * 
     * UseReplayPrevention causes the local peer to enable replay prevention 
     * detection. This can be accomplished by using a sequence number when 
     * sending a packet or checking the sequence number upon receipt of a 
     * packet. 
     * 
     * @return	boolean	current UseReplayPrevention property 
     * value 
     * @exception	Exception	
     */
    public boolean isUseReplayPrevention(){

    return this.useReplayPrevention;
    } // getUseReplayPrevention

    /**
     * This method sets the ESPTransform.UseReplayPrevention property value. 
     * This property is described as follows: 
     * 
     * UseReplayPrevention causes the local peer to enable replay prevention 
     * detection. This can be accomplished by using a sequence number when 
     * sending a packet or checking the sequence number upon receipt of a 
     * packet. 
     * 
     * @param	boolean	new UseReplayPrevention property value
     * @exception	Exception	
     */
    public void setUseReplayPrevention(boolean useReplayPrevention) {

    this.useReplayPrevention = useReplayPrevention;
    } // setUseReplayPrevention


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ReplayPreventionWindowSize. 
     */
    private int replayPreventionWindowSize;
    /**
     * This method returns the ESPTransform.ReplayPreventionWindowSize 
     * property value. This property is described as follows: 
     * 
     * ReplayPreventionWindowsSize specifies, in bits, the length of the 
     * sliding window used by the replay prevention mechanism. The value of 
     * this property is meaningless if UseReplayPrevention is false. The 
     * window size MUST be a power of 2. 
     * 
     * @return	int	current ReplayPreventionWindowSize property 
     * value 
     * @exception	Exception	
     */
    public int getReplayPreventionWindowSize(){

    return this.replayPreventionWindowSize;
    } // getReplayPreventionWindowSize

    /**
     * This method sets the ESPTransform.ReplayPreventionWindowSize property 
     * value. This property is described as follows: 
     * 
     * ReplayPreventionWindowsSize specifies, in bits, the length of the 
     * sliding window used by the replay prevention mechanism. The value of 
     * this property is meaningless if UseReplayPrevention is false. The 
     * window size MUST be a power of 2. 
     * 
     * @param	int	new ReplayPreventionWindowSize property value
     * @exception	Exception	
     */
    public void setReplayPreventionWindowSize(int replayPreventionWindowSize) 
	{

    this.replayPreventionWindowSize = replayPreventionWindowSize;
    } // setReplayPreventionWindowSize



} // Class ESPTransform
