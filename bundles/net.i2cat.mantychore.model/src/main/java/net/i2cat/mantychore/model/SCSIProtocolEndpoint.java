/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class SCSIProtocolEndpoint as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * SCSIProtocolEndpointBean Interface. The CIM class SCSIProtocolEndpoint is 
 * described as follows: 
 * 
 * A SCSIProtocolEndpoint represents the protocol (command) aspects of a 
 * logical SCSI port, independent of the connection/transport. 
 * SCSIProtocolEndpoint is either directly or indirectly associated to one or 
 * more instances of LogicalPort (via PortImplementsEndpoint) depending on 
 * the underlying transport. Indirect associations aggregate one or more 
 * LogicalPorts using intermediate ProtocolEndpoints (iSCSI, etc). 
 * SCSIProtocolEndpoint is also associated to a SCSIProtocolController, 
 * representing the SCSI device. 
 */
    @Entity
public class SCSIProtocolEndpoint extends ProtocolEndpoint implements 
    Serializable {

    /**
     * This constructor creates a SCSIProtocolEndpointBeanImpl Class which 
     * implements the SCSIProtocolEndpointBean Interface, and encapsulates 
     * the CIM class SCSIProtocolEndpoint in a Java Bean. The CIM class 
     * SCSIProtocolEndpoint is described as follows: 
     * 
     * A SCSIProtocolEndpoint represents the protocol (command) aspects of a 
     * logical SCSI port, independent of the connection/transport. 
     * SCSIProtocolEndpoint is either directly or indirectly associated to 
     * one or more instances of LogicalPort (via PortImplementsEndpoint) 
     * depending on the underlying transport. Indirect associations aggregate 
     * one or more LogicalPorts using intermediate ProtocolEndpoints (iSCSI, 
     * etc). SCSIProtocolEndpoint is also associated to a 
     * SCSIProtocolController, representing the SCSI device. 
     */
    public SCSIProtocolEndpoint(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Name. 
     */
    private String name;
    /**
     * This method returns the SCSIProtocolEndpoint.name property value. This 
     * property is described as follows: 
     * 
     * The SCSI identifier for the target or initiator device, in the format 
     * appropriate for the ConnectionType. If a ConnectionType specific 
     * subclass is defined, the subclass may override Name to define the 
     * format. For other ConnectionTypes, the format (and content) should 
     * match that of PermamnentAddress of the corresponding LogicalPort. 
     * 
     * @return	String	current name property value
     * @exception	Exception	
     */
    public String getname(){

    return (String)name;
    } // getname

    /**
     * This method sets the SCSIProtocolEndpoint.name property value. This 
     * property is described as follows: 
     * 
     * The SCSI identifier for the target or initiator device, in the format 
     * appropriate for the ConnectionType. If a ConnectionType specific 
     * subclass is defined, the subclass may override Name to define the 
     * format. For other ConnectionTypes, the format (and content) should 
     * match that of PermamnentAddress of the corresponding LogicalPort. 
     * 
     * @param	String	new name property value
     * @exception	Exception	
     */
    public void setname(String name) {

    this.name = name;
    } // setname


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ConnectionType. 
     */

    public enum ConnectionType{
    OTHER,
    FIBRE_CHANNEL,
    PARALLEL_SCSI,
    SSA,
    IEEE_1394,
    RDMA,
    ISCSI,
    SAS,
    ADT
    }
    private ConnectionType connectionType;
    /**
     * This method returns the SCSIProtocolEndpoint.ConnectionType property 
     * value. This property is described as follows: 
     * 
     * The supported connection type for this endpoint. The connection type 
     * may be needed before the port(s) are associated and also is used in 
     * some SCSI commands. 
     * 
     * @return	int	current ConnectionType property value
     * @exception	Exception	
     */
    public ConnectionType getConnectionType(){

    return this.connectionType;
    } // getConnectionType

    /**
     * This method sets the SCSIProtocolEndpoint.ConnectionType property 
     * value. This property is described as follows: 
     * 
     * The supported connection type for this endpoint. The connection type 
     * may be needed before the port(s) are associated and also is used in 
     * some SCSI commands. 
     * 
     * @param	int	new ConnectionType property value
     * @exception	Exception	
     */
    public void setConnectionType(ConnectionType connectionType){

    this.connectionType = connectionType;
    } // setConnectionType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Role. 
     */

    public enum Role{
    UNKNOWN,
    INITIATOR,
    TARGET,
    BOTH_INITIATOR_AND_TARGET
    }
    private Role role;
    /**
     * This method returns the SCSIProtocolEndpoint.Role property value. This 
     * property is described as follows: 
     * 
     * For iSCSI, each SCSIProtocolEndpoint MUST act as either a target or an 
     * initiator endpoint. Other transports allow a SCSI PE to act as both an 
     * initiator and target endpoint. This property indicates which role this 
     * ProtocolEndpoint implements. 
     * 
     * @return	int	current Role property value
     * @exception	Exception	
     */
    public Role getRole(){

    return this.role;
    } // getRole

    /**
     * This method sets the SCSIProtocolEndpoint.Role property value. This 
     * property is described as follows: 
     * 
     * For iSCSI, each SCSIProtocolEndpoint MUST act as either a target or an 
     * initiator endpoint. Other transports allow a SCSI PE to act as both an 
     * initiator and target endpoint. This property indicates which role this 
     * ProtocolEndpoint implements. 
     * 
     * @param	int	new Role property value
     * @exception	Exception	
     */
    public void setRole(Role role){

    this.role = role;
    } // setRole


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property TargetRelativePortNumber. 
     */
    private long targetRelativePortNumber;
    /**
     * This method returns the SCSIProtocolEndpoint.targetRelativePortNumber 
     * property value. This property is described as follows: 
     * 
     * For ports on a target device, the port number, relative to the storage 
     * system. 0 is reserved by T10, 1 is port A, 2 is port B, etc. These 
     * numbers are used in SCSI commands that operate on target port groups. 
     * 
     * @return	long	current targetRelativePortNumber property 
     * value 
     * @exception	Exception	
     */
    public long gettargetRelativePortNumber(){

    return this.targetRelativePortNumber;
    } // gettargetRelativePortNumber

    /**
     * This method sets the SCSIProtocolEndpoint.targetRelativePortNumber 
     * property value. This property is described as follows: 
     * 
     * For ports on a target device, the port number, relative to the storage 
     * system. 0 is reserved by T10, 1 is port A, 2 is port B, etc. These 
     * numbers are used in SCSI commands that operate on target port groups. 
     * 
     * @param	long	new targetRelativePortNumber property value
     * @exception	Exception	
     */
    public void settargetRelativePortNumber(long targetRelativePortNumber) {

    this.targetRelativePortNumber = targetRelativePortNumber;
    } // settargetRelativePortNumber


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherConnectionType. 
     */
    private String otherConnectionType;
    /**
     * This method returns the SCSIProtocolEndpoint.otherConnectionType 
     * property value. This property is described as follows: 
     * 
     * The connection type, if ConnectionType is "Other".
     * 
     * @return	String	current otherConnectionType property value
     * @exception	Exception	
     */
    public String getotherConnectionType(){

    return this.otherConnectionType;
    } // getotherConnectionType

    /**
     * This method sets the SCSIProtocolEndpoint.otherConnectionType property 
     * value. This property is described as follows: 
     * 
     * The connection type, if ConnectionType is "Other".
     * 
     * @param	String	new otherConnectionType property value
     * @exception	Exception	
     */
    public void setotherConnectionType(String otherConnectionType) {

    this.otherConnectionType = otherConnectionType;
    } // setotherConnectionType



} // Class SCSIProtocolEndpoint
