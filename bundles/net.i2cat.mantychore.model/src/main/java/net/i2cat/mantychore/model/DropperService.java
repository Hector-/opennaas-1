/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class DropperService as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * DropperServiceBean Interface. The CIM class DropperService is described as 
 * follows: 
 * 
 * DropperService represents the ability to selectively drop network traffic, 
 * and/or to invoke another ConditioningService (indicated using the 
 * NextService association) for further processing of traffic that is not 
 * dropped. It is the base class for different types of droppers. Droppers 
 * are distinguished by the algorithm that they use to drop traffic. The 
 * NextService association has special semantics for droppers, in addition to 
 * conveying the general information of 'what happens next' (that apply to 
 * all Conditioning Services). The queue(s) from which a particular dropper 
 * drops packets are identified by following chain(s) of NextService 
 * associations 'rightwards' from the dropper, until they reach a queue. 
 */
    @Entity
public class DropperService extends ConditioningService implements 
    Serializable {

    /**
     * This constructor creates a DropperServiceBeanImpl Class which 
     * implements the DropperServiceBean Interface, and encapsulates the CIM 
     * class DropperService in a Java Bean. The CIM class DropperService is 
     * described as follows: 
     * 
     * DropperService represents the ability to selectively drop network 
     * traffic, and/or to invoke another ConditioningService (indicated using 
     * the NextService association) for further processing of traffic that is 
     * not dropped. It is the base class for different types of droppers. 
     * Droppers are distinguished by the algorithm that they use to drop 
     * traffic. The NextService association has special semantics for 
     * droppers, in addition to conveying the general information of 'what 
     * happens next' (that apply to all Conditioning Services). The queue(s) 
     * from which a particular dropper drops packets are identified by 
     * following chain(s) of NextService associations 'rightwards' from the 
     * dropper, until they reach a queue. 
     */
    public DropperService(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DropperType. 
     */

    public enum DropperType{
    OTHER,
    RANDOM,
    HEADTAIL,
    ABSOLUTE_DROPPER
    }
    private DropperType dropperType;
    /**
     * This method returns the DropperService.DropperType property value. This 
     * property is described as follows: 
     * 
     * This property is an enumerated 16-bit unsigned integer that defines the 
     * type of dropper. Its Values are: 1: Other 2: Random 3: HeadTail 4: 
     * Absolute Dropper Note: The DropperType property and the DropperService 
     * subclasses provide similar information. This property is defined for 
     * query purposes and to not require a subclass for all types of 
     * DropperServices (for example, to describe an Absolute Dropper in 
     * today's model). Therefore, DropperService can be instantiated directly 
     * and the Type property is needed. 
     * 
     * @return	int	current DropperType property value
     * @exception	Exception	
     */
    public DropperType getDropperType(){

    return this.dropperType;
    } // getDropperType

    /**
     * This method sets the DropperService.DropperType property value. This 
     * property is described as follows: 
     * 
     * This property is an enumerated 16-bit unsigned integer that defines the 
     * type of dropper. Its Values are: 1: Other 2: Random 3: HeadTail 4: 
     * Absolute Dropper Note: The DropperType property and the DropperService 
     * subclasses provide similar information. This property is defined for 
     * query purposes and to not require a subclass for all types of 
     * DropperServices (for example, to describe an Absolute Dropper in 
     * today's model). Therefore, DropperService can be instantiated directly 
     * and the Type property is needed. 
     * 
     * @param	int	new DropperType property value
     * @exception	Exception	
     */
    public void setDropperType(DropperType dropperType){

    this.dropperType = dropperType;
    } // setDropperType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherDropperType. 
     */
    private String otherDropperType;
    /**
     * This method returns the DropperService.otherDropperType property value. 
     * This property is described as follows: 
     * 
     * This property contains a vendor-specific value for the type of dropping 
     * that is done. It is used when the value of the DropperType property is 
     * 1 (Other). 
     * 
     * @return	String	current otherDropperType property value
     * @exception	Exception	
     */
    public String getotherDropperType(){

    return this.otherDropperType;
    } // getotherDropperType

    /**
     * This method sets the DropperService.otherDropperType property value. 
     * This property is described as follows: 
     * 
     * This property contains a vendor-specific value for the type of dropping 
     * that is done. It is used when the value of the DropperType property is 
     * 1 (Other). 
     * 
     * @param	String	new otherDropperType property value
     * @exception	Exception	
     */
    public void setotherDropperType(String otherDropperType) {

    this.otherDropperType = otherDropperType;
    } // setotherDropperType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AlwaysDrop. 
     */
    @Deprecated
    public enum AlwaysDrop{
    UNKNOWN,
    ALWAYS_DROP,
    DO_NOT_ALWAYS_DROP
    }
    @Deprecated
    private AlwaysDrop alwaysDrop;
    /**
     * This method returns the DropperService.AlwaysDrop property value. This 
     * property is described as follows: 
     * 
     * This property indicates whether the Dropper will always drop incoming 
     * packets (value=1) regardless of their type. It is deprecated since its 
     * information is conveyed by the DropperType property (value=4, 
     * 'Absolute Dropper'). 
     * 
     * @return	int	current AlwaysDrop property value
     * @exception	Exception	
     */
    @Deprecated
    public AlwaysDrop getAlwaysDrop(){

    return this.alwaysDrop;
    } // getAlwaysDrop

    /**
     * This method sets the DropperService.AlwaysDrop property value. This 
     * property is described as follows: 
     * 
     * This property indicates whether the Dropper will always drop incoming 
     * packets (value=1) regardless of their type. It is deprecated since its 
     * information is conveyed by the DropperType property (value=4, 
     * 'Absolute Dropper'). 
     * 
     * @param	int	new AlwaysDrop property value
     * @exception	Exception	
     */
    @Deprecated
    public void setAlwaysDrop(AlwaysDrop alwaysDrop){

    this.alwaysDrop = alwaysDrop;
    } // setAlwaysDrop


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DropFrom. 
     */

    public enum DropFrom{
    UNKNOWN,
    HEAD,
    TAIL
    }
    private DropFrom dropFrom;
    /**
     * This method returns the DropperService.DropFrom property value. This 
     * property is described as follows: 
     * 
     * This enumeration indicates the point in the associated queue 
     * (associated via the NextService relationship) from which packets 
     * should be dropped. If the value is 0 "Unknown", then packets MAY be 
     * dropped from any location in the queue. 
     * 
     * @return	int	current DropFrom property value
     * @exception	Exception	
     */
    public DropFrom getDropFrom(){

    return this.dropFrom;
    } // getDropFrom

    /**
     * This method sets the DropperService.DropFrom property value. This 
     * property is described as follows: 
     * 
     * This enumeration indicates the point in the associated queue 
     * (associated via the NextService relationship) from which packets 
     * should be dropped. If the value is 0 "Unknown", then packets MAY be 
     * dropped from any location in the queue. 
     * 
     * @param	int	new DropFrom property value
     * @exception	Exception	
     */
    public void setDropFrom(DropFrom dropFrom){

    this.dropFrom = dropFrom;
    } // setDropFrom


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DropStartMetric. 
     */

    public enum DropStartMetric{
    OTHER,
    QUEUE_THRESHOLD,
    ARRIVAL_RATE
    }
    private DropStartMetric dropStartMetric;
    /**
     * This method returns the DropperService.DropStartMetric property value. 
     * This property is described as follows: 
     * 
     * This property is an enumerated unsigned 16-bit integer that defines the 
     * metric used to trigger the start of dropping packets. This does NOT 
     * mean that all packets will be dropped; it does mean that SOME packets 
     * will start to be dropped. The number and type of packets dropped is a 
     * function of the type of algorithm used by this Dropper. Values are: 1: 
     * Other 2: Queue Threshold 3: Arrival Rate. 
     * 
     * @return	int	current DropStartMetric property value
     * @exception	Exception	
     */
    public DropStartMetric getDropStartMetric(){

    return this.dropStartMetric;
    } // getDropStartMetric

    /**
     * This method sets the DropperService.DropStartMetric property value. 
     * This property is described as follows: 
     * 
     * This property is an enumerated unsigned 16-bit integer that defines the 
     * metric used to trigger the start of dropping packets. This does NOT 
     * mean that all packets will be dropped; it does mean that SOME packets 
     * will start to be dropped. The number and type of packets dropped is a 
     * function of the type of algorithm used by this Dropper. Values are: 1: 
     * Other 2: Queue Threshold 3: Arrival Rate. 
     * 
     * @param	int	new DropStartMetric property value
     * @exception	Exception	
     */
    public void setDropStartMetric(DropStartMetric dropStartMetric){

    this.dropStartMetric = dropStartMetric;
    } // setDropStartMetric


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DropMaintainMetric. 
     */

    public enum DropMaintainMetric{
    OTHER,
    QUEUE_THRESHOLD,
    ARRIVAL_RATE
    }
    private DropMaintainMetric dropMaintainMetric;
    /**
     * This method returns the DropperService.DropMaintainMetric property 
     * value. This property is described as follows: 
     * 
     * This property is an enumerated unsigned 16-bit integer that defines the 
     * metric used to determine when ALL packets will be dropped REGARDLESS 
     * of the type of algorithm used by this Dropper. Values are: 1: Other 2: 
     * Queue Threshold 3: Arrival Rate. 
     * 
     * @return	int	current DropMaintainMetric property value
     * @exception	Exception	
     */
    public DropMaintainMetric getDropMaintainMetric(){

    return this.dropMaintainMetric;
    } // getDropMaintainMetric

    /**
     * This method sets the DropperService.DropMaintainMetric property value. 
     * This property is described as follows: 
     * 
     * This property is an enumerated unsigned 16-bit integer that defines the 
     * metric used to determine when ALL packets will be dropped REGARDLESS 
     * of the type of algorithm used by this Dropper. Values are: 1: Other 2: 
     * Queue Threshold 3: Arrival Rate. 
     * 
     * @param	int	new DropMaintainMetric property value
     * @exception	Exception	
     */
    public void setDropMaintainMetric(DropMaintainMetric 
	dropMaintainMetric){

    this.dropMaintainMetric = dropMaintainMetric;
    } // setDropMaintainMetric



} // Class DropperService
