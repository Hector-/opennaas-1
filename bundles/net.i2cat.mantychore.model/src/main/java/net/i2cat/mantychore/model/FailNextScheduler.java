/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Nov 29 
 * 11:50:57 CET 2010. 
 */

package net.i2cat.mantychore.model;

import javax.wbem.client.*;
import javax.wbem.cim.*;
import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class FailNextScheduler as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * FailNextSchedulerBean Interface. The CIM class FailNextScheduler is 
 * described as follows: 
 * 
 * This association is a subclass of NextScheduler, and defines a 
 * predecessor-successor relationship between a NonWork 
 * ConservingSchedulingService and another PacketScheduling Service. It 
 * indicates that the NonWorkConserving scheduler may pass up a scheduling 
 * opportunity (thereby behaving in a non-work conserving manner), and make 
 * the resulting bandwidth available to the FollowingService scheduler. 
 */
public class FailNextScheduler extends NextScheduler implements Serializable 
    {

    /**
     * This constructor creates a FailNextSchedulerBeanImpl Class which 
     * implements the FailNextSchedulerBean Interface, and encapsulates the 
     * CIM class FailNextScheduler in a Java Bean. The CIM class 
     * FailNextScheduler is described as follows: 
     * 
     * This association is a subclass of NextScheduler, and defines a 
     * predecessor-successor relationship between a NonWork 
     * ConservingSchedulingService and another PacketScheduling Service. It 
     * indicates that the NonWorkConserving scheduler may pass up a 
     * scheduling opportunity (thereby behaving in a non-work conserving 
     * manner), and make the resulting bandwidth available to the 
     * FollowingService scheduler. 
     */
    public FailNextScheduler(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PrecedingService. 
     */
    private NonWorkConservingSchedulingService precedingService;
    /**
     * This method returns the FailNextScheduler.PrecedingService property 
     * value. This property is described as follows: 
     * 
     * The NonWorkConservingSchedulingService whose excess bandwidth is made 
     * available to the scheduler identified by the FollowingService 
     * reference. The [0..n] cardinality indicates that a single 
     * FollowingService scheduler may have the opportunity to use the unused 
     * bandwidth of multiple prior non-work-conserving schedulers. 
     * 
     * @return	CIM_NonWorkConservingSchedulingService	current 
     * PrecedingService property value 
     * @exception	Exception	
     */
    public NonWorkConservingSchedulingService getPrecedingService(){

    return (NonWorkConservingSchedulingService)precedingService;
    } // getPrecedingService

    /**
     * This method sets the FailNextScheduler.PrecedingService property value. 
     * This property is described as follows: 
     * 
     * The NonWorkConservingSchedulingService whose excess bandwidth is made 
     * available to the scheduler identified by the FollowingService 
     * reference. The [0..n] cardinality indicates that a single 
     * FollowingService scheduler may have the opportunity to use the unused 
     * bandwidth of multiple prior non-work-conserving schedulers. 
     * 
     * @param	CIM_NonWorkConservingSchedulingService	new 
     * PrecedingService property value 
     * @exception	Exception	
     */
    public void setPrecedingService(NonWorkConservingSchedulingService 
	precedingService) {

    this.precedingService = precedingService;
    } // setPrecedingService


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property FollowingService. 
     */
    private PacketSchedulingService followingService;
    /**
     * This method returns the FailNextScheduler.FollowingService property 
     * value. This property is described as follows: 
     * 
     * A scheduler that may use the bandwidth available from the non-work 
     * conserving scheduler. 
     * 
     * @return	CIM_PacketSchedulingService	current 
     * FollowingService property value 
     * @exception	Exception	
     */
    public PacketSchedulingService getFollowingService(){

    return (PacketSchedulingService)followingService;
    } // getFollowingService

    /**
     * This method sets the FailNextScheduler.FollowingService property value. 
     * This property is described as follows: 
     * 
     * A scheduler that may use the bandwidth available from the non-work 
     * conserving scheduler. 
     * 
     * @param	CIM_PacketSchedulingService	new FollowingService 
     * property value 
     * @exception	Exception	
     */
    public void setFollowingService(PacketSchedulingService followingService) 
	{

    this.followingService = followingService;
    } // setFollowingService



} // Class FailNextScheduler
