/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 03 
 * 14:18:55 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class IsSpare as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * IsSpareBean Interface. The CIM class IsSpare is described as follows: 
 * 
 * The IsSpare association indicates an element that can spare or replace any 
 * of the elements in the referenced RedundancySet. If the 'spare' is itself 
 * a Collection, this indicates that each of the 'spare' members can replace 
 * any of the elements in the RedundancySet. In the case of a collection all 
 * of the values in the properties of this association MUST apply to all 
 * members of the Collection. If this is not true, then the Collection SHOULD 
 * be broken down into smaller sets (and the IsSpare association defined for 
 * each of these smaller sets), such that the properties of this association 
 * apply to all collected members. 
 */
public class IsSpare extends Dependency implements Serializable {

    /**
     * This constructor creates a IsSpareBeanImpl Class which implements the 
     * IsSpareBean Interface, and encapsulates the CIM class IsSpare in a 
     * Java Bean. The CIM class IsSpare is described as follows: 
     * 
     * The IsSpare association indicates an element that can spare or replace 
     * any of the elements in the referenced RedundancySet. If the 'spare' is 
     * itself a Collection, this indicates that each of the 'spare' members 
     * can replace any of the elements in the RedundancySet. In the case of a 
     * collection all of the values in the properties of this association 
     * MUST apply to all members of the Collection. If this is not true, then 
     * the Collection SHOULD be broken down into smaller sets (and the 
     * IsSpare association defined for each of these smaller sets), such that 
     * the properties of this association apply to all collected members. 
     */
    public IsSpare(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Antecedent. 
     */
    private ManagedElement antecedent;
    /**
     * This method returns the IsSpare.Antecedent property value. This 
     * property is described as follows: 
     * 
     * A ManagedElement or Collection of elements acting as a spare.
     * 
     * @return	CIM_ManagedElement	current Antecedent property 
     * value 
     * @exception	Exception	
     */
    public ManagedElement getAntecedent(){

    return (ManagedElement)antecedent;
    } // getAntecedent

    /**
     * This method sets the IsSpare.Antecedent property value. This property 
     * is described as follows: 
     * 
     * A ManagedElement or Collection of elements acting as a spare.
     * 
     * @param	CIM_ManagedElement	new Antecedent property value
     * @exception	Exception	
     */
    public void setAntecedent(ManagedElement antecedent) {

    this.antecedent = antecedent;
    } // setAntecedent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Dependent. 
     */
    private RedundancySet dependent;
    /**
     * This method returns the IsSpare.Dependent property value. This property 
     * is described as follows: 
     * 
     * The set of elements that ARE spared.
     * 
     * @return	CIM_RedundancySet	current Dependent property 
     * value 
     * @exception	Exception	
     */
    public RedundancySet getDependent(){

    return (RedundancySet)dependent;
    } // getDependent

    /**
     * This method sets the IsSpare.Dependent property value. This property is 
     * described as follows: 
     * 
     * The set of elements that ARE spared.
     * 
     * @param	CIM_RedundancySet	new Dependent property value
     * @exception	Exception	
     */
    public void setDependent(RedundancySet dependent) {

    this.dependent = dependent;
    } // setDependent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SpareStatus. 
     */

    public enum SpareStatus{
    UNKNOWN,
    HOT_STANDBY,
    COLD_STANDBY
    }
 public SpareStatus spareStatus;
    /**
     * This method returns the IsSpare.SpareStatus property value. This 
     * property is described as follows: 
     * 
     * Indicates the state of the 'spare'. - Hot Standby. The element is 
     * available 'immediately' to become a functioning member of the set. 
     * Such an element is powered on and has been initialized for it's role 
     * as a spare. - Cold Standby. The element is not available to join the 
     * set without action to prepare it. 
     * 
     * @return	short	current SpareStatus property value
     * @exception	Exception	
     */
    public SpareStatus getSpareStatus(){

    return this.spareStatus;
    } // getSpareStatus

    /**
     * This method sets the IsSpare.SpareStatus property value. This property 
     * is described as follows: 
     * 
     * Indicates the state of the 'spare'. - Hot Standby. The element is 
     * available 'immediately' to become a functioning member of the set. 
     * Such an element is powered on and has been initialized for it's role 
     * as a spare. - Cold Standby. The element is not available to join the 
     * set without action to prepare it. 
     * 
     * @param	short	new SpareStatus property value
     * @exception	Exception	
     */
    public void setSpareStatus(SpareStatus spareStatus){

    this.spareStatus = spareStatus;
    } // setSpareStatus


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property FailoverSupported. 
     */

    public enum FailoverSupported{
    UNKNOWN,
    AUTOMATIC,
    MANUAL,
    BOTH_MANUAL_AND_AUTOMATIC
    }
 public FailoverSupported failoverSupported;
    /**
     * This method returns the IsSpare.FailoverSupported property value. This 
     * property is described as follows: 
     * 
     * Indicates whether or not the failover to the spare is a manual or 
     * automatic action. 
     * 
     * @return	short	current FailoverSupported property value
     * @exception	Exception	
     */
    public FailoverSupported getFailoverSupported(){

    return this.failoverSupported;
    } // getFailoverSupported

    /**
     * This method sets the IsSpare.FailoverSupported property value. This 
     * property is described as follows: 
     * 
     * Indicates whether or not the failover to the spare is a manual or 
     * automatic action. 
     * 
     * @param	short	new FailoverSupported property value
     * @exception	Exception	
     */
    public void setFailoverSupported(FailoverSupported failoverSupported){

    this.failoverSupported = failoverSupported;
    } // setFailoverSupported



} // Class IsSpare
