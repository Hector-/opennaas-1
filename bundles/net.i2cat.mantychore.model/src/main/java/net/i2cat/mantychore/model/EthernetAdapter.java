/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Nov 29 
 * 11:50:57 CET 2010. 
 */

package net.i2cat.mantychore.model;

import javax.wbem.client.*;
import javax.wbem.cim.*;
import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class EthernetAdapter as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * EthernetAdapterBean Interface. The CIM class EthernetAdapter is described 
 * as follows: 
 * 
 * Note: The use of the CIM_EthernetAdapter class has been deprecated, 
 * consistent with NetworkAdapter. Instead use the CIM_EthernetPort class. 
 * Deprecated description: This class describes the capabilities and 
 * management aspects of an EthernetAdapter. 
 */
public class EthernetAdapter extends NetworkAdapter implements Serializable 
    {

    /**
     * This constructor creates a EthernetAdapterBeanImpl Class which 
     * implements the EthernetAdapterBean Interface, and encapsulates the CIM 
     * class EthernetAdapter in a Java Bean. The CIM class EthernetAdapter is 
     * described as follows: 
     * 
     * Note: The use of the CIM_EthernetAdapter class has been deprecated, 
     * consistent with NetworkAdapter. Instead use the CIM_EthernetPort 
     * class. Deprecated description: This class describes the capabilities 
     * and management aspects of an EthernetAdapter. 
     */
    public EthernetAdapter(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property NetworkAddresses. 
     */
    @Deprecated    private String[] networkAddresses;
    /**
     * This method returns the EthernetAdapter.NetworkAddresses property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Ethernet/802.3 MAC addresses formatted as twelve 
     * hexadecimal digits (for example, "010203040506"), with each pair 
     * representing one of the six octets of the MAC address in "canonical" 
     * bit order. (Therefore, the Group address bit is found in the low order 
     * bit of the first character of the string.) 
     * 
     * @return	String[]	current NetworkAddresses property value
     * @exception	Exception	
     */
    @Deprecated
    public String[] getNetworkAddresses(){

    return (String[])networkAddresses;
    } // getNetworkAddresses

    /**
     * This method sets the EthernetAdapter.NetworkAddresses property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Ethernet/802.3 MAC addresses formatted as twelve 
     * hexadecimal digits (for example, "010203040506"), with each pair 
     * representing one of the six octets of the MAC address in "canonical" 
     * bit order. (Therefore, the Group address bit is found in the low order 
     * bit of the first character of the string.) 
     * 
     * @param	String[]	new NetworkAddresses property value
     * @exception	Exception	
     */
    @Deprecated
    public void setNetworkAddresses(String[] networkAddresses) {

    this.networkAddresses = networkAddresses;
    } // setNetworkAddresses


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MaxDataSize. 
     */
    @Deprecated    private int maxDataSize;
    /**
     * This method returns the EthernetAdapter.MaxDataSize property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The maximum size of the INFO (non-MAC) field that will be 
     * received or transmitted. 
     * 
     * @return	int	current MaxDataSize property value
     * @exception	Exception	
     */
    @Deprecated
    public int getMaxDataSize(){

    return this.maxDataSize;
    } // getMaxDataSize

    /**
     * This method sets the EthernetAdapter.MaxDataSize property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The maximum size of the INFO (non-MAC) field that will be 
     * received or transmitted. 
     * 
     * @param	int	new MaxDataSize property value
     * @exception	Exception	
     */
    @Deprecated
    public void setMaxDataSize(int maxDataSize) {

    this.maxDataSize = maxDataSize;
    } // setMaxDataSize


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Capabilities. 
     */
    @Deprecated
    public enum Capabilities{
    UNKNOWN,
    OTHER,
    ALERTONLAN,
    WAKEONLAN,
    FAILOVER,
    LOADBALANCING
    }Capabilities capabilities;
    /**
     * This method returns the EthernetAdapter.Capabilities property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Capabilities of the EthernetAdapter. For example, the 
     * Device might support AlertOnLan, WakeOnLan, Load Balancing, or 
     * FailOver. If failover or load balancing capabilities are listed, a 
     * SpareGroup (failover) or ExtraCapacityGroup (load balancing) should 
     * also be defined to completely describe the capability. 
     * 
     * @return	short	current Capabilities property value
     * @exception	Exception	
     */
    @Deprecated
    public Capabilities getCapabilities(){

    return this.capabilities;
    } // getCapabilities

    /**
     * This method sets the EthernetAdapter.Capabilities property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Capabilities of the EthernetAdapter. For example, the 
     * Device might support AlertOnLan, WakeOnLan, Load Balancing, or 
     * FailOver. If failover or load balancing capabilities are listed, a 
     * SpareGroup (failover) or ExtraCapacityGroup (load balancing) should 
     * also be defined to completely describe the capability. 
     * 
     * @param	short	new Capabilities property value
     * @exception	Exception	
     */
    @Deprecated
    public void setCapabilities(Capabilities capabilities){

    this.capabilities = capabilities;
    } // setCapabilities


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CapabilityDescriptions. 
     */
    @Deprecated    private String[] capabilityDescriptions;
    /**
     * This method returns the EthernetAdapter.CapabilityDescriptions property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: An array of free-form strings that provides more detailed 
     * explanations for any of the EthernetAdapter features that are 
     * indicated in the Capabilities array. Note, each entry of this array is 
     * related to the entry in the Capabilities array that is located at the 
     * same index. 
     * 
     * @return	String[]	current CapabilityDescriptions property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public String[] getCapabilityDescriptions(){

    return this.capabilityDescriptions;
    } // getCapabilityDescriptions

    /**
     * This method sets the EthernetAdapter.CapabilityDescriptions property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: An array of free-form strings that provides more detailed 
     * explanations for any of the EthernetAdapter features that are 
     * indicated in the Capabilities array. Note, each entry of this array is 
     * related to the entry in the Capabilities array that is located at the 
     * same index. 
     * 
     * @param	String[]	new CapabilityDescriptions property value
     * @exception	Exception	
     */
    @Deprecated
    public void setCapabilityDescriptions(String[] capabilityDescriptions) {

    this.capabilityDescriptions = capabilityDescriptions;
    } // setCapabilityDescriptions


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property EnabledCapabilities. 
     */
    @Deprecated
    public enum EnabledCapabilities{
    UNKNOWN,
    OTHER,
    ALERTONLAN,
    WAKEONLAN,
    FAILOVER,
    LOADBALANCING
    }EnabledCapabilities enabledCapabilities;
    /**
     * This method returns the EthernetAdapter.EnabledCapabilities property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Specifies which capabilities are enabled from the list of 
     * all supported ones, which are defined in the Capabilities array. 
     * 
     * @return	short	current EnabledCapabilities property value
     * @exception	Exception	
     */
    @Deprecated
    public EnabledCapabilities getEnabledCapabilities(){

    return this.enabledCapabilities;
    } // getEnabledCapabilities

    /**
     * This method sets the EthernetAdapter.EnabledCapabilities property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Specifies which capabilities are enabled from the list of 
     * all supported ones, which are defined in the Capabilities array. 
     * 
     * @param	short	new EnabledCapabilities property value
     * @exception	Exception	
     */
    @Deprecated
    public void setEnabledCapabilities(EnabledCapabilities 
	enabledCapabilities){

    this.enabledCapabilities = enabledCapabilities;
    } // setEnabledCapabilities


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SymbolErrors. 
     */
    @Deprecated    private int symbolErrors;
    /**
     * This method returns the EthernetAdapter.SymbolErrors property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of times there was an invalid data symbol when 
     * a valid carrier was present. The count is incremented at most once per 
     * carrier event, even if multiple symbol errors occur during the carrier 
     * event. 
     * 
     * @return	int	current SymbolErrors property value
     * @exception	Exception	
     */
    @Deprecated
    public int getSymbolErrors(){

    return this.symbolErrors;
    } // getSymbolErrors

    /**
     * This method sets the EthernetAdapter.SymbolErrors property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of times there was an invalid data symbol when 
     * a valid carrier was present. The count is incremented at most once per 
     * carrier event, even if multiple symbol errors occur during the carrier 
     * event. 
     * 
     * @param	int	new SymbolErrors property value
     * @exception	Exception	
     */
    @Deprecated
    public void setSymbolErrors(int symbolErrors) {

    this.symbolErrors = symbolErrors;
    } // setSymbolErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property TotalPacketsTransmitted. 
     */
    @Deprecated    private long totalPacketsTransmitted;
    /**
     * This method returns the EthernetAdapter.TotalPacketsTransmitted 
     * property value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The total number of packets that are transmitted. 
     * 
     * @return	long	current TotalPacketsTransmitted property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public long getTotalPacketsTransmitted(){

    return this.totalPacketsTransmitted;
    } // getTotalPacketsTransmitted

    /**
     * This method sets the EthernetAdapter.TotalPacketsTransmitted property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The total number of packets that are transmitted. 
     * 
     * @param	long	new TotalPacketsTransmitted property value
     * @exception	Exception	
     */
    @Deprecated
    public void setTotalPacketsTransmitted(long totalPacketsTransmitted) {

    this.totalPacketsTransmitted = totalPacketsTransmitted;
    } // setTotalPacketsTransmitted


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property TotalPacketsReceived. 
     */
    @Deprecated    private long totalPacketsReceived;
    /**
     * This method returns the EthernetAdapter.TotalPacketsReceived property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The total number of packets that are received. 
     * 
     * @return	long	current TotalPacketsReceived property value
     * @exception	Exception	
     */
    @Deprecated
    public long getTotalPacketsReceived(){

    return this.totalPacketsReceived;
    } // getTotalPacketsReceived

    /**
     * This method sets the EthernetAdapter.TotalPacketsReceived property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The total number of packets that are received. 
     * 
     * @param	long	new TotalPacketsReceived property value
     * @exception	Exception	
     */
    @Deprecated
    public void setTotalPacketsReceived(long totalPacketsReceived) {

    this.totalPacketsReceived = totalPacketsReceived;
    } // setTotalPacketsReceived


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AlignmentErrors. 
     */
    @Deprecated    private int alignmentErrors;
    /**
     * This method returns the EthernetAdapter.AlignmentErrors property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of frames that were received on a particular 
     * interface, are not an integral number of octets in length, and do not 
     * pass the FCS check. The count that is represented by an instance of 
     * this object is incremented when the alignment Error status is returned 
     * by the MAC layer to the LLC (or other MAC user). Received frames for 
     * which multiple error conditions obtained are, according to the 
     * conventions of IEEE 802.3 Layer Management, counted exclusively 
     * according to the error status presented to the LLC. 
     * 
     * @return	int	current AlignmentErrors property value
     * @exception	Exception	
     */
    @Deprecated
    public int getAlignmentErrors(){

    return this.alignmentErrors;
    } // getAlignmentErrors

    /**
     * This method sets the EthernetAdapter.AlignmentErrors property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of frames that were received on a particular 
     * interface, are not an integral number of octets in length, and do not 
     * pass the FCS check. The count that is represented by an instance of 
     * this object is incremented when the alignment Error status is returned 
     * by the MAC layer to the LLC (or other MAC user). Received frames for 
     * which multiple error conditions obtained are, according to the 
     * conventions of IEEE 802.3 Layer Management, counted exclusively 
     * according to the error status presented to the LLC. 
     * 
     * @param	int	new AlignmentErrors property value
     * @exception	Exception	
     */
    @Deprecated
    public void setAlignmentErrors(int alignmentErrors) {

    this.alignmentErrors = alignmentErrors;
    } // setAlignmentErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property FCSErrors. 
     */
    @Deprecated    private int fCSErrors;
    /**
     * This method returns the EthernetAdapter.FCSErrors property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of frames that were received on a particular 
     * interface and are an integral number of octets in length, but do not 
     * pass the FCS check. The count represented by an instance of this 
     * object is incremented when the frame CheckError status is returned by 
     * the MAC layer to the LLC (or other MAC user). Received frames for 
     * which multiple error conditions obtained are, according to the 
     * conventions of IEEE 802.3 Layer Management, counted exclusively 
     * according to the error status presented to the LLC. 
     * 
     * @return	int	current FCSErrors property value
     * @exception	Exception	
     */
    @Deprecated
    public int getFCSErrors(){

    return this.fCSErrors;
    } // getFCSErrors

    /**
     * This method sets the EthernetAdapter.FCSErrors property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of frames that were received on a particular 
     * interface and are an integral number of octets in length, but do not 
     * pass the FCS check. The count represented by an instance of this 
     * object is incremented when the frame CheckError status is returned by 
     * the MAC layer to the LLC (or other MAC user). Received frames for 
     * which multiple error conditions obtained are, according to the 
     * conventions of IEEE 802.3 Layer Management, counted exclusively 
     * according to the error status presented to the LLC. 
     * 
     * @param	int	new FCSErrors property value
     * @exception	Exception	
     */
    @Deprecated
    public void setFCSErrors(int fCSErrors) {

    this.fCSErrors = fCSErrors;
    } // setFCSErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SingleCollisionFrames. 
     */
    @Deprecated    private int singleCollisionFrames;
    /**
     * This method returns the EthernetAdapter.SingleCollisionFrames property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of successfully transmitted frames on a 
     * particular interface for which transmission is inhibited by exactly 
     * one collision. A frame that is counted by an instance of this object 
     * is not counted by the corresponding instance of the 
     * MultipleCollisionFrames property. 
     * 
     * @return	int	current SingleCollisionFrames property value
     * @exception	Exception	
     */
    @Deprecated
    public int getSingleCollisionFrames(){

    return this.singleCollisionFrames;
    } // getSingleCollisionFrames

    /**
     * This method sets the EthernetAdapter.SingleCollisionFrames property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of successfully transmitted frames on a 
     * particular interface for which transmission is inhibited by exactly 
     * one collision. A frame that is counted by an instance of this object 
     * is not counted by the corresponding instance of the 
     * MultipleCollisionFrames property. 
     * 
     * @param	int	new SingleCollisionFrames property value
     * @exception	Exception	
     */
    @Deprecated
    public void setSingleCollisionFrames(int singleCollisionFrames) {

    this.singleCollisionFrames = singleCollisionFrames;
    } // setSingleCollisionFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MultipleCollisionFrames. 
     */
    @Deprecated    private int multipleCollisionFrames;
    /**
     * This method returns the EthernetAdapter.MultipleCollisionFrames 
     * property value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of successfully transmitted frames on a 
     * particular interface for which transmission is inhibited by more than 
     * one collision. A frame that is counted by an instance of this object 
     * is not counted by the corresponding instance of the 
     * SingleCollisionFrames property. 
     * 
     * @return	int	current MultipleCollisionFrames property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public int getMultipleCollisionFrames(){

    return this.multipleCollisionFrames;
    } // getMultipleCollisionFrames

    /**
     * This method sets the EthernetAdapter.MultipleCollisionFrames property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of successfully transmitted frames on a 
     * particular interface for which transmission is inhibited by more than 
     * one collision. A frame that is counted by an instance of this object 
     * is not counted by the corresponding instance of the 
     * SingleCollisionFrames property. 
     * 
     * @param	int	new MultipleCollisionFrames property value
     * @exception	Exception	
     */
    @Deprecated
    public void setMultipleCollisionFrames(int multipleCollisionFrames) {

    this.multipleCollisionFrames = multipleCollisionFrames;
    } // setMultipleCollisionFrames


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SQETestErrors. 
     */
    @Deprecated    private int sQETestErrors;
    /**
     * This method returns the EthernetAdapter.SQETestErrors property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of times that the SQE TEST ERROR message is 
     * generated by the PLS sublayer for a particular interface. The SQE TEST 
     * ERROR message is defined in section 7.2.2.2.4 of ANSI/IEEE 802.3-1985 
     * and its generation is described in section 7.2.4.6 of the same 
     * document. 
     * 
     * @return	int	current SQETestErrors property value
     * @exception	Exception	
     */
    @Deprecated
    public int getSQETestErrors(){

    return this.sQETestErrors;
    } // getSQETestErrors

    /**
     * This method sets the EthernetAdapter.SQETestErrors property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of times that the SQE TEST ERROR message is 
     * generated by the PLS sublayer for a particular interface. The SQE TEST 
     * ERROR message is defined in section 7.2.2.2.4 of ANSI/IEEE 802.3-1985 
     * and its generation is described in section 7.2.4.6 of the same 
     * document. 
     * 
     * @param	int	new SQETestErrors property value
     * @exception	Exception	
     */
    @Deprecated
    public void setSQETestErrors(int sQETestErrors) {

    this.sQETestErrors = sQETestErrors;
    } // setSQETestErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DeferredTransmissions. 
     */
    @Deprecated    private int deferredTransmissions;
    /**
     * This method returns the EthernetAdapter.DeferredTransmissions property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of frames for which the first transmission 
     * attempt on a particular interface is delayed because the medium is 
     * busy. The count represented by an instance of this object does not 
     * include the frames that are involved in collisions. 
     * 
     * @return	int	current DeferredTransmissions property value
     * @exception	Exception	
     */
    @Deprecated
    public int getDeferredTransmissions(){

    return this.deferredTransmissions;
    } // getDeferredTransmissions

    /**
     * This method sets the EthernetAdapter.DeferredTransmissions property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of frames for which the first transmission 
     * attempt on a particular interface is delayed because the medium is 
     * busy. The count represented by an instance of this object does not 
     * include the frames that are involved in collisions. 
     * 
     * @param	int	new DeferredTransmissions property value
     * @exception	Exception	
     */
    @Deprecated
    public void setDeferredTransmissions(int deferredTransmissions) {

    this.deferredTransmissions = deferredTransmissions;
    } // setDeferredTransmissions


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property LateCollisions. 
     */
    @Deprecated    private int lateCollisions;
    /**
     * This method returns the EthernetAdapter.LateCollisions property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of times that a collision is detected on a 
     * particular interface later than 512 bit-times into the transmission of 
     * a packet. Five hundred and twelve bit-times corresponds to 51.2 
     * microseconds on a 10 Mbit/s system. A late collision included in a 
     * count that is represented by an instance of this object is also 
     * considered to be a generic collision for purposes of other 
     * collision-related statistics. 
     * 
     * @return	int	current LateCollisions property value
     * @exception	Exception	
     */
    @Deprecated
    public int getLateCollisions(){

    return this.lateCollisions;
    } // getLateCollisions

    /**
     * This method sets the EthernetAdapter.LateCollisions property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of times that a collision is detected on a 
     * particular interface later than 512 bit-times into the transmission of 
     * a packet. Five hundred and twelve bit-times corresponds to 51.2 
     * microseconds on a 10 Mbit/s system. A late collision included in a 
     * count that is represented by an instance of this object is also 
     * considered to be a generic collision for purposes of other 
     * collision-related statistics. 
     * 
     * @param	int	new LateCollisions property value
     * @exception	Exception	
     */
    @Deprecated
    public void setLateCollisions(int lateCollisions) {

    this.lateCollisions = lateCollisions;
    } // setLateCollisions


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ExcessiveCollisions. 
     */
    @Deprecated    private int excessiveCollisions;
    /**
     * This method returns the EthernetAdapter.ExcessiveCollisions property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of frames for which transmission on a particular 
     * interface fails due to excessive collisions. 
     * 
     * @return	int	current ExcessiveCollisions property value
     * @exception	Exception	
     */
    @Deprecated
    public int getExcessiveCollisions(){

    return this.excessiveCollisions;
    } // getExcessiveCollisions

    /**
     * This method sets the EthernetAdapter.ExcessiveCollisions property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of frames for which transmission on a particular 
     * interface fails due to excessive collisions. 
     * 
     * @param	int	new ExcessiveCollisions property value
     * @exception	Exception	
     */
    @Deprecated
    public void setExcessiveCollisions(int excessiveCollisions) {

    this.excessiveCollisions = excessiveCollisions;
    } // setExcessiveCollisions


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property InternalMACTransmitErrors. 
     */
    @Deprecated    private int internalMACTransmitErrors;
    /**
     * This method returns the EthernetAdapter.InternalMACTransmitErrors 
     * property value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of frames for which transmission on a particular 
     * interface fails due to an internal MAC sublayer transmit error. A 
     * frame is counted by an instance of this object only if it is not 
     * counted by the corresponding instance of the LateCollisions property, 
     * the Excessive Collisions property, or the CarrierSenseErrors property. 
     * The precise meaning of the count represented by an instance of this 
     * object is implementation-specific. In particular, an instance of this 
     * object might represent a count of transmission errors on a particular 
     * interface that are not otherwise counted. 
     * 
     * @return	int	current InternalMACTransmitErrors property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public int getInternalMACTransmitErrors(){

    return this.internalMACTransmitErrors;
    } // getInternalMACTransmitErrors

    /**
     * This method sets the EthernetAdapter.InternalMACTransmitErrors property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of frames for which transmission on a particular 
     * interface fails due to an internal MAC sublayer transmit error. A 
     * frame is counted by an instance of this object only if it is not 
     * counted by the corresponding instance of the LateCollisions property, 
     * the Excessive Collisions property, or the CarrierSenseErrors property. 
     * The precise meaning of the count represented by an instance of this 
     * object is implementation-specific. In particular, an instance of this 
     * object might represent a count of transmission errors on a particular 
     * interface that are not otherwise counted. 
     * 
     * @param	int	new InternalMACTransmitErrors property value
     * @exception	Exception	
     */
    @Deprecated
    public void setInternalMACTransmitErrors(int internalMACTransmitErrors) 
	{

    this.internalMACTransmitErrors = internalMACTransmitErrors;
    } // setInternalMACTransmitErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property InternalMACReceiveErrors. 
     */
    @Deprecated    private int internalMACReceiveErrors;
    /**
     * This method returns the EthernetAdapter.InternalMACReceiveErrors 
     * property value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of frames for which reception on a particular 
     * interface fails due to an internal MAC sublayer receive error. A frame 
     * is counted by an instance of this object only if it is not counted by 
     * the corresponding instance of the FrameTooLongs property the 
     * AlignmentErrors property, or the FCSErrors property. The precise 
     * meaning of the count that is represented by an instance of this object 
     * is implementation-specific. In particular, an instance of this object 
     * might represent a count of receive errors on a particular interface 
     * that are not otherwise counted. 
     * 
     * @return	int	current InternalMACReceiveErrors property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public int getInternalMACReceiveErrors(){

    return this.internalMACReceiveErrors;
    } // getInternalMACReceiveErrors

    /**
     * This method sets the EthernetAdapter.InternalMACReceiveErrors property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of frames for which reception on a particular 
     * interface fails due to an internal MAC sublayer receive error. A frame 
     * is counted by an instance of this object only if it is not counted by 
     * the corresponding instance of the FrameTooLongs property the 
     * AlignmentErrors property, or the FCSErrors property. The precise 
     * meaning of the count that is represented by an instance of this object 
     * is implementation-specific. In particular, an instance of this object 
     * might represent a count of receive errors on a particular interface 
     * that are not otherwise counted. 
     * 
     * @param	int	new InternalMACReceiveErrors property value
     * @exception	Exception	
     */
    @Deprecated
    public void setInternalMACReceiveErrors(int internalMACReceiveErrors) {

    this.internalMACReceiveErrors = internalMACReceiveErrors;
    } // setInternalMACReceiveErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property CarrierSenseErrors. 
     */
    @Deprecated    private int carrierSenseErrors;
    /**
     * This method returns the EthernetAdapter.CarrierSenseErrors property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of times that the carrier sense condition was 
     * lost or never asserted when attempting to transmit a frame on a 
     * particular interface. The count represented by an instance of this 
     * object is incremented, at most, once per transmission attempt, even if 
     * the carrier sense condition fluctuates during a transmission attempt. 
     * 
     * @return	int	current CarrierSenseErrors property value
     * @exception	Exception	
     */
    @Deprecated
    public int getCarrierSenseErrors(){

    return this.carrierSenseErrors;
    } // getCarrierSenseErrors

    /**
     * This method sets the EthernetAdapter.CarrierSenseErrors property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The number of times that the carrier sense condition was 
     * lost or never asserted when attempting to transmit a frame on a 
     * particular interface. The count represented by an instance of this 
     * object is incremented, at most, once per transmission attempt, even if 
     * the carrier sense condition fluctuates during a transmission attempt. 
     * 
     * @param	int	new CarrierSenseErrors property value
     * @exception	Exception	
     */
    @Deprecated
    public void setCarrierSenseErrors(int carrierSenseErrors) {

    this.carrierSenseErrors = carrierSenseErrors;
    } // setCarrierSenseErrors


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property FrameTooLongs. 
     */
    @Deprecated    private int frameTooLongs;
    /**
     * This method returns the EthernetAdapter.FrameTooLongs property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of frames that are received on a particular 
     * interface that exceeds the maximum permitted frame size. The count 
     * that is represented by an instance of this object is incremented when 
     * the FrameTooLong status is returned by the MAC layer to the LLC (or 
     * other MAC user). Received frames for which multiple error conditions 
     * obtained are, according to the conventions of IEEE 802.3 Layer 
     * Management, counted exclusively according to the error status 
     * presented to the LLC. 
     * 
     * @return	int	current FrameTooLongs property value
     * @exception	Exception	
     */
    @Deprecated
    public int getFrameTooLongs(){

    return this.frameTooLongs;
    } // getFrameTooLongs

    /**
     * This method sets the EthernetAdapter.FrameTooLongs property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: A count of frames that are received on a particular 
     * interface that exceeds the maximum permitted frame size. The count 
     * that is represented by an instance of this object is incremented when 
     * the FrameTooLong status is returned by the MAC layer to the LLC (or 
     * other MAC user). Received frames for which multiple error conditions 
     * obtained are, according to the conventions of IEEE 802.3 Layer 
     * Management, counted exclusively according to the error status 
     * presented to the LLC. 
     * 
     * @param	int	new FrameTooLongs property value
     * @exception	Exception	
     */
    @Deprecated
    public void setFrameTooLongs(int frameTooLongs) {

    this.frameTooLongs = frameTooLongs;
    } // setFrameTooLongs



} // Class EthernetAdapter
