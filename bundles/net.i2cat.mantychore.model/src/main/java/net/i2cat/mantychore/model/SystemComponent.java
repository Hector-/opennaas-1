/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 15:29:20 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class SystemComponent as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * SystemComponentBean Interface. The CIM class SystemComponent is described 
 * as follows: 
 * 
 * CIM_SystemComponent is a specialization of the CIM_Component association 
 * that establishes 'part of' relationships between a System and any 
 * ManagedSystemElements of which it is composed. Use this association with 
 * caution when using it instead of a subclass such as SystemDevice or a peer 
 * association such as HostedService. This class is very broadly defined, 
 * which can lead to erroneous use. For example, Access Points that are 
 * dependent on (and hosted on) a System are NOT Components of the System. 
 * The System is not made up of any AccessPoint 'parts', which is why a 
 * Dependency association, HostedAccessPoint, was defined. Similarly, a 
 * PhysicalPackage is not a 'part' of a System, because the physical element 
 * exists independently of any internal components, software, and so on. In 
 * fact, again, a Dependency relationship is true where a ComputerSystem is 
 * Dependent on its packaging, as described by the ComputerSystemPackage 
 * association. 
 */
public class SystemComponent extends Component implements Serializable {

    /**
     * This constructor creates a SystemComponentBeanImpl Class which 
     * implements the SystemComponentBean Interface, and encapsulates the CIM 
     * class SystemComponent in a Java Bean. The CIM class SystemComponent is 
     * described as follows: 
     * 
     * CIM_SystemComponent is a specialization of the CIM_Component 
     * association that establishes 'part of' relationships between a System 
     * and any ManagedSystemElements of which it is composed. Use this 
     * association with caution when using it instead of a subclass such as 
     * SystemDevice or a peer association such as HostedService. This class 
     * is very broadly defined, which can lead to erroneous use. For example, 
     * Access Points that are dependent on (and hosted on) a System are NOT 
     * Components of the System. The System is not made up of any AccessPoint 
     * 'parts', which is why a Dependency association, HostedAccessPoint, was 
     * defined. Similarly, a PhysicalPackage is not a 'part' of a System, 
     * because the physical element exists independently of any internal 
     * components, software, and so on. In fact, again, a Dependency 
     * relationship is true where a ComputerSystem is Dependent on its 
     * packaging, as described by the ComputerSystemPackage association. 
     */
    public SystemComponent(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property GroupComponent. 
     */
    private System groupComponent;
    /**
     * This method returns the SystemComponent.GroupComponent property value. 
     * This property is described as follows: 
     * 
     * The parent System in the Association.
     * 
     * @return	CIM_System	current GroupComponent property value
     * @exception	Exception	
     */
    public System getGroupComponent(){

    return (System)groupComponent;
    } // getGroupComponent

    /**
     * This method sets the SystemComponent.GroupComponent property value. 
     * This property is described as follows: 
     * 
     * The parent System in the Association.
     * 
     * @param	CIM_System	new GroupComponent property value
     * @exception	Exception	
     */
    public void setGroupComponent(System groupComponent) {

    this.groupComponent = groupComponent;
    } // setGroupComponent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PartComponent. 
     */
    private ManagedSystemElement partComponent;
    /**
     * This method returns the SystemComponent.PartComponent property value. 
     * This property is described as follows: 
     * 
     * The child element that is a component of a System.
     * 
     * @return	CIM_ManagedSystemElement	current PartComponent 
     * property value 
     * @exception	Exception	
     */
    public ManagedSystemElement getPartComponent(){

    return (ManagedSystemElement)partComponent;
    } // getPartComponent

    /**
     * This method sets the SystemComponent.PartComponent property value. This 
     * property is described as follows: 
     * 
     * The child element that is a component of a System.
     * 
     * @param	CIM_ManagedSystemElement	new PartComponent 
     * property value 
     * @exception	Exception	
     */
    public void setPartComponent(ManagedSystemElement partComponent) {

    this.partComponent = partComponent;
    } // setPartComponent



} // Class SystemComponent
