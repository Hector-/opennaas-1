/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 17 
 * 13:56:59 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class ConcreteIdentity as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * ConcreteIdentityBean Interface. The CIM class ConcreteIdentity is 
 * described as follows: 
 * 
 * CIM_ConcreteIdentity associates two elements that represent different 
 * aspects of the same underlying entity. It is defined as a concrete 
 * subclass of the abstract CIM_LogicalIdentity class, to be used in place of 
 * many specific subclasses of LogicalIdentity that add no semantics, that 
 * is, subclasses that do not clarify the type of identity, update 
 * cardinalities, or add or remove qualifiers. Note that when you define 
 * additional semantics for LogicalIdentity, this class should not be 
 * subclassed. Specific semantics continue to be defined as subclasses of the 
 * abstract CIM_LogicalIdentity. ConcreteIdentity is limited in its use as a 
 * concrete form of a general identity relationship. It was deemed more 
 * prudent to create this concrete subclass than to change LogicalIdentity 
 * from an abstract to a concrete class. LogicalIdentity already had multiple 
 * abstract subclasses in the CIM Schema, and wider industry usage and impact 
 * could not be anticipated. 
 */
public class ConcreteIdentity extends LogicalIdentity implements Serializable 
    {

    /**
     * This constructor creates a ConcreteIdentityBeanImpl Class which 
     * implements the ConcreteIdentityBean Interface, and encapsulates the 
     * CIM class ConcreteIdentity in a Java Bean. The CIM class 
     * ConcreteIdentity is described as follows: 
     * 
     * CIM_ConcreteIdentity associates two elements that represent different 
     * aspects of the same underlying entity. It is defined as a concrete 
     * subclass of the abstract CIM_LogicalIdentity class, to be used in 
     * place of many specific subclasses of LogicalIdentity that add no 
     * semantics, that is, subclasses that do not clarify the type of 
     * identity, update cardinalities, or add or remove qualifiers. Note that 
     * when you define additional semantics for LogicalIdentity, this class 
     * should not be subclassed. Specific semantics continue to be defined as 
     * subclasses of the abstract CIM_LogicalIdentity. ConcreteIdentity is 
     * limited in its use as a concrete form of a general identity 
     * relationship. It was deemed more prudent to create this concrete 
     * subclass than to change LogicalIdentity from an abstract to a concrete 
     * class. LogicalIdentity already had multiple abstract subclasses in the 
     * CIM Schema, and wider industry usage and impact could not be 
     * anticipated. 
     */
    public ConcreteIdentity(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SystemElement. 
     */
    private ManagedElement systemElement;
    /**
     * This method returns the ConcreteIdentity.SystemElement property value. 
     * This property is described as follows: 
     * 
     * One aspect of the ManagedElement. The use of 'System' in the name does 
     * not limit the scope of the association. This name is an artifact of 
     * the original definition of the association. 
     * 
     * @return	CIM_ManagedElement	current SystemElement property 
     * value 
     * @exception	Exception	
     */
    public ManagedElement getSystemElement(){

    return (ManagedElement)systemElement;
    } // getSystemElement

    /**
     * This method sets the ConcreteIdentity.SystemElement property value. 
     * This property is described as follows: 
     * 
     * One aspect of the ManagedElement. The use of 'System' in the name does 
     * not limit the scope of the association. This name is an artifact of 
     * the original definition of the association. 
     * 
     * @param	CIM_ManagedElement	new SystemElement property 
     * value 
     * @exception	Exception	
     */
    public void setSystemElement(ManagedElement systemElement) {

    this.systemElement = systemElement;
    } // setSystemElement


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SameElement. 
     */
    private ManagedElement sameElement;
    /**
     * This method returns the ConcreteIdentity.SameElement property value. 
     * This property is described as follows: 
     * 
     * Another aspect of the ManagedElement.
     * 
     * @return	CIM_ManagedElement	current SameElement property 
     * value 
     * @exception	Exception	
     */
    public ManagedElement getSameElement(){

    return (ManagedElement)sameElement;
    } // getSameElement

    /**
     * This method sets the ConcreteIdentity.SameElement property value. This 
     * property is described as follows: 
     * 
     * Another aspect of the ManagedElement.
     * 
     * @param	CIM_ManagedElement	new SameElement property value
     * @exception	Exception	
     */
    public void setSameElement(ManagedElement sameElement) {

    this.sameElement = sameElement;
    } // setSameElement



} // Class ConcreteIdentity
