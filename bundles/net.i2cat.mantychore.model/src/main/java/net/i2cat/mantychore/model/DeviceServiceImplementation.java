/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 03 
 * 14:18:55 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class DeviceServiceImplementation as well as methods comparable 
 * to the invokeMethods defined for this class. This Class implements the 
 * DeviceServiceImplementationBean Interface. The CIM class 
 * DeviceServiceImplementation is described as follows: 
 * 
 * An association between a Service and how it is implemented. The cardinality 
 * of this association is many-to-many. A Service can be provided by more 
 * than one Logical Device, operating in conjunction. And, any Device can 
 * provide more than one Service. When multiple Devices are associated with a 
 * single Service, it is assumed that these elements operate in conjunction 
 * to provide the Service. If different implementations of a Service exist, 
 * each of these implementations would result in individual instantiations of 
 * the Service object. These individual instantiations would then have 
 * associations to the unique implementations. 
 */
public class DeviceServiceImplementation extends Dependency implements 
    Serializable {

    /**
     * This constructor creates a DeviceServiceImplementationBeanImpl Class 
     * which implements the DeviceServiceImplementationBean Interface, and 
     * encapsulates the CIM class DeviceServiceImplementation in a Java Bean. 
     * The CIM class DeviceServiceImplementation is described as follows: 
     * 
     * An association between a Service and how it is implemented. The 
     * cardinality of this association is many-to-many. A Service can be 
     * provided by more than one Logical Device, operating in conjunction. 
     * And, any Device can provide more than one Service. When multiple 
     * Devices are associated with a single Service, it is assumed that these 
     * elements operate in conjunction to provide the Service. If different 
     * implementations of a Service exist, each of these implementations 
     * would result in individual instantiations of the Service object. These 
     * individual instantiations would then have associations to the unique 
     * implementations. 
     */
    public DeviceServiceImplementation(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Antecedent. 
     */
    private LogicalDevice antecedent;
    /**
     * This method returns the DeviceServiceImplementation.Antecedent property 
     * value. This property is described as follows: 
     * 
     * The LogicalDevice.
     * 
     * @return	CIM_LogicalDevice	current Antecedent property 
     * value 
     * @exception	Exception	
     */
    public LogicalDevice getAntecedent(){

    return (LogicalDevice)antecedent;
    } // getAntecedent

    /**
     * This method sets the DeviceServiceImplementation.Antecedent property 
     * value. This property is described as follows: 
     * 
     * The LogicalDevice.
     * 
     * @param	CIM_LogicalDevice	new Antecedent property value
     * @exception	Exception	
     */
    public void setAntecedent(LogicalDevice antecedent) {

    this.antecedent = antecedent;
    } // setAntecedent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Dependent. 
     */
    private Service dependent;
    /**
     * This method returns the DeviceServiceImplementation.Dependent property 
     * value. This property is described as follows: 
     * 
     * The Service implemented using the Logical Device.
     * 
     * @return	CIM_Service	current Dependent property value
     * @exception	Exception	
     */
    public Service getDependent(){

    return (Service)dependent;
    } // getDependent

    /**
     * This method sets the DeviceServiceImplementation.Dependent property 
     * value. This property is described as follows: 
     * 
     * The Service implemented using the Logical Device.
     * 
     * @param	CIM_Service	new Dependent property value
     * @exception	Exception	
     */
    public void setDependent(Service dependent) {

    this.dependent = dependent;
    } // setDependent



} // Class DeviceServiceImplementation
