/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Nov 29 
 * 11:50:57 CET 2010. 
 */

package net.i2cat.mantychore.model;

import javax.wbem.client.*;
import javax.wbem.cim.*;
import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class OutboundVLAN as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * OutboundVLANBean Interface. The CIM class OutboundVLAN is described as 
 * follows: 
 * 
 * This class is deprecated in lieu or not being necessary to indicate whether 
 * the VLAN is inbound/outbound This association makes explicit the 
 * operational dependencies of a SwitchPort when operating in a VLAN. If 
 * there is no instance of OutboundVLAN between a given SwitchPort and VLAN, 
 * then any packet that has been assigned to the VLAN and whose destination 
 * address is associated with the port will be dropped by the switch without 
 * being transmitted. Otherwise, the packet will be transmitted. 
 */
public class OutboundVLAN extends SAPSAPDependency implements Serializable {

    /**
     * This constructor creates a OutboundVLANBeanImpl Class which implements 
     * the OutboundVLANBean Interface, and encapsulates the CIM class 
     * OutboundVLAN in a Java Bean. The CIM class OutboundVLAN is described 
     * as follows: 
     * 
     * This class is deprecated in lieu or not being necessary to indicate 
     * whether the VLAN is inbound/outbound This association makes explicit 
     * the operational dependencies of a SwitchPort when operating in a VLAN. 
     * If there is no instance of OutboundVLAN between a given SwitchPort and 
     * VLAN, then any packet that has been assigned to the VLAN and whose 
     * destination address is associated with the port will be dropped by the 
     * switch without being transmitted. Otherwise, the packet will be 
     * transmitted. 
     */
    public OutboundVLAN(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Antecedent. 
     */
    @Deprecated    private VLAN antecedent;
    /**
     * This method returns the OutboundVLAN.Antecedent property value. This 
     * property is described as follows: 
     * 
     * The VLAN to which the SwitchPort is assigned.
     * 
     * @return	CIM_VLAN	current Antecedent property value
     * @exception	Exception	
     */
    @Deprecated
    public VLAN getAntecedent(){

    return (VLAN)antecedent;
    } // getAntecedent

    /**
     * This method sets the OutboundVLAN.Antecedent property value. This 
     * property is described as follows: 
     * 
     * The VLAN to which the SwitchPort is assigned.
     * 
     * @param	CIM_VLAN	new Antecedent property value
     * @exception	Exception	
     */
    @Deprecated
    public void setAntecedent(VLAN antecedent) {

    this.antecedent = antecedent;
    } // setAntecedent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Dependent. 
     */
    @Deprecated    private SwitchPort dependent;
    /**
     * This method returns the OutboundVLAN.Dependent property value. This 
     * property is described as follows: 
     * 
     * The SwitchPort on the VLAN.
     * 
     * @return	CIM_SwitchPort	current Dependent property value
     * @exception	Exception	
     */
    @Deprecated
    public SwitchPort getDependent(){

    return (SwitchPort)dependent;
    } // getDependent

    /**
     * This method sets the OutboundVLAN.Dependent property value. This 
     * property is described as follows: 
     * 
     * The SwitchPort on the VLAN.
     * 
     * @param	CIM_SwitchPort	new Dependent property value
     * @exception	Exception	
     */
    @Deprecated
    public void setDependent(SwitchPort dependent) {

    this.dependent = dependent;
    } // setDependent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Tagged. 
     */
    @Deprecated    private boolean tagged;
    /**
     * This method returns the OutboundVLAN.Tagged property value. This 
     * property is described as follows: 
     * 
     * If Tagged is TRUE, then the packet will be transmitted in encapsulated 
     * form, tagged with the associated VLAN tag. If Tagged is FALSE, the 
     * packet will be trasmitted without any VLAN tag. 
     * 
     * @return	boolean	current Tagged property value
     * @exception	Exception	
     */
    @Deprecated
    public boolean isTagged(){

    return this.tagged;
    } // getTagged

    /**
     * This method sets the OutboundVLAN.Tagged property value. This property 
     * is described as follows: 
     * 
     * If Tagged is TRUE, then the packet will be transmitted in encapsulated 
     * form, tagged with the associated VLAN tag. If Tagged is FALSE, the 
     * packet will be trasmitted without any VLAN tag. 
     * 
     * @param	boolean	new Tagged property value
     * @exception	Exception	
     */
    @Deprecated
    public void setTagged(boolean tagged) {

    this.tagged = tagged;
    } // setTagged



} // Class OutboundVLAN
