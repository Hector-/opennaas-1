/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 10:54:51 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class DeviceSAPImplementation as well as methods comparable to 
 * the invokeMethods defined for this class. This Class implements the 
 * DeviceSAPImplementationBean Interface. The CIM class 
 * DeviceSAPImplementation is described as follows: 
 * 
 * An association between a ServiceAccessPoint (SAP) and how it is 
 * implemented. The cardinality of this association is many-to-many. A SAP 
 * can be provided by more than one LogicalDevice, operating in conjunction. 
 * And, any Device can provide more than one ServiceAccessPoint. When many 
 * LogicalDevices are associated with a single SAP, it is assumed that these 
 * elements operate in conjunction to provide the AccessPoint. If different 
 * implementations of a SAP exist, each of these implementations would result 
 * in individual instantiations of the ServiceAccessPoint object. These 
 * individual instantiations would then have associations to the unique 
 * implementations. 
 */
public class DeviceSAPImplementation extends Dependency implements 
    Serializable {

    /**
     * This constructor creates a DeviceSAPImplementationBeanImpl Class which 
     * implements the DeviceSAPImplementationBean Interface, and encapsulates 
     * the CIM class DeviceSAPImplementation in a Java Bean. The CIM class 
     * DeviceSAPImplementation is described as follows: 
     * 
     * An association between a ServiceAccessPoint (SAP) and how it is 
     * implemented. The cardinality of this association is many-to-many. A 
     * SAP can be provided by more than one LogicalDevice, operating in 
     * conjunction. And, any Device can provide more than one 
     * ServiceAccessPoint. When many LogicalDevices are associated with a 
     * single SAP, it is assumed that these elements operate in conjunction 
     * to provide the AccessPoint. If different implementations of a SAP 
     * exist, each of these implementations would result in individual 
     * instantiations of the ServiceAccessPoint object. These individual 
     * instantiations would then have associations to the unique 
     * implementations. 
     */
    public DeviceSAPImplementation(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Antecedent. 
     */
    private LogicalDevice antecedent;
    /**
     * This method returns the DeviceSAPImplementation.Antecedent property 
     * value. This property is described as follows: 
     * 
     * The LogicalDevice.
     * 
     * @return	CIM_LogicalDevice	current Antecedent property 
     * value 
     * @exception	Exception	
     */
    public LogicalDevice getAntecedent(){

    return (LogicalDevice)antecedent;
    } // getAntecedent

    /**
     * This method sets the DeviceSAPImplementation.Antecedent property value. 
     * This property is described as follows: 
     * 
     * The LogicalDevice.
     * 
     * @param	CIM_LogicalDevice	new Antecedent property value
     * @exception	Exception	
     */
    public void setAntecedent(LogicalDevice antecedent) {

    this.antecedent = antecedent;
    } // setAntecedent


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Dependent. 
     */
    private ServiceAccessPoint dependent;
    /**
     * This method returns the DeviceSAPImplementation.Dependent property 
     * value. This property is described as follows: 
     * 
     * The ServiceAccessPoint implemented using the LogicalDevice.
     * 
     * @return	CIM_ServiceAccessPoint	current Dependent property 
     * value 
     * @exception	Exception	
     */
    public ServiceAccessPoint getDependent(){

    return (ServiceAccessPoint)dependent;
    } // getDependent

    /**
     * This method sets the DeviceSAPImplementation.Dependent property value. 
     * This property is described as follows: 
     * 
     * The ServiceAccessPoint implemented using the LogicalDevice.
     * 
     * @param	CIM_ServiceAccessPoint	new Dependent property 
     * value 
     * @exception	Exception	
     */
    public void setDependent(ServiceAccessPoint dependent) {

    this.dependent = dependent;
    } // setDependent



} // Class DeviceSAPImplementation
