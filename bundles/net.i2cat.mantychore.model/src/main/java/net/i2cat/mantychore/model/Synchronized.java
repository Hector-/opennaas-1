/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class Synchronized as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * SynchronizedBean Interface. The CIM class Synchronized is described as 
 * follows: 
 * 
 * Indicates that two ManagedElements were aligned or made to be equivalent at 
 * the specified point in time. If the Boolean property SyncMaintained is 
 * true, then synchronization of the Elements is preserved. Both like and 
 * unlike objects can be synchronized. For example, two WatchDog timers can 
 * be aligned, or the contents of a LogicalFile can be synchronized with the 
 * contents of a StorageExtent. 
 */
    @Entity
public class Synchronized extends Association implements Serializable {

    /**
     * This constructor creates a SynchronizedBeanImpl Class which implements 
     * the SynchronizedBean Interface, and encapsulates the CIM class 
     * Synchronized in a Java Bean. The CIM class Synchronized is described 
     * as follows: 
     * 
     * Indicates that two ManagedElements were aligned or made to be 
     * equivalent at the specified point in time. If the Boolean property 
     * SyncMaintained is true, then synchronization of the Elements is 
     * preserved. Both like and unlike objects can be synchronized. For 
     * example, two WatchDog timers can be aligned, or the contents of a 
     * LogicalFile can be synchronized with the contents of a StorageExtent. 
     */
    public Synchronized(){};
    /**
     * This method create an Association of the type Synchronized between one 
     * ManagedElement object and ManagedElement object 
     */
    public Association link(ManagedElement systemElement,ManagedElement 
	syncedElement){

    return super.link(Synchronized.class,systemElement,syncedElement);
    }//link
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property WhenSynced. 
     */
    private Date whenSynced;
    /**
     * This method returns the Synchronized.whenSynced property value. This 
     * property is described as follows: 
     * 
     * The point in time that the Elements were synchronized.
     * 
     * @return	Date	current whenSynced property value
     * @exception	Exception	
     */
    public Date getwhenSynced(){

    return this.whenSynced;
    } // getwhenSynced

    /**
     * This method sets the Synchronized.whenSynced property value. This 
     * property is described as follows: 
     * 
     * The point in time that the Elements were synchronized.
     * 
     * @param	Date	new whenSynced property value
     * @exception	Exception	
     */
    public void setwhenSynced(Date whenSynced) {

    this.whenSynced = whenSynced;
    } // setwhenSynced


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SyncMaintained. 
     */
    private boolean syncMaintained;
    /**
     * This method returns the Synchronized.syncMaintained property value. 
     * This property is described as follows: 
     * 
     * Boolean indicating whether synchronization is maintained.
     * 
     * @return	boolean	current syncMaintained property value
     * @exception	Exception	
     */
    public boolean issyncMaintained(){

    return this.syncMaintained;
    } // getsyncMaintained

    /**
     * This method sets the Synchronized.syncMaintained property value. This 
     * property is described as follows: 
     * 
     * Boolean indicating whether synchronization is maintained.
     * 
     * @param	boolean	new syncMaintained property value
     * @exception	Exception	
     */
    public void setsyncMaintained(boolean syncMaintained) {

    this.syncMaintained = syncMaintained;
    } // setsyncMaintained



} // Class Synchronized
