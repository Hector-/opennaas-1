/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class ParametersForMethod as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * ParametersForMethodBean Interface. The CIM class ParametersForMethod is 
 * described as follows: 
 * 
 * ParametersForMethod represents the association between MethodParameters 
 * classes and a ManagedElement that has a method that can use the 
 * MethodParameters during its invocation. This association is optional. The 
 * Method Parameters instance can be passed as a parameter to a method or 
 * used to create a method signature before the method is invoked. This 
 * association is useful for finding all the valid MethodParameters instances 
 * for a particular method. It might be particularly useful for user-oriented 
 * interfaces and automated or policy driven method invocations. 
 */
    @Entity
public class ParametersForMethod extends Association implements Serializable 
    {

    /**
     * This constructor creates a ParametersForMethodBeanImpl Class which 
     * implements the ParametersForMethodBean Interface, and encapsulates the 
     * CIM class ParametersForMethod in a Java Bean. The CIM class 
     * ParametersForMethod is described as follows: 
     * 
     * ParametersForMethod represents the association between MethodParameters 
     * classes and a ManagedElement that has a method that can use the 
     * MethodParameters during its invocation. This association is optional. 
     * The Method Parameters instance can be passed as a parameter to a 
     * method or used to create a method signature before the method is 
     * invoked. This association is useful for finding all the valid 
     * MethodParameters instances for a particular method. It might be 
     * particularly useful for user-oriented interfaces and automated or 
     * policy driven method invocations. 
     */
    public ParametersForMethod(){};
    /**
     * This method create an Association of the type ParametersForMethod 
     * between one MethodParameters object and ManagedElement object 
     */
    public Association link(MethodParameters parameters,ManagedElement 
	theMethod){

    return super.link(ParametersForMethod.class,parameters,theMethod);
    }//link
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MethodName. 
     */
    private String methodName;
    /**
     * This method returns the ParametersForMethod.methodName property value. 
     * This property is described as follows: 
     * 
     * The name of the method that can use the referenced instance of 
     * MethodParameters during its invocation. 
     * 
     * @return	String	current methodName property value
     * @exception	Exception	
     */
    public String getmethodName(){

    return this.methodName;
    } // getmethodName

    /**
     * This method sets the ParametersForMethod.methodName property value. 
     * This property is described as follows: 
     * 
     * The name of the method that can use the referenced instance of 
     * MethodParameters during its invocation. 
     * 
     * @param	String	new methodName property value
     * @exception	Exception	
     */
    public void setmethodName(String methodName) {

    this.methodName = methodName;
    } // setmethodName



} // Class ParametersForMethod
