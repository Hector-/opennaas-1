/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Fri Dec 03 
 * 14:18:55 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class ParametersForMethod as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * ParametersForMethodBean Interface. The CIM class ParametersForMethod is 
 * described as follows: 
 * 
 * ParametersForMethod represents the association between MethodParameters 
 * classes and a ManagedElement that has a method that can use the 
 * MethodParameters during its invocation. This association is optional. The 
 * Method Parameters instance can be passed as a parameter to a method or 
 * used to create a method signature before the method is invoked. This 
 * association is useful for finding all the valid MethodParameters instances 
 * for a particular method. It might be particularly useful for user-oriented 
 * interfaces and automated or policy driven method invocations. 
 */
public class ParametersForMethod  implements Serializable {

    /**
     * This constructor creates a ParametersForMethodBeanImpl Class which 
     * implements the ParametersForMethodBean Interface, and encapsulates the 
     * CIM class ParametersForMethod in a Java Bean. The CIM class 
     * ParametersForMethod is described as follows: 
     * 
     * ParametersForMethod represents the association between MethodParameters 
     * classes and a ManagedElement that has a method that can use the 
     * MethodParameters during its invocation. This association is optional. 
     * The Method Parameters instance can be passed as a parameter to a 
     * method or used to create a method signature before the method is 
     * invoked. This association is useful for finding all the valid 
     * MethodParameters instances for a particular method. It might be 
     * particularly useful for user-oriented interfaces and automated or 
     * policy driven method invocations. 
     */
    public ParametersForMethod(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Parameters. 
     */
    private MethodParameters parameters;
    /**
     * This method returns the ParametersForMethod.Parameters property value. 
     * This property is described as follows: 
     * 
     * The MethodParameters instance, which can be used by the 
     * ParametersForMethod's method invocation. 
     * 
     * @return	CIM_MethodParameters	current Parameters property 
     * value 
     * @exception	Exception	
     */
    public MethodParameters getParameters(){

    return this.parameters;
    } // getParameters

    /**
     * This method sets the ParametersForMethod.Parameters property value. 
     * This property is described as follows: 
     * 
     * The MethodParameters instance, which can be used by the 
     * ParametersForMethod's method invocation. 
     * 
     * @param	CIM_MethodParameters	new Parameters property value
     * @exception	Exception	
     */
    public void setParameters(MethodParameters parameters) {

    this.parameters = parameters;
    } // setParameters


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property TheMethod. 
     */
    private ManagedElement theMethod;
    /**
     * This method returns the ParametersForMethod.TheMethod property value. 
     * This property is described as follows: 
     * 
     * The ManagedElement that has a method that can use this instance of 
     * MethodParameters. 
     * 
     * @return	CIM_ManagedElement	current TheMethod property 
     * value 
     * @exception	Exception	
     */
    public ManagedElement getTheMethod(){

    return this.theMethod;
    } // getTheMethod

    /**
     * This method sets the ParametersForMethod.TheMethod property value. This 
     * property is described as follows: 
     * 
     * The ManagedElement that has a method that can use this instance of 
     * MethodParameters. 
     * 
     * @param	CIM_ManagedElement	new TheMethod property value
     * @exception	Exception	
     */
    public void setTheMethod(ManagedElement theMethod) {

    this.theMethod = theMethod;
    } // setTheMethod


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property MethodName. 
     */
    private String methodName;
    /**
     * This method returns the ParametersForMethod.MethodName property value. 
     * This property is described as follows: 
     * 
     * The name of the method that can use the referenced instance of 
     * MethodParameters during its invocation. 
     * 
     * @return	String	current MethodName property value
     * @exception	Exception	
     */
    public String getMethodName(){

    return this.methodName;
    } // getMethodName

    /**
     * This method sets the ParametersForMethod.MethodName property value. 
     * This property is described as follows: 
     * 
     * The name of the method that can use the referenced instance of 
     * MethodParameters during its invocation. 
     * 
     * @param	String	new MethodName property value
     * @exception	Exception	
     */
    public void setMethodName(String methodName) {

    this.methodName = methodName;
    } // setMethodName



} // Class ParametersForMethod
