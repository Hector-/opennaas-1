/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class Job as well as methods comparable to the invokeMethods 
 * defined for this class. This Class implements the JobBean Interface. The 
 * CIM class Job is described as follows: 
 * 
 * A Job is a LogicalElement that represents an executing unit of work, such 
 * as a script or a print job. A Job is distinct from a Process in that a Job 
 * can be scheduled or queued, and its execution is not limited to a single 
 * system. 
 */
    @Entity
public class Job extends LogicalElement implements Serializable {

    /**
     * This constructor creates a JobBeanImpl Class which implements the 
     * JobBean Interface, and encapsulates the CIM class Job in a Java Bean. 
     * The CIM class Job is described as follows: 
     * 
     * A Job is a LogicalElement that represents an executing unit of work, 
     * such as a script or a print job. A Job is distinct from a Process in 
     * that a Job can be scheduled or queued, and its execution is not 
     * limited to a single system. 
     */
    protected Job(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property JobStatus. 
     */
    private String jobStatus;
    /**
     * This method returns the Job.jobStatus property value. This property is 
     * described as follows: 
     * 
     * A free-form string that represents the status of the job. The primary 
     * status is reflected in the inherited OperationalStatus property. 
     * JobStatus provides additional, implementation-specific details. 
     * 
     * @return	String	current jobStatus property value
     * @exception	Exception	
     */
    public String getjobStatus(){

    return this.jobStatus;
    } // getjobStatus

    /**
     * This method sets the Job.jobStatus property value. This property is 
     * described as follows: 
     * 
     * A free-form string that represents the status of the job. The primary 
     * status is reflected in the inherited OperationalStatus property. 
     * JobStatus provides additional, implementation-specific details. 
     * 
     * @param	String	new jobStatus property value
     * @exception	Exception	
     */
    public void setjobStatus(String jobStatus) {

    this.jobStatus = jobStatus;
    } // setjobStatus


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property TimeSubmitted. 
     */
    private Date timeSubmitted;
    /**
     * This method returns the Job.timeSubmitted property value. This property 
     * is described as follows: 
     * 
     * The time that the Job was submitted to execute. A value of all zeroes 
     * indicates that the owning element is not capable of reporting a date 
     * and time. Therefore, the ScheduledStartTime and StartTime are reported 
     * as intervals relative to the time their values are requested. 
     * 
     * @return	Date	current timeSubmitted property value
     * @exception	Exception	
     */
    public Date gettimeSubmitted(){

    return this.timeSubmitted;
    } // gettimeSubmitted

    /**
     * This method sets the Job.timeSubmitted property value. This property is 
     * described as follows: 
     * 
     * The time that the Job was submitted to execute. A value of all zeroes 
     * indicates that the owning element is not capable of reporting a date 
     * and time. Therefore, the ScheduledStartTime and StartTime are reported 
     * as intervals relative to the time their values are requested. 
     * 
     * @param	Date	new timeSubmitted property value
     * @exception	Exception	
     */
    public void settimeSubmitted(Date timeSubmitted) {

    this.timeSubmitted = timeSubmitted;
    } // settimeSubmitted


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ScheduledStartTime. 
     */
    @Deprecated    private Date scheduledStartTime;
    /**
     * This method returns the Job.scheduledStartTime property value. This 
     * property is described as follows: 
     * 
     * The time that the current Job is scheduled to start. This time can be 
     * represented by the actual date and time, or an interval relative to 
     * the time that this property is requested. A value of all zeroes 
     * indicates that the Job is already executing. The property is 
     * deprecated in lieu of the more expressive scheduling properties, 
     * RunMonth, RunDay, RunDayOfWeek, and RunStartInterval. 
     * 
     * @return	Date	current scheduledStartTime property value
     * @exception	Exception	
     */
    @Deprecated
    public Date getscheduledStartTime(){

    return this.scheduledStartTime;
    } // getscheduledStartTime

    /**
     * This method sets the Job.scheduledStartTime property value. This 
     * property is described as follows: 
     * 
     * The time that the current Job is scheduled to start. This time can be 
     * represented by the actual date and time, or an interval relative to 
     * the time that this property is requested. A value of all zeroes 
     * indicates that the Job is already executing. The property is 
     * deprecated in lieu of the more expressive scheduling properties, 
     * RunMonth, RunDay, RunDayOfWeek, and RunStartInterval. 
     * 
     * @param	Date	new scheduledStartTime property value
     * @exception	Exception	
     */
    @Deprecated
    public void setscheduledStartTime(Date scheduledStartTime) {

    this.scheduledStartTime = scheduledStartTime;
    } // setscheduledStartTime


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property StartTime. 
     */
    private Date startTime;
    /**
     * This method returns the Job.startTime property value. This property is 
     * described as follows: 
     * 
     * The time that the Job was actually started. This time can be 
     * represented by an actual date and time, or by an interval relative to 
     * the time that this property is requested. Note that this property is 
     * also present in the JobProcessingStatistics class. This class is 
     * necessary to capture the processing information for recurring Jobs, 
     * because only the 'last' run time can be stored in this single-valued 
     * property. 
     * 
     * @return	Date	current startTime property value
     * @exception	Exception	
     */
    public Date getstartTime(){

    return this.startTime;
    } // getstartTime

    /**
     * This method sets the Job.startTime property value. This property is 
     * described as follows: 
     * 
     * The time that the Job was actually started. This time can be 
     * represented by an actual date and time, or by an interval relative to 
     * the time that this property is requested. Note that this property is 
     * also present in the JobProcessingStatistics class. This class is 
     * necessary to capture the processing information for recurring Jobs, 
     * because only the 'last' run time can be stored in this single-valued 
     * property. 
     * 
     * @param	Date	new startTime property value
     * @exception	Exception	
     */
    public void setstartTime(Date startTime) {

    this.startTime = startTime;
    } // setstartTime


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ElapsedTime. 
     */
    private Date elapsedTime;
    /**
     * This method returns the Job.elapsedTime property value. This property 
     * is described as follows: 
     * 
     * The time interval that the Job has been executing or the total 
     * execution time if the Job is complete. Note that this property is also 
     * present in the JobProcessingStatistics class. This class is necessary 
     * to capture the processing information for recurring Jobs, because only 
     * the 'last' run time can be stored in this single-valued property. 
     * 
     * @return	Date	current elapsedTime property value
     * @exception	Exception	
     */
    public Date getelapsedTime(){

    return this.elapsedTime;
    } // getelapsedTime

    /**
     * This method sets the Job.elapsedTime property value. This property is 
     * described as follows: 
     * 
     * The time interval that the Job has been executing or the total 
     * execution time if the Job is complete. Note that this property is also 
     * present in the JobProcessingStatistics class. This class is necessary 
     * to capture the processing information for recurring Jobs, because only 
     * the 'last' run time can be stored in this single-valued property. 
     * 
     * @param	Date	new elapsedTime property value
     * @exception	Exception	
     */
    public void setelapsedTime(Date elapsedTime) {

    this.elapsedTime = elapsedTime;
    } // setelapsedTime


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property JobRunTimes. 
     */
    private long jobRunTimes;
    /**
     * This method returns the Job.jobRunTimes property value. This property 
     * is described as follows: 
     * 
     * The number of times that the Job should be run. A value of 1 indicates 
     * that the Job is not recurring, while any non-zero value indicates a 
     * limit to the number of times that the Job will recur. Zero indicates 
     * that there is no limit to the number of times that the Job can be 
     * processed, but that it is terminated either after the UntilTime or by 
     * manual intervention. By default, a Job is processed once. 
     * 
     * @return	long	current jobRunTimes property value
     * @exception	Exception	
     */
    public long getjobRunTimes(){

    return this.jobRunTimes;
    } // getjobRunTimes

    /**
     * This method sets the Job.jobRunTimes property value. This property is 
     * described as follows: 
     * 
     * The number of times that the Job should be run. A value of 1 indicates 
     * that the Job is not recurring, while any non-zero value indicates a 
     * limit to the number of times that the Job will recur. Zero indicates 
     * that there is no limit to the number of times that the Job can be 
     * processed, but that it is terminated either after the UntilTime or by 
     * manual intervention. By default, a Job is processed once. 
     * 
     * @param	long	new jobRunTimes property value
     * @exception	Exception	
     */
    public void setjobRunTimes(long jobRunTimes) {

    this.jobRunTimes = jobRunTimes;
    } // setjobRunTimes


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RunMonth. 
     */

    public enum RunMonth{
    JANUARY,
    FEBRUARY,
    MARCH,
    APRIL,
    MAY,
    JUNE,
    JULY,
    AUGUST,
    SEPTEMBER,
    OCTOBER,
    NOVEMBER,
    DECEMBER
    }
    private RunMonth runMonth;
    /**
     * This method returns the Job.RunMonth property value. This property is 
     * described as follows: 
     * 
     * The month during which the Job should be processed. Specify 0 for 
     * January, 1 for February, and so on. 
     * 
     * @return	short	current RunMonth property value
     * @exception	Exception	
     */
    public RunMonth getRunMonth(){

    return this.runMonth;
    } // getRunMonth

    /**
     * This method sets the Job.RunMonth property value. This property is 
     * described as follows: 
     * 
     * The month during which the Job should be processed. Specify 0 for 
     * January, 1 for February, and so on. 
     * 
     * @param	short	new RunMonth property value
     * @exception	Exception	
     */
    public void setRunMonth(RunMonth runMonth){

    this.runMonth = runMonth;
    } // setRunMonth


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RunDay. 
     */
    private Byte runDay;
    /**
     * This method returns the Job.runDay property value. This property is 
     * described as follows: 
     * 
     * The day in the month on which the Job should be processed. There are 
     * two different interpretations for this property, depending on the 
     * value of DayOfWeek. In one case, RunDay defines the day-in-month on 
     * which the Job is processed. This interpretation is used when the 
     * DayOfWeek is 0. A positive or negative integer indicates whether the 
     * RunDay should be calculated from the beginning or end of the month. 
     * For example, 5 indicates the fifth day in the RunMonth and -1 
     * indicates the last day in the RunMonth. When RunDayOfWeek is not 0, 
     * RunDay is the day-in-month on which the Job is processed, defined in 
     * conjunction with RunDayOfWeek. For example, if RunDay is 15 and 
     * RunDayOfWeek is Saturday, then the Job is processed on the first 
     * Saturday on or after the 15th day in the RunMonth (for example, the 
     * third Saturday in the month). If RunDay is 20 and RunDayOfWeek is 
     * -Saturday, then this indicates the first Saturday on or before the 
     * 20th day in the RunMonth. If RunDay is -1 and RunDayOfWeek is -Sunday, 
     * then this indicates the last Sunday in the RunMonth. 
     * 
     * @return	Byte	current runDay property value
     * @exception	Exception	
     */
    public Byte getrunDay(){

    return this.runDay;
    } // getrunDay

    /**
     * This method sets the Job.runDay property value. This property is 
     * described as follows: 
     * 
     * The day in the month on which the Job should be processed. There are 
     * two different interpretations for this property, depending on the 
     * value of DayOfWeek. In one case, RunDay defines the day-in-month on 
     * which the Job is processed. This interpretation is used when the 
     * DayOfWeek is 0. A positive or negative integer indicates whether the 
     * RunDay should be calculated from the beginning or end of the month. 
     * For example, 5 indicates the fifth day in the RunMonth and -1 
     * indicates the last day in the RunMonth. When RunDayOfWeek is not 0, 
     * RunDay is the day-in-month on which the Job is processed, defined in 
     * conjunction with RunDayOfWeek. For example, if RunDay is 15 and 
     * RunDayOfWeek is Saturday, then the Job is processed on the first 
     * Saturday on or after the 15th day in the RunMonth (for example, the 
     * third Saturday in the month). If RunDay is 20 and RunDayOfWeek is 
     * -Saturday, then this indicates the first Saturday on or before the 
     * 20th day in the RunMonth. If RunDay is -1 and RunDayOfWeek is -Sunday, 
     * then this indicates the last Sunday in the RunMonth. 
     * 
     * @param	Byte	new runDay property value
     * @exception	Exception	
     */
    public void setrunDay(Byte runDay) {

    this.runDay = runDay;
    } // setrunDay


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RunDayOfWeek. 
     */

    public enum RunDayOfWeek{
    SATURDAY,
    FRIDAY,
    THURSDAY,
    WEDNESDAY,
    TUESDAY,
    MONDAY,
    SUNDAY,
    EXACTDAYOFMONTH,
    SUNDAY1,
    MONDAY1,
    TUESDAY1,
    WEDNESDAY1,
    THURSDAY1,
    FRIDAY1,
    SATURDAY1
    }
    private RunDayOfWeek runDayOfWeek;
    /**
     * This method returns the Job.RunDayOfWeek property value. This property 
     * is described as follows: 
     * 
     * A positive or negative integer used in conjunction with RunDay to 
     * indicate the day of the week on which the Job is processed. 
     * RunDayOfWeek is set to 0 to indicate an exact day of the month, such 
     * as March 1. A positive integer (representing Sunday, Monday, ..., 
     * Saturday) means that the day of week is found on or after the 
     * specified RunDay. A negative integer (representing -Sunday, -Monday, 
     * ..., -Saturday) means that the day of week is found on or BEFORE the 
     * RunDay. 
     * 
     * @return	Byte	current RunDayOfWeek property value
     * @exception	Exception	
     */
    public RunDayOfWeek getRunDayOfWeek(){

    return this.runDayOfWeek;
    } // getRunDayOfWeek

    /**
     * This method sets the Job.RunDayOfWeek property value. This property is 
     * described as follows: 
     * 
     * A positive or negative integer used in conjunction with RunDay to 
     * indicate the day of the week on which the Job is processed. 
     * RunDayOfWeek is set to 0 to indicate an exact day of the month, such 
     * as March 1. A positive integer (representing Sunday, Monday, ..., 
     * Saturday) means that the day of week is found on or after the 
     * specified RunDay. A negative integer (representing -Sunday, -Monday, 
     * ..., -Saturday) means that the day of week is found on or BEFORE the 
     * RunDay. 
     * 
     * @param	Byte	new RunDayOfWeek property value
     * @exception	Exception	
     */
    public void setRunDayOfWeek(RunDayOfWeek runDayOfWeek){

    this.runDayOfWeek = runDayOfWeek;
    } // setRunDayOfWeek


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RunStartInterval. 
     */
    private Date runStartInterval;
    /**
     * This method returns the Job.runStartInterval property value. This 
     * property is described as follows: 
     * 
     * The time interval after midnight when the Job should be processed. For 
     * example, 00000000020000.000000:000 indicates that the Job should be 
     * run on or after two o'clock, local time or UTC time (distinguished 
     * using the LocalOrUtcTime property. 
     * 
     * @return	Date	current runStartInterval property value
     * @exception	Exception	
     */
    public Date getrunStartInterval(){

    return this.runStartInterval;
    } // getrunStartInterval

    /**
     * This method sets the Job.runStartInterval property value. This property 
     * is described as follows: 
     * 
     * The time interval after midnight when the Job should be processed. For 
     * example, 00000000020000.000000:000 indicates that the Job should be 
     * run on or after two o'clock, local time or UTC time (distinguished 
     * using the LocalOrUtcTime property. 
     * 
     * @param	Date	new runStartInterval property value
     * @exception	Exception	
     */
    public void setrunStartInterval(Date runStartInterval) {

    this.runStartInterval = runStartInterval;
    } // setrunStartInterval


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property LocalOrUtcTime. 
     */

    public enum LocalOrUtcTime{
    LOCAL_TIME,
    UTC_TIME
    }
    private LocalOrUtcTime localOrUtcTime;
    /**
     * This method returns the Job.LocalOrUtcTime property value. This 
     * property is described as follows: 
     * 
     * This property indicates whether the times represented in the 
     * RunStartInterval and UntilTime properties represent local times or UTC 
     * times. Time values are synchronized worldwide by using the enumeration 
     * value 2, "UTC Time". 
     * 
     * @return	int	current LocalOrUtcTime property value
     * @exception	Exception	
     */
    public LocalOrUtcTime getLocalOrUtcTime(){

    return this.localOrUtcTime;
    } // getLocalOrUtcTime

    /**
     * This method sets the Job.LocalOrUtcTime property value. This property 
     * is described as follows: 
     * 
     * This property indicates whether the times represented in the 
     * RunStartInterval and UntilTime properties represent local times or UTC 
     * times. Time values are synchronized worldwide by using the enumeration 
     * value 2, "UTC Time". 
     * 
     * @param	int	new LocalOrUtcTime property value
     * @exception	Exception	
     */
    public void setLocalOrUtcTime(LocalOrUtcTime localOrUtcTime){

    this.localOrUtcTime = localOrUtcTime;
    } // setLocalOrUtcTime


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property UntilTime. 
     */
    private Date untilTime;
    /**
     * This method returns the Job.untilTime property value. This property is 
     * described as follows: 
     * 
     * The time after which the Job is invalid or should be stopped. This time 
     * can be represented by an actual date and time, or by an interval 
     * relative to the time that this property is requested. A value of all 
     * nines indicates that the Job can run indefinitely. 
     * 
     * @return	Date	current untilTime property value
     * @exception	Exception	
     */
    public Date getuntilTime(){

    return this.untilTime;
    } // getuntilTime

    /**
     * This method sets the Job.untilTime property value. This property is 
     * described as follows: 
     * 
     * The time after which the Job is invalid or should be stopped. This time 
     * can be represented by an actual date and time, or by an interval 
     * relative to the time that this property is requested. A value of all 
     * nines indicates that the Job can run indefinitely. 
     * 
     * @param	Date	new untilTime property value
     * @exception	Exception	
     */
    public void setuntilTime(Date untilTime) {

    this.untilTime = untilTime;
    } // setuntilTime


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Notify. 
     */
    private String notify;
    /**
     * This method returns the Job.notify property value. This property is 
     * described as follows: 
     * 
     * The User who is to be notified upon the Job completion or failure.
     * 
     * @return	String	current notify property value
     * @exception	Exception	
     */
    public String getnotify(){

    return this.notify;
    } // getnotify

    /**
     * This method sets the Job.notify property value. This property is 
     * described as follows: 
     * 
     * The User who is to be notified upon the Job completion or failure.
     * 
     * @param	String	new notify property value
     * @exception	Exception	
     */
    public void setnotify(String notify) {

    this.notify = notify;
    } // setnotify


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Owner. 
     */
    private String owner;
    /**
     * This method returns the Job.owner property value. This property is 
     * described as follows: 
     * 
     * The User that submitted the Job, or the Service or method name that 
     * caused the job to be created. 
     * 
     * @return	String	current owner property value
     * @exception	Exception	
     */
    public String getowner(){

    return this.owner;
    } // getowner

    /**
     * This method sets the Job.owner property value. This property is 
     * described as follows: 
     * 
     * The User that submitted the Job, or the Service or method name that 
     * caused the job to be created. 
     * 
     * @param	String	new owner property value
     * @exception	Exception	
     */
    public void setowner(String owner) {

    this.owner = owner;
    } // setowner


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Priority. 
     */
    private long priority;
    /**
     * This method returns the Job.priority property value. This property is 
     * described as follows: 
     * 
     * Indicates the urgency or importance of execution of the Job. The lower 
     * the number, the higher the priority. Note that this property is also 
     * present in the JobProcessingStatistics class. This class is necessary 
     * to capture the setting information that would influence the results of 
     * a job. 
     * 
     * @return	long	current priority property value
     * @exception	Exception	
     */
    public long getpriority(){

    return this.priority;
    } // getpriority

    /**
     * This method sets the Job.priority property value. This property is 
     * described as follows: 
     * 
     * Indicates the urgency or importance of execution of the Job. The lower 
     * the number, the higher the priority. Note that this property is also 
     * present in the JobProcessingStatistics class. This class is necessary 
     * to capture the setting information that would influence the results of 
     * a job. 
     * 
     * @param	long	new priority property value
     * @exception	Exception	
     */
    public void setpriority(long priority) {

    this.priority = priority;
    } // setpriority


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PercentComplete. 
     */
    private int percentComplete;
    /**
     * This method returns the Job.percentComplete property value. This 
     * property is described as follows: 
     * 
     * The percentage of the job that has completed at the time that this 
     * value is requested. Note that this property is also present in the 
     * JobProcessingStatistics class. This class is necessary to capture the 
     * processing information for recurring Jobs, because only the 'last' run 
     * data can be stored in this single-valued property. Note that the value 
     * 101 is undefined and will be not be allowed in the next major revision 
     * of the specification. 
     * 
     * @return	int	current percentComplete property value
     * @exception	Exception	
     */
    public int getpercentComplete(){

    return this.percentComplete;
    } // getpercentComplete

    /**
     * This method sets the Job.percentComplete property value. This property 
     * is described as follows: 
     * 
     * The percentage of the job that has completed at the time that this 
     * value is requested. Note that this property is also present in the 
     * JobProcessingStatistics class. This class is necessary to capture the 
     * processing information for recurring Jobs, because only the 'last' run 
     * data can be stored in this single-valued property. Note that the value 
     * 101 is undefined and will be not be allowed in the next major revision 
     * of the specification. 
     * 
     * @param	int	new percentComplete property value
     * @exception	Exception	
     */
    public void setpercentComplete(int percentComplete) {

    this.percentComplete = percentComplete;
    } // setpercentComplete


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property DeleteOnCompletion. 
     */
    private boolean deleteOnCompletion;
    /**
     * This method returns the Job.deleteOnCompletion property value. This 
     * property is described as follows: 
     * 
     * Indicates whether or not the job should be automatically deleted upon 
     * completion. Note that the 'completion' of a recurring job is defined 
     * by its JobRunTimes or UntilTime properties, or when the Job is 
     * terminated by manual intervention. If this property is set to false 
     * and the job completes, then the extrinsic method DeleteInstance must 
     * be used to delete the job instead of updating this property. 
     * 
     * @return	boolean	current deleteOnCompletion property value
     * @exception	Exception	
     */
    public boolean isdeleteOnCompletion(){

    return this.deleteOnCompletion;
    } // getdeleteOnCompletion

    /**
     * This method sets the Job.deleteOnCompletion property value. This 
     * property is described as follows: 
     * 
     * Indicates whether or not the job should be automatically deleted upon 
     * completion. Note that the 'completion' of a recurring job is defined 
     * by its JobRunTimes or UntilTime properties, or when the Job is 
     * terminated by manual intervention. If this property is set to false 
     * and the job completes, then the extrinsic method DeleteInstance must 
     * be used to delete the job instead of updating this property. 
     * 
     * @param	boolean	new deleteOnCompletion property value
     * @exception	Exception	
     */
    public void setdeleteOnCompletion(boolean deleteOnCompletion) {

    this.deleteOnCompletion = deleteOnCompletion;
    } // setdeleteOnCompletion


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ErrorCode. 
     */
    private int errorCode;
    /**
     * This method returns the Job.errorCode property value. This property is 
     * described as follows: 
     * 
     * A vendor-specific error code. The value must be set to zero if the Job 
     * completed without error. Note that this property is also present in 
     * the JobProcessingStatistics class. This class is necessary to capture 
     * the processing information for recurring Jobs, because only the 'last' 
     * run error can be stored in this single-valued property. 
     * 
     * @return	int	current errorCode property value
     * @exception	Exception	
     */
    public int geterrorCode(){

    return this.errorCode;
    } // geterrorCode

    /**
     * This method sets the Job.errorCode property value. This property is 
     * described as follows: 
     * 
     * A vendor-specific error code. The value must be set to zero if the Job 
     * completed without error. Note that this property is also present in 
     * the JobProcessingStatistics class. This class is necessary to capture 
     * the processing information for recurring Jobs, because only the 'last' 
     * run error can be stored in this single-valued property. 
     * 
     * @param	int	new errorCode property value
     * @exception	Exception	
     */
    public void seterrorCode(int errorCode) {

    this.errorCode = errorCode;
    } // seterrorCode


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ErrorDescription. 
     */
    private String errorDescription;
    /**
     * This method returns the Job.errorDescription property value. This 
     * property is described as follows: 
     * 
     * A free-form string that contains the vendor error description. Note 
     * that this property is also present in the JobProcessingStatistics 
     * class. This class is necessary to capture the processing information 
     * for recurring Jobs, because only the 'last' run error can be stored in 
     * this single-valued property. 
     * 
     * @return	String	current errorDescription property value
     * @exception	Exception	
     */
    public String geterrorDescription(){

    return this.errorDescription;
    } // geterrorDescription

    /**
     * This method sets the Job.errorDescription property value. This property 
     * is described as follows: 
     * 
     * A free-form string that contains the vendor error description. Note 
     * that this property is also present in the JobProcessingStatistics 
     * class. This class is necessary to capture the processing information 
     * for recurring Jobs, because only the 'last' run error can be stored in 
     * this single-valued property. 
     * 
     * @param	String	new errorDescription property value
     * @exception	Exception	
     */
    public void seterrorDescription(String errorDescription) {

    this.errorDescription = errorDescription;
    } // seterrorDescription


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property RecoveryAction. 
     */

    public enum RecoveryAction{
    UNKNOWN,
    OTHER,
    DO_NOT_CONTINUE,
    CONTINUE_WITH_NEXT_JOB,
    RE_RUN_JOB,
    RUN_RECOVERY_JOB
    }
    private RecoveryAction recoveryAction;
    /**
     * This method returns the Job.RecoveryAction property value. This 
     * property is described as follows: 
     * 
     * Describes the recovery action to be taken for an unsuccessfully run 
     * Job. The possible values are: 0 = "Unknown", meaning it is unknown as 
     * to what recovery action to take 1 = "Other", indicating that the 
     * recovery action will be specified in the OtherRecoveryAction property 
     * 2 = "Do Not Continue", meaning stop the execution of the job and 
     * appropriately update its status 3 = "Continue With Next Job", meaning 
     * continue with the next job in the queue 4 = "Re-run Job", indicating 
     * that the job should be re-run 5 = "Run Recovery Job", meaning run the 
     * Job associated using the RecoveryJob relationship. Note that the 
     * recovery Job must already be in the queue from which it will run. 
     * 
     * @return	int	current RecoveryAction property value
     * @exception	Exception	
     */
    public RecoveryAction getRecoveryAction(){

    return this.recoveryAction;
    } // getRecoveryAction

    /**
     * This method sets the Job.RecoveryAction property value. This property 
     * is described as follows: 
     * 
     * Describes the recovery action to be taken for an unsuccessfully run 
     * Job. The possible values are: 0 = "Unknown", meaning it is unknown as 
     * to what recovery action to take 1 = "Other", indicating that the 
     * recovery action will be specified in the OtherRecoveryAction property 
     * 2 = "Do Not Continue", meaning stop the execution of the job and 
     * appropriately update its status 3 = "Continue With Next Job", meaning 
     * continue with the next job in the queue 4 = "Re-run Job", indicating 
     * that the job should be re-run 5 = "Run Recovery Job", meaning run the 
     * Job associated using the RecoveryJob relationship. Note that the 
     * recovery Job must already be in the queue from which it will run. 
     * 
     * @param	int	new RecoveryAction property value
     * @exception	Exception	
     */
    public void setRecoveryAction(RecoveryAction recoveryAction){

    this.recoveryAction = recoveryAction;
    } // setRecoveryAction


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherRecoveryAction. 
     */
    private String otherRecoveryAction;
    /**
     * This method returns the Job.otherRecoveryAction property value. This 
     * property is described as follows: 
     * 
     * A string describing the recovery action when the RecoveryAction 
     * property of the instance is 1 ("Other"). 
     * 
     * @return	String	current otherRecoveryAction property value
     * @exception	Exception	
     */
    public String getotherRecoveryAction(){

    return this.otherRecoveryAction;
    } // getotherRecoveryAction

    /**
     * This method sets the Job.otherRecoveryAction property value. This 
     * property is described as follows: 
     * 
     * A string describing the recovery action when the RecoveryAction 
     * property of the instance is 1 ("Other"). 
     * 
     * @param	String	new otherRecoveryAction property value
     * @exception	Exception	
     */
    public void setotherRecoveryAction(String otherRecoveryAction) {

    this.otherRecoveryAction = otherRecoveryAction;
    } // setotherRecoveryAction



} // Class Job
