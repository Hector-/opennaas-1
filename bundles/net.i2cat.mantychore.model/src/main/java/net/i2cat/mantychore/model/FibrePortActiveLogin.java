/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Mon Jan 03 
 * 16:22:03 CET 2011. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import javax.persistence.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class FibrePortActiveLogin as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * FibrePortActiveLoginBean Interface. The CIM class FibrePortActiveLogin is 
 * described as follows: 
 * 
 * Note: The use of FibrePortActiveLogin is deprecated because FibrePort is 
 * deprecated. Deprecated description: Information for FibrePortActiveLogin 
 * is found by examining the individual FCPorts, and an ActiveConnection 
 * between the FCProtocolEndpoints that are associated with the ports. 
 * FibrePortActiveLogin indicates that two FibrePorts are connected through a 
 * login and have negotiated their Class Of Service, frame size, and other 
 * link characteristics, as specified by an instance of this class. 
 */
    @Deprecated
    @Entity
public class FibrePortActiveLogin extends Association implements Serializable 
    {

    /**
     * This constructor creates a FibrePortActiveLoginBeanImpl Class which 
     * implements the FibrePortActiveLoginBean Interface, and encapsulates 
     * the CIM class FibrePortActiveLogin in a Java Bean. The CIM class 
     * FibrePortActiveLogin is described as follows: 
     * 
     * Note: The use of FibrePortActiveLogin is deprecated because FibrePort 
     * is deprecated. Deprecated description: Information for 
     * FibrePortActiveLogin is found by examining the individual FCPorts, and 
     * an ActiveConnection between the FCProtocolEndpoints that are 
     * associated with the ports. FibrePortActiveLogin indicates that two 
     * FibrePorts are connected through a login and have negotiated their 
     * Class Of Service, frame size, and other link characteristics, as 
     * specified by an instance of this class. 
     */
    public FibrePortActiveLogin(){};
    /**
     * This method create an Association of the type FibrePortActiveLogin 
     * between one FibrePort object and FibrePort object 
     */
    @Deprecated
    public Association link(FibrePort loginOriginator,FibrePort 
	loginResponder){

    return 
	super.link(FibrePortActiveLogin.class,loginOriginator,loginResponder);
    }//link
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property NegotiatedCOS. 
     */
    @Deprecated
    public enum NegotiatedCOS{
    UNKNOWN,
    _1,
    _2,
    _3,
    _4,
    _6,
    F
    }
    @Deprecated
    private NegotiatedCOS negotiatedCOS;
    /**
     * This method returns the FibrePortActiveLogin.NegotiatedCOS property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The Fibre Channel Class of Service that is currently 
     * running between the Ports. Because two Ports can be simultaneously 
     * connected at different Classes of Service, this property had to be 
     * part of the key of the object and therefore, the identity of the 
     * instance. 
     * 
     * @return	int	current NegotiatedCOS property value
     * @exception	Exception	
     */
    @Deprecated
    public NegotiatedCOS getNegotiatedCOS(){

    return this.negotiatedCOS;
    } // getNegotiatedCOS

    /**
     * This method sets the FibrePortActiveLogin.NegotiatedCOS property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The Fibre Channel Class of Service that is currently 
     * running between the Ports. Because two Ports can be simultaneously 
     * connected at different Classes of Service, this property had to be 
     * part of the key of the object and therefore, the identity of the 
     * instance. 
     * 
     * @param	int	new NegotiatedCOS property value
     * @exception	Exception	
     */
    @Deprecated
    public void setNegotiatedCOS(NegotiatedCOS negotiatedCOS){

    this.negotiatedCOS = negotiatedCOS;
    } // setNegotiatedCOS


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property NegotiatedFrameSize. 
     */
    @Deprecated    private long negotiatedFrameSize;
    /**
     * This method returns the FibrePortActiveLogin.negotiatedFrameSize 
     * property value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The Fibre Channel frame size, in bytes, that is currently 
     * negotiated between the two Ports. 
     * 
     * @return	long	current negotiatedFrameSize property value
     * @exception	Exception	
     */
    @Deprecated
    public long getnegotiatedFrameSize(){

    return this.negotiatedFrameSize;
    } // getnegotiatedFrameSize

    /**
     * This method sets the FibrePortActiveLogin.negotiatedFrameSize property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The Fibre Channel frame size, in bytes, that is currently 
     * negotiated between the two Ports. 
     * 
     * @param	long	new negotiatedFrameSize property value
     * @exception	Exception	
     */
    @Deprecated
    public void setnegotiatedFrameSize(long negotiatedFrameSize) {

    this.negotiatedFrameSize = negotiatedFrameSize;
    } // setnegotiatedFrameSize


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property NegotiatedSpeed. 
     */
    @Deprecated    private long negotiatedSpeed;
    /**
     * This method returns the FibrePortActiveLogin.negotiatedSpeed property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The speed for communications that is currently negotiated 
     * between the two Ports. Speed is specified in Bits per Second. If this 
     * information is not available, the property should be set to 0. 
     * 
     * @return	long	current negotiatedSpeed property value
     * @exception	Exception	
     */
    @Deprecated
    public long getnegotiatedSpeed(){

    return this.negotiatedSpeed;
    } // getnegotiatedSpeed

    /**
     * This method sets the FibrePortActiveLogin.negotiatedSpeed property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The speed for communications that is currently negotiated 
     * between the two Ports. Speed is specified in Bits per Second. If this 
     * information is not available, the property should be set to 0. 
     * 
     * @param	long	new negotiatedSpeed property value
     * @exception	Exception	
     */
    @Deprecated
    public void setnegotiatedSpeed(long negotiatedSpeed) {

    this.negotiatedSpeed = negotiatedSpeed;
    } // setnegotiatedSpeed


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ACKModel. 
     */
    @Deprecated
    public enum ACKModel{
    UNKNOWN,
    ACK_0,
    ACK_1,
    ACK_N
    }
    @Deprecated
    private ACKModel aCKModel;
    /**
     * This method returns the FibrePortActiveLogin.ACKModel property value. 
     * This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Acknowledgement model that is negotiated during Port 
     * login. For example, ACK-1 indicates that each frame should be 
     * acknowledged. 
     * 
     * @return	int	current ACKModel property value
     * @exception	Exception	
     */
    @Deprecated
    public ACKModel getACKModel(){

    return this.aCKModel;
    } // getACKModel

    /**
     * This method sets the FibrePortActiveLogin.ACKModel property value. This 
     * property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: Acknowledgement model that is negotiated during Port 
     * login. For example, ACK-1 indicates that each frame should be 
     * acknowledged. 
     * 
     * @param	int	new ACKModel property value
     * @exception	Exception	
     */
    @Deprecated
    public void setACKModel(ACKModel aCKModel){

    this.aCKModel = aCKModel;
    } // setACKModel


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property BufferToBufferModel. 
     */
    @Deprecated
    public enum BufferToBufferModel{
    UNKNOWN,
    REGULAR,
    ALTERNATE
    }
    @Deprecated
    private BufferToBufferModel bufferToBufferModel;
    /**
     * This method returns the FibrePortActiveLogin.BufferToBufferModel 
     * property value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The buffer-to-buffer model that was negotiated during 
     * Port login. Either the model defined by the FC-PH standard is used 
     * (value=1, "Regular") or an "Alternate" model is negotiated. 
     * 
     * @return	int	current BufferToBufferModel property value
     * @exception	Exception	
     */
    @Deprecated
    public BufferToBufferModel getBufferToBufferModel(){

    return this.bufferToBufferModel;
    } // getBufferToBufferModel

    /**
     * This method sets the FibrePortActiveLogin.BufferToBufferModel property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: The buffer-to-buffer model that was negotiated during 
     * Port login. Either the model defined by the FC-PH standard is used 
     * (value=1, "Regular") or an "Alternate" model is negotiated. 
     * 
     * @param	int	new BufferToBufferModel property value
     * @exception	Exception	
     */
    @Deprecated
    public void setBufferToBufferModel(BufferToBufferModel 
	bufferToBufferModel){

    this.bufferToBufferModel = bufferToBufferModel;
    } // setBufferToBufferModel


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OriginatorBufferCredit. 
     */
    @Deprecated    private long originatorBufferCredit;
    /**
     * This method returns the FibrePortActiveLogin.originatorBufferCredit 
     * property value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: OriginatorBufferCredit reflects the buffer credit of the 
     * Port that is defined as the LoginOriginator. This method is the number 
     * of frame buffers that were made available by the originating Port to 
     * the responder Port. Buffer credits are used in point-to- point 
     * connections, when an NL-Local Port is logged into another NL-Local 
     * Port, and when Nx Ports are logged into Fx Ports. In other scenarios, 
     * this value is undefined. 
     * 
     * @return	long	current originatorBufferCredit property 
     * value 
     * @exception	Exception	
     */
    @Deprecated
    public long getoriginatorBufferCredit(){

    return this.originatorBufferCredit;
    } // getoriginatorBufferCredit

    /**
     * This method sets the FibrePortActiveLogin.originatorBufferCredit 
     * property value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: OriginatorBufferCredit reflects the buffer credit of the 
     * Port that is defined as the LoginOriginator. This method is the number 
     * of frame buffers that were made available by the originating Port to 
     * the responder Port. Buffer credits are used in point-to- point 
     * connections, when an NL-Local Port is logged into another NL-Local 
     * Port, and when Nx Ports are logged into Fx Ports. In other scenarios, 
     * this value is undefined. 
     * 
     * @param	long	new originatorBufferCredit property value
     * @exception	Exception	
     */
    @Deprecated
    public void setoriginatorBufferCredit(long originatorBufferCredit) {

    this.originatorBufferCredit = originatorBufferCredit;
    } // setoriginatorBufferCredit


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ResponderBufferCredit. 
     */
    @Deprecated    private long responderBufferCredit;
    /**
     * This method returns the FibrePortActiveLogin.responderBufferCredit 
     * property value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: ResponderBufferCredit reflects the buffer credit of the 
     * Port that is defined as the LoginResponder. This method is the number 
     * of frame buffers that were made available by the responder Port to the 
     * originating Port. Buffer credits are used in point-to-point 
     * connections, when an NL-Local Port is logged into another NL-Local 
     * Port, and when Nx Ports are logged into Fx Ports. In other scenarios, 
     * this value is undefined. 
     * 
     * @return	long	current responderBufferCredit property value
     * @exception	Exception	
     */
    @Deprecated
    public long getresponderBufferCredit(){

    return this.responderBufferCredit;
    } // getresponderBufferCredit

    /**
     * This method sets the FibrePortActiveLogin.responderBufferCredit 
     * property value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: ResponderBufferCredit reflects the buffer credit of the 
     * Port that is defined as the LoginResponder. This method is the number 
     * of frame buffers that were made available by the responder Port to the 
     * originating Port. Buffer credits are used in point-to-point 
     * connections, when an NL-Local Port is logged into another NL-Local 
     * Port, and when Nx Ports are logged into Fx Ports. In other scenarios, 
     * this value is undefined. 
     * 
     * @param	long	new responderBufferCredit property value
     * @exception	Exception	
     */
    @Deprecated
    public void setresponderBufferCredit(long responderBufferCredit) {

    this.responderBufferCredit = responderBufferCredit;
    } // setresponderBufferCredit


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OriginatorEndCredit. 
     */
    @Deprecated    private long originatorEndCredit;
    /**
     * This method returns the FibrePortActiveLogin.originatorEndCredit 
     * property value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: OriginatorEndCredit reflects the end credit of the Port 
     * that is defined as the LoginOriginator. This method is the number of 
     * frame buffers that were made available by the originating Port to the 
     * responder Port. End credits are used in point-to-point connections, 
     * when an NL-Local Port is logged into another NL-Local Port, and when 
     * Nx Ports are logged into remote Nx Ports. In other scenarios, this 
     * value is undefined. 
     * 
     * @return	long	current originatorEndCredit property value
     * @exception	Exception	
     */
    @Deprecated
    public long getoriginatorEndCredit(){

    return this.originatorEndCredit;
    } // getoriginatorEndCredit

    /**
     * This method sets the FibrePortActiveLogin.originatorEndCredit property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: OriginatorEndCredit reflects the end credit of the Port 
     * that is defined as the LoginOriginator. This method is the number of 
     * frame buffers that were made available by the originating Port to the 
     * responder Port. End credits are used in point-to-point connections, 
     * when an NL-Local Port is logged into another NL-Local Port, and when 
     * Nx Ports are logged into remote Nx Ports. In other scenarios, this 
     * value is undefined. 
     * 
     * @param	long	new originatorEndCredit property value
     * @exception	Exception	
     */
    @Deprecated
    public void setoriginatorEndCredit(long originatorEndCredit) {

    this.originatorEndCredit = originatorEndCredit;
    } // setoriginatorEndCredit


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property ResponderEndCredit. 
     */
    @Deprecated    private long responderEndCredit;
    /**
     * This method returns the FibrePortActiveLogin.responderEndCredit 
     * property value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: ResponderEndCredit reflects the end credit of the Port 
     * that is defined as the LoginResponder. This method is the number of 
     * frame buffers that were made available by the responder Port to the 
     * originating Port. End credits are used in point-to-point connections, 
     * when an NL-Local Port is logged into another NL-Local Port, and when 
     * Nx Ports are logged into remote Nx Ports. In other scenarios, this 
     * value is undefined. 
     * 
     * @return	long	current responderEndCredit property value
     * @exception	Exception	
     */
    @Deprecated
    public long getresponderEndCredit(){

    return this.responderEndCredit;
    } // getresponderEndCredit

    /**
     * This method sets the FibrePortActiveLogin.responderEndCredit property 
     * value. This property is described as follows: 
     * 
     * Note: The use of this method has been deprecated. Deprecated 
     * description: ResponderEndCredit reflects the end credit of the Port 
     * that is defined as the LoginResponder. This method is the number of 
     * frame buffers that were made available by the responder Port to the 
     * originating Port. End credits are used in point-to-point connections, 
     * when an NL-Local Port is logged into another NL-Local Port, and when 
     * Nx Ports are logged into remote Nx Ports. In other scenarios, this 
     * value is undefined. 
     * 
     * @param	long	new responderEndCredit property value
     * @exception	Exception	
     */
    @Deprecated
    public void setresponderEndCredit(long responderEndCredit) {

    this.responderEndCredit = responderEndCredit;
    } // setresponderEndCredit



} // Class FibrePortActiveLogin
