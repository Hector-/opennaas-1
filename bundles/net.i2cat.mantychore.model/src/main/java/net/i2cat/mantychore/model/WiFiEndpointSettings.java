/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Nov 30 
 * 15:29:20 CET 2010. 
 */

package net.i2cat.mantychore.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined 
 * in the CIM class WiFiEndpointSettings as well as methods comparable to the 
 * invokeMethods defined for this class. This Class implements the 
 * WiFiEndpointSettingsBean Interface. The CIM class WiFiEndpointSettings is 
 * described as follows: 
 * 
 * CIM_WiFiEndpointSettings describes setting data that can be applied to an 
 * instance of CIM_WiFiEndpoint to enable it to associate to a particular 
 * Wi-Fi network. 
 */
public class WiFiEndpointSettings extends SettingData implements Serializable 
    {

    /**
     * This constructor creates a WiFiEndpointSettingsBeanImpl Class which 
     * implements the WiFiEndpointSettingsBean Interface, and encapsulates 
     * the CIM class WiFiEndpointSettings in a Java Bean. The CIM class 
     * WiFiEndpointSettings is described as follows: 
     * 
     * CIM_WiFiEndpointSettings describes setting data that can be applied to 
     * an instance of CIM_WiFiEndpoint to enable it to associate to a 
     * particular Wi-Fi network. 
     */
    public WiFiEndpointSettings(){};
    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Priority. 
     */
    private Byte priority;
    /**
     * This method returns the WiFiEndpointSettings.Priority property value. 
     * This property is described as follows: 
     * 
     * Priority shall indicate the priority of the instance among all 
     * WiFiEndpointSettings instances. 
     * 
     * @return	Byte	current Priority property value
     * @exception	Exception	
     */
    public Byte getPriority(){

    return this.priority;
    } // getPriority

    /**
     * This method sets the WiFiEndpointSettings.Priority property value. This 
     * property is described as follows: 
     * 
     * Priority shall indicate the priority of the instance among all 
     * WiFiEndpointSettings instances. 
     * 
     * @param	Byte	new Priority property value
     * @exception	Exception	
     */
    public void setPriority(Byte priority) {

    this.priority = priority;
    } // setPriority


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property SSID. 
     */
    private String sSID;
    /**
     * This method returns the WiFiEndpointSettings.SSID property value. This 
     * property is described as follows: 
     * 
     * SSID shall indicate the Service Set Identifier (SSID) that shall be 
     * used when the settings are applied to a WiFiEndpoint. An SSID 
     * identifies a wireless network. 
     * 
     * @return	String	current SSID property value
     * @exception	Exception	
     */
    public String getSSID(){

    return this.sSID;
    } // getSSID

    /**
     * This method sets the WiFiEndpointSettings.SSID property value. This 
     * property is described as follows: 
     * 
     * SSID shall indicate the Service Set Identifier (SSID) that shall be 
     * used when the settings are applied to a WiFiEndpoint. An SSID 
     * identifies a wireless network. 
     * 
     * @param	String	new SSID property value
     * @exception	Exception	
     */
    public void setSSID(String sSID) {

    this.sSID = sSID;
    } // setSSID


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property BSSType. 
     */

    public enum BSSType{
    UNKNOWN,
    INDEPENDENT,
    INFRASTRUCTURE,
    DMTF_RESERVED
    }
 public BSSType bSSType;
    /**
     * This method returns the WiFiEndpointSettings.BSSType property value. 
     * This property is described as follows: 
     * 
     * BSSType shall indicate the Basic Service Set (BSS) Type that shall be 
     * used when the settings are applied. A Basic Service Set is a set of 
     * stations controlled by a single coordination function. 	* 
     * Independent: the WiFiEndpoint is associated directly to another client 
     * station. 	* Infrastructure: the WiFiEndpoint is associated to a 
     * network via an access point. 
     * 
     * @return	short	current BSSType property value
     * @exception	Exception	
     */
    public BSSType getBSSType(){

    return this.bSSType;
    } // getBSSType

    /**
     * This method sets the WiFiEndpointSettings.BSSType property value. This 
     * property is described as follows: 
     * 
     * BSSType shall indicate the Basic Service Set (BSS) Type that shall be 
     * used when the settings are applied. A Basic Service Set is a set of 
     * stations controlled by a single coordination function. 	* 
     * Independent: the WiFiEndpoint is associated directly to another client 
     * station. 	* Infrastructure: the WiFiEndpoint is associated to a 
     * network via an access point. 
     * 
     * @param	short	new BSSType property value
     * @exception	Exception	
     */
    public void setBSSType(BSSType bSSType){

    this.bSSType = bSSType;
    } // setBSSType


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property EncryptionMethod. 
     */

    public enum EncryptionMethod{
    OTHER,
    WEP,
    TKIP,
    CCMP,
    NONE,
    DMTF_RESERVED
    }
 public EncryptionMethod encryptionMethod;
    /**
     * This method returns the WiFiEndpointSettings.EncryptionMethod property 
     * value. This property is described as follows: 
     * 
     * EncryptionMethod shall specify the 802.11 encryption method used when 
     * the settings are applied. 	* Other (1): shall indicate that the 
     * desired encryption method is not specified in the list below. If this 
     * value is used, OtherEncryptionMethod should not be NULL and should not 
     * be empty. 	* WEP (2): shall indicate that the desired 
     * encryption method is Wired Equivalency Privacy (WEP). This value 
     * should be used only if AuthenticationMethod contains 2 ("Open System") 
     * or 3 ("Shared Key"). 	* TKIP (3): shall indicate that the 
     * desired encryption method is Temporal Key Integrity Protocol (TKIP). 
     * This value should be used only if AuthenticationMethod contains 4 
     * ("WPA PSK"), 5 ("WPA IEEE 802.1x"), 6 ("WPA2 PSK"), or 7 
     * ("WPA2 IEEE 802.1x"). 	* CCMP (4): shall indicate that the 
     * desired encryption method is Counter Mode with Cipher Block Chaining 
     * Message Authentication Code Protocol (CCMP). This value should be used 
     * only if AuthenticationMethod contains 4 ("WPA PSK"), 5 
     * ("WPA IEEE 802.1x"), 6 ("WPA2 PSK"), or 7 ("WPA2 IEEE 802.1x"). 
     * 	* None (5): shall indicate that no encryption is desired. This 
     * value should be used only if AuthenticationMethod contains 2 
     * ("Open System") or 3 ("Shared Key"). 
     * 
     * @return	short	current EncryptionMethod property value
     * @exception	Exception	
     */
    public EncryptionMethod getEncryptionMethod(){

    return this.encryptionMethod;
    } // getEncryptionMethod

    /**
     * This method sets the WiFiEndpointSettings.EncryptionMethod property 
     * value. This property is described as follows: 
     * 
     * EncryptionMethod shall specify the 802.11 encryption method used when 
     * the settings are applied. 	* Other (1): shall indicate that the 
     * desired encryption method is not specified in the list below. If this 
     * value is used, OtherEncryptionMethod should not be NULL and should not 
     * be empty. 	* WEP (2): shall indicate that the desired 
     * encryption method is Wired Equivalency Privacy (WEP). This value 
     * should be used only if AuthenticationMethod contains 2 ("Open System") 
     * or 3 ("Shared Key"). 	* TKIP (3): shall indicate that the 
     * desired encryption method is Temporal Key Integrity Protocol (TKIP). 
     * This value should be used only if AuthenticationMethod contains 4 
     * ("WPA PSK"), 5 ("WPA IEEE 802.1x"), 6 ("WPA2 PSK"), or 7 
     * ("WPA2 IEEE 802.1x"). 	* CCMP (4): shall indicate that the 
     * desired encryption method is Counter Mode with Cipher Block Chaining 
     * Message Authentication Code Protocol (CCMP). This value should be used 
     * only if AuthenticationMethod contains 4 ("WPA PSK"), 5 
     * ("WPA IEEE 802.1x"), 6 ("WPA2 PSK"), or 7 ("WPA2 IEEE 802.1x"). 
     * 	* None (5): shall indicate that no encryption is desired. This 
     * value should be used only if AuthenticationMethod contains 2 
     * ("Open System") or 3 ("Shared Key"). 
     * 
     * @param	short	new EncryptionMethod property value
     * @exception	Exception	
     */
    public void setEncryptionMethod(EncryptionMethod encryptionMethod){

    this.encryptionMethod = encryptionMethod;
    } // setEncryptionMethod


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherEncryptionMethod. 
     */
    private String otherEncryptionMethod;
    /**
     * This method returns the WiFiEndpointSettings.OtherEncryptionMethod 
     * property value. This property is described as follows: 
     * 
     * OtherEncryptionMethod shall specify the 802.11 encryption method used 
     * when the settings are applied if and only if EncryptionMethod contains 
     * "Other". The format of this string shall be vendor-specific. 
     * 
     * @return	String	current OtherEncryptionMethod property 
     * value 
     * @exception	Exception	
     */
    public String getOtherEncryptionMethod(){

    return this.otherEncryptionMethod;
    } // getOtherEncryptionMethod

    /**
     * This method sets the WiFiEndpointSettings.OtherEncryptionMethod 
     * property value. This property is described as follows: 
     * 
     * OtherEncryptionMethod shall specify the 802.11 encryption method used 
     * when the settings are applied if and only if EncryptionMethod contains 
     * "Other". The format of this string shall be vendor-specific. 
     * 
     * @param	String	new OtherEncryptionMethod property value
     * @exception	Exception	
     */
    public void setOtherEncryptionMethod(String otherEncryptionMethod) {

    this.otherEncryptionMethod = otherEncryptionMethod;
    } // setOtherEncryptionMethod


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property AuthenticationMethod. 
     */

    public enum AuthenticationMethod{
    OTHER,
    OPEN_SYSTEM,
    SHARED_KEY,
    WPA_PSK,
    WPA_IEEE_802_1X,
    WPA2_PSK,
    WPA2_IEEE_802_1X,
    DMTF_RESERVED
    }
 public AuthenticationMethod authenticationMethod;
    /**
     * This method returns the WiFiEndpointSettings.AuthenticationMethod 
     * property value. This property is described as follows: 
     * 
     * AuthenticationMethod shall specify the 802.11 authentication method 
     * used when the settings are applied. 	* Other (1): shall 
     * indicate that the desired authentication method is not specified in 
     * the list below. If AuthenticationMethod contains 1, 
     * OtherAuthenticationMethod should not be NULL and should not be empty. 
     * 	* Open System (2): shall indicate that the desired 
     * authentication method is Open System. AuthenticationMethod should 
     * contain 2 only if EncryptionMethod contains 2 ("WEP") or 5 ("None"). 
     * 	* Shared Key (3): shall indicate that the desired 
     * authentication method is Shared Key. AuthenticationMethod should 
     * contain 3 only if EncryptionMethod contains 2 ("WEP") or 5 ("None"). 
     * 	* WPA PSK (4): shall indicate that the desired authentication 
     * method is WPA (Wi-Fi Protected Access) PSK (Pre-Shared Key). 
     * AuthenticationMethod should contain 4 only if EncryptionMethod 
     * contains 3 ("TKIP") or 4 ("CCMP"). 	* WPA IEEE 802.1x (5): 
     * shall indicate that the desired authentication method is WPA (Wi-Fi 
     * Protected Access) IEEE 802.1x. AuthenticationMethod should contain 5 
     * only if EncryptionMethod contains 3 ("TKIP") or 4 ("CCMP"). 	* 
     * WPA2 PSK (6): shall indicate that the desired authentication method is 
     * WPA2 (Wi-Fi Protected Access Version 2) PSK (Pre-Shared Key). 
     * AuthenticationMethod should containt 6 only if EncryptionMethod 
     * contains 3 ("TKIP") or 4 ("CCMP"). 	* WPA2 IEEE 802.1x (7): 
     * shall indicated that the desired authentication method is WPA2 (Wi-Fi 
     * Protected Access Version 2) IEEE 802.1x. AuthenticationMethod should 
     * contain 7 only if EncryptionMethod contains 3 ("TKIP") or 4 ("CCMP"). 
     * 
     * @return	short	current AuthenticationMethod property value
     * @exception	Exception	
     */
    public AuthenticationMethod getAuthenticationMethod(){

    return this.authenticationMethod;
    } // getAuthenticationMethod

    /**
     * This method sets the WiFiEndpointSettings.AuthenticationMethod property 
     * value. This property is described as follows: 
     * 
     * AuthenticationMethod shall specify the 802.11 authentication method 
     * used when the settings are applied. 	* Other (1): shall 
     * indicate that the desired authentication method is not specified in 
     * the list below. If AuthenticationMethod contains 1, 
     * OtherAuthenticationMethod should not be NULL and should not be empty. 
     * 	* Open System (2): shall indicate that the desired 
     * authentication method is Open System. AuthenticationMethod should 
     * contain 2 only if EncryptionMethod contains 2 ("WEP") or 5 ("None"). 
     * 	* Shared Key (3): shall indicate that the desired 
     * authentication method is Shared Key. AuthenticationMethod should 
     * contain 3 only if EncryptionMethod contains 2 ("WEP") or 5 ("None"). 
     * 	* WPA PSK (4): shall indicate that the desired authentication 
     * method is WPA (Wi-Fi Protected Access) PSK (Pre-Shared Key). 
     * AuthenticationMethod should contain 4 only if EncryptionMethod 
     * contains 3 ("TKIP") or 4 ("CCMP"). 	* WPA IEEE 802.1x (5): 
     * shall indicate that the desired authentication method is WPA (Wi-Fi 
     * Protected Access) IEEE 802.1x. AuthenticationMethod should contain 5 
     * only if EncryptionMethod contains 3 ("TKIP") or 4 ("CCMP"). 	* 
     * WPA2 PSK (6): shall indicate that the desired authentication method is 
     * WPA2 (Wi-Fi Protected Access Version 2) PSK (Pre-Shared Key). 
     * AuthenticationMethod should containt 6 only if EncryptionMethod 
     * contains 3 ("TKIP") or 4 ("CCMP"). 	* WPA2 IEEE 802.1x (7): 
     * shall indicated that the desired authentication method is WPA2 (Wi-Fi 
     * Protected Access Version 2) IEEE 802.1x. AuthenticationMethod should 
     * contain 7 only if EncryptionMethod contains 3 ("TKIP") or 4 ("CCMP"). 
     * 
     * @param	short	new AuthenticationMethod property value
     * @exception	Exception	
     */
    public void setAuthenticationMethod(AuthenticationMethod 
	authenticationMethod){

    this.authenticationMethod = authenticationMethod;
    } // setAuthenticationMethod


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property OtherAuthenticationMethod. 
     */
    private String otherAuthenticationMethod;
    /**
     * This method returns the WiFiEndpointSettings.OtherAuthenticationMethod 
     * property value. This property is described as follows: 
     * 
     * OtherAuthenticationMethod shall specify the 802.11 authentication 
     * method used when the settings are applied if and only if 
     * AuthenticationMethod contains "Other". The format of this string shall 
     * be vendor-specific. 
     * 
     * @return	String	current OtherAuthenticationMethod property 
     * value 
     * @exception	Exception	
     */
    public String getOtherAuthenticationMethod(){

    return this.otherAuthenticationMethod;
    } // getOtherAuthenticationMethod

    /**
     * This method sets the WiFiEndpointSettings.OtherAuthenticationMethod 
     * property value. This property is described as follows: 
     * 
     * OtherAuthenticationMethod shall specify the 802.11 authentication 
     * method used when the settings are applied if and only if 
     * AuthenticationMethod contains "Other". The format of this string shall 
     * be vendor-specific. 
     * 
     * @param	String	new OtherAuthenticationMethod property 
     * value 
     * @exception	Exception	
     */
    public void setOtherAuthenticationMethod(String otherAuthenticationMethod) 
	{

    this.otherAuthenticationMethod = otherAuthenticationMethod;
    } // setOtherAuthenticationMethod


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property Keys. 
     */
    private String[] keys;
    /**
     * This method returns the WiFiEndpointSettings.Keys property value. This 
     * property is described as follows: 
     * 
     * Keys shall contain the default WEP encryption keys. Keys should be 
     * non-NULL if and only if EncryptionMethod contains 2 ("WEP"). 
     * 
     * @return	String[]	current Keys property value
     * @exception	Exception	
     */
    public String[] getKeys(){

    return this.keys;
    } // getKeys

    /**
     * This method sets the WiFiEndpointSettings.Keys property value. This 
     * property is described as follows: 
     * 
     * Keys shall contain the default WEP encryption keys. Keys should be 
     * non-NULL if and only if EncryptionMethod contains 2 ("WEP"). 
     * 
     * @param	String[]	new Keys property value
     * @exception	Exception	
     */
    public void setKeys(String[] keys) {

    this.keys = keys;
    } // setKeys


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property KeyIndex. 
     */
    private Byte keyIndex;
    /**
     * This method returns the WiFiEndpointSettings.KeyIndex property value. 
     * This property is described as follows: 
     * 
     * KeyIndex shall contain the index of the active key in the Keys array 
     * property. KeyIndex should be non-NULL if and only Keys is non-NULL. 
     * 
     * @return	Byte	current KeyIndex property value
     * @exception	Exception	
     */
    public Byte getKeyIndex(){

    return this.keyIndex;
    } // getKeyIndex

    /**
     * This method sets the WiFiEndpointSettings.KeyIndex property value. This 
     * property is described as follows: 
     * 
     * KeyIndex shall contain the index of the active key in the Keys array 
     * property. KeyIndex should be non-NULL if and only Keys is non-NULL. 
     * 
     * @param	Byte	new KeyIndex property value
     * @exception	Exception	
     */
    public void setKeyIndex(Byte keyIndex) {

    this.keyIndex = keyIndex;
    } // setKeyIndex


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PSKValue. 
     */
    private Byte[] pSKValue;
    /**
     * This method returns the WiFiEndpointSettings.PSKValue property value. 
     * This property is described as follows: 
     * 
     * The actual binary value of a PSK (pre-shared key). PSKValue and 
     * PSKPassPhrase should not both be non-NULL. PSKValue should be NULL if 
     * AuthenticationMethod does not contain 4 ("WPA PSK") or 6 ("WPA2 PSK"). 
     * 
     * @return	Byte[]	current PSKValue property value
     * @exception	Exception	
     */
    public Byte[] getPSKValue(){

    return this.pSKValue;
    } // getPSKValue

    /**
     * This method sets the WiFiEndpointSettings.PSKValue property value. This 
     * property is described as follows: 
     * 
     * The actual binary value of a PSK (pre-shared key). PSKValue and 
     * PSKPassPhrase should not both be non-NULL. PSKValue should be NULL if 
     * AuthenticationMethod does not contain 4 ("WPA PSK") or 6 ("WPA2 PSK"). 
     * 
     * @param	Byte[]	new PSKValue property value
     * @exception	Exception	
     */
    public void setPSKValue(Byte[] pSKValue) {

    this.pSKValue = pSKValue;
    } // setPSKValue


    /**
     * The following constants are defined for use with the ValueMap/Values 
     * qualified property PSKPassPhrase. 
     */
    private String pSKPassPhrase;
    /**
     * This method returns the WiFiEndpointSettings.PSKPassPhrase property 
     * value. This property is described as follows: 
     * 
     * An ASCII alphanumeric string used to generate a PSK (pre-shared key). 
     * PSKPassPhrase and PSKValue should not both be non-NULL. PSKPassPhrase 
     * should be NULL if AuthenticationMethod does not contain 4 ("WPA PSK") 
     * or 6 ("WPA2 PSK"). 
     * 
     * @return	String	current PSKPassPhrase property value
     * @exception	Exception	
     */
    public String getPSKPassPhrase(){

    return this.pSKPassPhrase;
    } // getPSKPassPhrase

    /**
     * This method sets the WiFiEndpointSettings.PSKPassPhrase property value. 
     * This property is described as follows: 
     * 
     * An ASCII alphanumeric string used to generate a PSK (pre-shared key). 
     * PSKPassPhrase and PSKValue should not both be non-NULL. PSKPassPhrase 
     * should be NULL if AuthenticationMethod does not contain 4 ("WPA PSK") 
     * or 6 ("WPA2 PSK"). 
     * 
     * @param	String	new PSKPassPhrase property value
     * @exception	Exception	
     */
    public void setPSKPassPhrase(String pSKPassPhrase) {

    this.pSKPassPhrase = pSKPassPhrase;
    } // setPSKPassPhrase



} // Class WiFiEndpointSettings
